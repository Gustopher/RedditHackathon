{"ts":1371783607400,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"#!/usr/bin/env php\n<?php\n/*\n * This file is part of Composer.\n *\n * (c) Nils Adermann <naderman@naderman.de>\n *     Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view\n * the license that is located at the bottom of this file.\n */\n\nPhar::mapPhar('composer.phar');\ndefine('COMPOSER_DEV_WARNING_TIME', 1374371825);\nrequire 'phar://composer.phar/bin/composer';\n\n__HALT_COMPILER(); ?>\r\n�\\\u0000\u0000 \u0001\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0000\r\u0000\u0000\u0000composer.phar\u0000\u0000\u0000\u0000\u0011\u0000\u0000\u0000src/bootstrap.php�\u0001\u0000\u0000���Q�\u0001\u0000\u0000��2��\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001d\u0000\u0000\u0000src/Composer/IO/ConsoleIO.php�\u0010\u0000\u0000���Q�\u0010\u0000\u0000UP���\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001a\u0000\u0000\u0000src/Composer/IO/NullIO.php|\u0004\u0000\u0000���Q|\u0004\u0000\u0000N��߶\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001f\u0000\u0000\u0000src/Composer/IO/IOInterface.php�\u0003\u0000\u0000���Q�\u0003\u0000\u0000��Dt�\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001c\u0000\u0000\u0000src/Composer/IO/BufferIO.php+\u0004\u0000\u0000���Q+\u0004\u0000\u0000]\u000b\u0012��\u0001\u0000\u0000\u0000\u0000\u0000\u0000)\u0000\u0000\u0000src/Composer/Command/RunScriptCommand.php.\u0006\u0000\u0000���Q.\u0006\u0000\u0000�҈W�\u0001\u0000\u0000\u0000\u0000\u0000\u0000(\u0000\u0000\u0000src/Composer/Command/DiagnoseCommand.php\u000f'\u0000\u0000���Q\u000f'\u0000\u0000��\u0002��\u0001\u0000\u0000\u0000\u0000\u0000\u0000'\u0000\u0000\u0000src/Composer/Command/ArchiveCommand.php'\u000e\u0000\u0000���Q'\u000e\u0000\u0000G�}l�\u0001\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000src/Composer/Command/Command.php�\u0004\u0000\u0000���Q�\u0004\u0000\u0000�L�v�\u0001\u0000\u0000\u0000\u0000\u0000\u0000-\u0000\u0000\u0000src/Composer/Command/CreateProjectCommand.php�*\u0000\u0000���Q�*\u0000\u0000V\u001c�w�\u0001\u0000\u0000\u0000\u0000\u0000\u0000%\u0000\u0000\u0000src/Composer/Command/AboutCommand.php�\u0002\u0000\u0000���Q�\u0002\u0000\u0000�M�*�\u0001\u0000\u0000\u0000\u0000\u0000\u0000$\u0000\u0000\u0000src/Composer/Command/ShowCommand.php\u0017+\u0000\u0000���Q\u0017+\u0000\u0000%�\u00065�\u0001\u0000\u0000\u0000\u0000\u0000\u0000&\u0000\u0000\u0000src/Composer/Command/UpdateCommand.php�\u000e\u0000\u0000���Q�\u000e\u0000\u00003��\u0017�\u0001\u0000\u0000\u0000\u0000\u0000\u0000&\u0000\u0000\u0000src/Composer/Command/ConfigCommand.php�'\u0000\u0000���Q�'\u0000\u0000{�L#�\u0001\u0000\u0000\u0000\u0000\u0000\u0000'\u0000\u0000\u0000src/Composer/Command/InstallCommand.php�\f\u0000\u0000���Q�\f\u0000\u0000�\u0001���\u0001\u0000\u0000\u0000\u0000\u0000\u0000(\u0000\u0000\u0000src/Composer/Command/ValidateCommand.phpG\b\u0000\u0000���QG\b\u0000\u0000�\u000e;r�\u0001\u0000\u0000\u0000\u0000\u0000\u0000'\u0000\u0000\u0000src/Composer/Command/DependsCommand.phpo\t\u0000\u0000���Qo\t\u0000\u0000T�.r�\u0001\u0000\u0000\u0000\u0000\u0000\u0000&\u0000\u0000\u0000src/Composer/Command/SearchCommand.php]\b\u0000\u0000���Q]\b\u0000\u0000�7�2�\u0001\u0000\u0000\u0000\u0000\u0000\u0000*\u0000\u0000\u0000src/Composer/Command/SelfUpdateCommand.phpt\t\u0000\u0000���Qt\t\u0000\u0000�K�\n�\u0001\u0000\u0000\u0000\u0000\u0000\u0000'\u0000\u0000\u0000src/Composer/Command/RequireCommand.phpn\u000f\u0000\u0000���Qn\u000f\u0000\u0000���\u001c�\u0001\u0000\u0000\u0000\u0000\u0000\u0000,\u0000\u0000\u0000src/Composer/Command/DumpAutoloadCommand.phpy\u0004\u0000\u0000���Qy\u0004\u0000\u0000R-=Ҷ\u0001\u0000\u0000\u0000\u0000\u0000\u0000,\u0000\u0000\u0000src/Composer/Command/Helper/DialogHelper.php�\u0001\u0000\u0000���Q�\u0001\u0000\u0000���&�\u0001\u0000\u0000\u0000\u0000\u0000\u0000&\u0000\u0000\u0000src/Composer/Command/StatusCommand.php`\u0007\u0000\u0000���Q`\u0007\u0000\u0000\u0011J���\u0001\u0000\u0000\u0000\u0000\u0000\u0000$\u0000\u0000\u0000src/Composer/Command/InitCommand.php81\u0000\u0000���Q81\u0000\u0000��[¶\u0001\u0000\u0000\u0000\u0000\u0000\u0000)\u0000\u0000\u0000src/Composer/Downloader/VcsDownloader.php4\u000f\u0000\u0000���Q4\u000f\u0000\u0000\fͲ��\u0001\u0000\u0000\u0000\u0000\u0000\u0000*\u0000\u0000\u0000src/Composer/Downloader/FileDownloader.php�\u0014\u0000\u0000���Q�\u0014\u0000\u0000�7�q�\u0001\u0000\u0000\u0000\u0000\u0000\u0000)\u0000\u0000\u0000src/Composer/Downloader/SvnDownloader.php�\f\u0000\u0000���Q�\f\u0000\u00003\f\nж\u0001\u0000\u0000\u0000\u0000\u0000\u00000\u0000\u0000\u0000src/Composer/Downloader/PearPackageExtractor.phpe\u001b\u0000\u0000���Qe\u001b\u0000\u0000סP��\u0001\u0000\u0000\u0000\u0000\u0000\u0000+\u0000\u0000\u0000src/Composer/Downloader/DownloadManager.php�\u000e\u0000\u0000���Q�\u000e\u0000\u0000��\u0014Ŷ\u0001\u0000\u0000\u0000\u0000\u0000\u0000/\u0000\u0000\u0000src/Composer/Downloader/DownloaderInterface.php�\u0001\u0000\u0000���Q�\u0001\u0000\u0000gs!l�\u0001\u0000\u0000\u0000\u0000\u0000\u0000.\u0000\u0000\u0000src/Composer/Downloader/TransportException.php�\u0000\u0000\u0000���Q�\u0000\u0000\u0000�8͊�\u0001\u0000\u0000\u0000\u0000\u0000\u0000*\u0000\u0000\u0000src/Composer/Downloader/PharDownloader.php�\u0000\u0000\u0000���Q�\u0000\u0000\u0000��\u001f��\u0001\u0000\u0000\u0000\u0000\u0000\u0000)\u0000\u0000\u0000src/Composer/Downloader/TarDownloader.php�\u0000\u0000\u0000���Q�\u0000\u0000\u0000͒X?�\u0001\u0000\u0000\u0000\u0000\u0000\u0000(\u0000\u0000\u0000src/Composer/Downloader/HgDownloader.php7\u0007\u0000\u0000���Q7\u0007\u0000\u0000��q��\u0001\u0000\u0000\u0000\u0000\u0000\u0000-\u0000\u0000\u0000src/Composer/Downloader/ArchiveDownloader.phpf\r\u0000\u0000���Qf\r\u0000\u0000���c�\u0001\u0000\u0000\u0000\u0000\u0000\u0000/\u0000\u0000\u0000src/Composer/Downloader/FilesystemException.php\u000f\u0001\u0000\u0000���Q\u000f\u0001\u0000\u0000]T���\u0001\u0000\u0000\u0000\u0000\u0000\u0000)\u0000\u0000\u0000src/Composer/Downloader/ZipDownloader.php\u0014\n\u0000\u0000���Q\u0014\n\u0000\u0000��p��\u0001\u0000\u0000\u0000\u0000\u0000\u0000)\u0000\u0000\u0000src/Composer/Downloader/GitDownloader.php�1\u0000\u0000���Q�1\u0000\u0000�w�\u001a�\u0001\u0000\u0000\u0000\u0000\u0000\u00006\u0000\u0000\u0000src/Composer/Repository/InvalidRepositoryException.phpn\u0000\u0000\u0000���Qn\u0000\u0000\u0000��똶\u0001\u0000\u0000\u0000\u0000\u0000\u0000+\u0000\u0000\u0000src/Composer/Repository/ArrayRepository.php\u0007\f\u0000\u0000���Q\u0007\f\u0000\u0000k�b��\u0001\u0000\u0000\u0000\u0000\u0000\u00000\u0000\u0000\u0000src/Composer/Repository/FilesystemRepository.php�\u0004\u0000\u0000���Q�\u0004\u0000\u0000�Y�z�\u0001\u0000\u0000\u0000\u0000\u0000\u00007\u0000\u0000\u0000src/Composer/Repository/WritableRepositoryInterface.php�\u0001\u0000\u0000���Q�\u0001\u0000\u0000�/s��\u0001\u0000\u0000\u0000\u0000\u0000\u0000*\u0000\u0000\u0000src/Composer/Repository/PearRepository.php\u0007\u0015\u0000\u0000���Q\u0007\u0015\u0000\u0000b�E��\u0001\u0000\u0000\u0000\u0000\u0000\u0000-\u0000\u0000\u0000src/Composer/Repository/RepositoryManager.php�\u0006\u0000\u0000���Q�\u0006\u0000\u0000r�_��\u0001\u0000\u0000\u0000\u0000\u0000\u00003\u0000\u0000\u0000src/Composer/Repository/WritableArrayRepository.php\u000f\u0003\u0000\u0000���Q\u000f\u0003\u0000\u0000�G\u0017*�\u0001\u0000\u0000\u0000\u0000\u0000\u0000,\u0000\u0000\u0000src/Composer/Repository/Vcs/GitHubDriver.php} \u0000\u0000���Q} \u0000\u0000w�pƶ\u0001\u0000\u0000\u0000\u0000\u0000\u00002\u0000\u0000\u0000src/Composer/Repository/Vcs/GitBitbucketDriver.php=\r\u0000\u0000���Q=\r\u0000\u0000�ǎ��\u0001\u0000\u0000\u0000\u0000\u0000\u0000)\u0000\u0000\u0000src/Composer/Repository/Vcs/GitDriver.php�\u0013\u0000\u0000���Q�\u0013\u0000\u0000�ݝ3�\u0001\u0000\u0000\u0000\u0000\u0000\u0000)\u0000\u0000\u0000src/Composer/Repository/Vcs/SvnDriver.php\u0010\u0018\u0000\u0000���Q\u0010\u0018\u0000\u0000�\u001a@��\u0001\u0000\u0000\u0000\u0000\u0000\u00002\u0000\u0000\u0000src/Composer/Repository/Vcs/VcsDriverInterface.phpC\u0002\u0000\u0000���QC\u0002\u0000\u0000�F���\u0001\u0000\u0000\u0000\u0000\u0000\u0000(\u0000\u0000\u0000src/Composer/Repository/Vcs/HgDriver.php\t\u0013\u0000\u0000���Q\t\u0013\u0000\u0000n0���\u0001\u0000\u0000\u0000\u0000\u0000\u0000)\u0000\u0000\u0000src/Composer/Repository/Vcs/VcsDriver.php�\u0005\u0000\u0000���Q�\u0005\u0000\u0000ȸ���\u0001\u0000\u0000\u0000\u0000\u0000\u00001\u0000\u0000\u0000src/Composer/Repository/Vcs/HgBitbucketDriver.php�\r\u0000\u0000���Q�\r\u0000\u0000�+�A�\u0001\u0000\u0000\u0000\u0000\u0000\u00004\u0000\u0000\u0000src/Composer/Repository/InstalledArrayRepository.php�\u0000\u0000\u0000���Q�\u0000\u0000\u0000/�~>�\u0001\u0000\u0000\u0000\u0000\u0000\u00007\u0000\u0000\u0000src/Composer/Repository/RepositorySecurityException.phpo\u0000\u0000\u0000���Qo\u0000\u0000\u0000pի��\u0001\u0000\u0000\u0000\u0000\u0000\u00009\u0000\u0000\u0000src/Composer/Repository/StreamableRepositoryInterface.php�\u0001\u0000\u0000���Q�\u0001\u0000\u00008�\u0001��\u0001\u0000\u0000\u0000\u0000\u0000\u0000)\u0000\u0000\u0000src/Composer/Repository/VcsRepository.php�\u001b\u0000\u0000���Q�\u001b\u0000\u0000�/ʖ�\u0001\u0000\u0000\u0000\u0000\u0000\u0000.\u0000\u0000\u0000src/Composer/Repository/PlatformRepository.php\u0007\u000b\u0000\u0000���Q\u0007\u000b\u0000\u0000���|�\u0001\u0000\u0000\u0000\u0000\u0000\u00009\u0000\u0000\u0000src/Composer/Repository/InstalledFilesystemRepository.php�\u0000\u0000\u0000���Q�\u0000\u0000\u0000V\n�_�\u0001\u0000\u0000\u0000\u0000\u0000\u0000/\u0000\u0000\u0000src/Composer/Repository/CompositeRepository.php�\b\u0000\u0000���Q�\b\u0000\u0000N]�\u0014�\u0001\u0000\u0000\u0000\u0000\u0000\u00008\u0000\u0000\u0000src/Composer/Repository/InstalledRepositoryInterface.php�\u0000\u0000\u0000���Q�\u0000\u0000\u0000\u0018�9p�\u0001\u0000\u0000\u0000\u0000\u0000\u0000.\u0000\u0000\u0000src/Composer/Repository/ComposerRepository.php\u001a8\u0000\u0000���Q\u001a8\u0000\u0000��<\u0004�\u0001\u0000\u0000\u0000\u0000\u0000\u0000/\u0000\u0000\u0000src/Composer/Repository/Pear/DependencyInfo.phpq\u0001\u0000\u0000���Qq\u0001\u0000\u0000f�T��\u0001\u0000\u0000\u0000\u0000\u0000\u00008\u0000\u0000\u0000src/Composer/Repository/Pear/PackageDependencyParser.php!\u0016\u0000\u0000���Q!\u0016\u0000\u0000=��F�\u0001\u0000\u0000\u0000\u0000\u0000\u0000,\u0000\u0000\u0000src/Composer/Repository/Pear/ChannelInfo.php�\u0001\u0000\u0000���Q�\u0001\u0000\u0000:T*ɶ\u0001\u0000\u0000\u0000\u0000\u0000\u0000.\u0000\u0000\u0000src/Composer/Repository/Pear/ChannelReader.phpn\u0006\u0000\u0000���Qn\u0006\u0000\u0000\u001c�8\u0015�\u0001\u0000\u0000\u0000\u0000\u0000\u0000,\u0000\u0000\u0000src/Composer/Repository/Pear/PackageInfo.php�\u0003\u0000\u0000���Q�\u0003\u0000\u0000�\r�\f�\u0001\u0000\u0000\u0000\u0000\u0000\u00005\u0000\u0000\u0000src/Composer/Repository/Pear/DependencyConstraint.phpq\u0002\u0000\u0000���Qq\u0002\u0000\u00009\u000e\u0017=�\u0001\u0000\u0000\u0000\u0000\u0000\u00004\u0000\u0000\u0000src/Composer/Repository/Pear/ChannelRest11Reader.php&\t\u0000\u0000���Q&\t\u0000\u0000�Ub\b�\u0001\u0000\u0000\u0000\u0000\u0000\u0000,\u0000\u0000\u0000src/Composer/Repository/Pear/ReleaseInfo.php�\u0001\u0000\u0000���Q�\u0001\u0000\u0000o��ö\u0001\u0000\u0000\u0000\u0000\u0000\u00002\u0000\u0000\u0000src/Composer/Repository/Pear/BaseChannelReader.php6\u0005\u0000\u0000���Q6\u0005\u0000\u0000.fi!�\u0001\u0000\u0000\u0000\u0000\u0000\u00004\u0000\u0000\u0000src/Composer/Repository/Pear/ChannelRest10Reader.php�\t\u0000\u0000���Q�\t\u0000\u0000\u0004O���\u0001\u0000\u0000\u0000\u0000\u0000\u0000/\u0000\u0000\u0000src/Composer/Repository/RepositoryInterface.php�\u0001\u0000\u0000���Q�\u0001\u0000\u0000���ɶ\u0001\u0000\u0000\u0000\u0000\u0000\u0000.\u0000\u0000\u0000src/Composer/Repository/ArtifactRepository.phpF\b\u0000\u0000���QF\b\u0000\u0000�\u000b8��\u0001\u0000\u0000\u0000\u0000\u0000\u0000-\u0000\u0000\u0000src/Composer/Repository/PackageRepository.phpG\u0003\u0000\u0000���QG\u0003\u0000\u0000�\u0004:k�\u0001\u0000\u0000\u0000\u0000\u0000\u0000(\u0000\u0000\u0000src/Composer/Package/CompletePackage.php�\u0005\u0000\u0000���Q�\u0005\u0000\u00008Gl]�\u0001\u0000\u0000\u0000\u0000\u0000\u0000+\u0000\u0000\u0000src/Composer/Package/Dumper/ArrayDumper.phpe\n\u0000\u0000���Qe\n\u0000\u0000�����\u0001\u0000\u0000\u0000\u0000\u0000\u00007\u0000\u0000\u0000src/Composer/Package/Loader/InvalidPackageException.phpE\u0002\u0000\u0000���QE\u0002\u0000\u0000xb\u0013��\u0001\u0000\u0000\u0000\u0000\u0000\u0000*\u0000\u0000\u0000src/Composer/Package/Loader/JsonLoader.php�\u0001\u0000\u0000���Q�\u0001\u0000\u0000!~�{�\u0001\u0000\u0000\u0000\u0000\u0000\u0000/\u0000\u0000\u0000src/Composer/Package/Loader/LoaderInterface.php�\u0000\u0000\u0000���Q�\u0000\u0000\u0000�}�ζ\u0001\u0000\u0000\u0000\u0000\u0000\u0000+\u0000\u0000\u0000src/Composer/Package/Loader/ArrayLoader.php�\u0017\u0000\u0000���Q�\u0017\u0000\u0000��\u00000�\u0001\u0000\u0000\u0000\u0000\u0000\u00005\u0000\u0000\u0000src/Composer/Package/Loader/ValidatingArrayLoader.php0)\u0000\u0000���Q0)\u0000\u0000�_�Ӷ\u0001\u0000\u0000\u0000\u0000\u0000\u00001\u0000\u0000\u0000src/Composer/Package/Loader/RootPackageLoader.php�\u001b\u0000\u0000���Q�\u001b\u0000\u0000�\u0018洶\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001f\u0000\u0000\u0000src/Composer/Package/Locker.phpc\u001a\u0000\u0000���Qc\u001a\u0000\u0000�\b���\u0001\u0000\u0000\u0000\u0000\u0000\u0000)\u0000\u0000\u0000src/Composer/Package/PackageInterface.phpg\u0006\u0000\u0000���Qg\u0006\u0000\u0000`�XĶ\u0001\u0000\u0000\u0000\u0000\u0000\u0000$\u0000\u0000\u0000src/Composer/Package/BasePackage.php[\n\u0000\u0000���Q[\n\u0000\u0000$\b�Ҷ\u0001\u0000\u0000\u0000\u0000\u0000\u0000.\u0000\u0000\u0000src/Composer/Package/Version/VersionParser.php�$\u0000\u0000���Q�$\u0000\u0000\n N̶\u0001\u0000\u0000\u0000\u0000\u0000\u00001\u0000\u0000\u0000src/Composer/Package/CompletePackageInterface.php�\u0001\u0000\u0000���Q�\u0001\u0000\u0000��2��\u0001\u0000\u0000\u0000\u0000\u0000\u0000-\u0000\u0000\u0000src/Composer/Package/RootPackageInterface.php�\u0001\u0000\u0000���Q�\u0001\u0000\u0000�qKж\u0001\u0000\u0000\u0000\u0000\u0000\u0000$\u0000\u0000\u0000src/Composer/Package/RootPackage.phpn\u0004\u0000\u0000���Qn\u0004\u0000\u0000�ACO�\u0001\u0000\u0000\u0000\u0000\u0000\u00003\u0000\u0000\u0000src/Composer/Package/Archiver/ArchiverInterface.php�\u0000\u0000\u0000���Q�\u0000\u0000\u0000\u0007<ʸ�\u0001\u0000\u0000\u0000\u0000\u0000\u00007\u0000\u0000\u0000src/Composer/Package/Archiver/ComposerExcludeFilter.php\u001f\u0001\u0000\u0000���Q\u001f\u0001\u0000\u0000�SZ0�\u0001\u0000\u0000\u0000\u0000\u0000\u0000.\u0000\u0000\u0000src/Composer/Package/Archiver/PharArchiver.php[\u0003\u0000\u0000���Q[\u0003\u0000\u0000�5���\u0001\u0000\u0000\u0000\u0000\u0000\u00003\u0000\u0000\u0000src/Composer/Package/Archiver/BaseExcludeFilter.php�\u0006\u0000\u0000���Q�\u0006\u0000\u0000��#&�\u0001\u0000\u0000\u0000\u0000\u0000\u00002\u0000\u0000\u0000src/Composer/Package/Archiver/GitExcludeFilter.phpw\u0003\u0000\u0000���Qw\u0003\u0000\u0000LgU��\u0001\u0000\u0000\u0000\u0000\u0000\u00007\u0000\u0000\u0000src/Composer/Package/Archiver/ArchivableFilesFinder.phpe\u0004\u0000\u0000���Qe\u0004\u0000\u0000T��z�\u0001\u0000\u0000\u0000\u0000\u0000\u00000\u0000\u0000\u0000src/Composer/Package/Archiver/ArchiveManager.php�\t\u0000\u0000���Q�\t\u0000\u0000�P\u001bն\u0001\u0000\u0000\u0000\u0000\u0000\u00001\u0000\u0000\u0000src/Composer/Package/Archiver/HgExcludeFilter.php\u0013\u0005\u0000\u0000���Q\u0013\u0005\u0000\u0000~�\u000e��\u0001\u0000\u0000\u0000\u0000\u0000\u0000)\u0000\u0000\u0000src/Composer/Package/RootAliasPackage.php�\u0003\u0000\u0000���Q�\u0003\u0000\u0000�\u0012>\u0005�\u0001\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000src/Composer/Package/Package.php�\u0013\u0000\u0000���Q�\u0013\u0000\u0000Z��ζ\u0001\u0000\u0000\u0000\u0000\u0000\u0000%\u0000\u0000\u0000src/Composer/Package/AliasPackage.phpE\u0012\u0000\u0000���QE\u0012\u0000\u0000Vn���\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001d\u0000\u0000\u0000src/Composer/Package/Link.phpQ\u0005\u0000\u0000���QQ\u0005\u0000\u0000��9\u0004�\u0001\u0000\u0000\u0000\u0000\u0000\u00007\u0000\u0000\u0000src/Composer/Package/LinkConstraint/EmptyConstraint.php�\u0001\u0000\u0000���Q�\u0001\u0000\u0000\u0000�\u001b��\u0001\u0000\u0000\u0000\u0000\u0000\u00007\u0000\u0000\u0000src/Composer/Package/LinkConstraint/MultiConstraint.phpg\u0004\u0000\u0000���Qg\u0004\u0000\u0000x�\u00188�\u0001\u0000\u0000\u0000\u0000\u0000\u00009\u0000\u0000\u0000src/Composer/Package/LinkConstraint/VersionConstraint.php�\u0006\u0000\u0000���Q�\u0006\u0000\u0000l�`C�\u0001\u0000\u0000\u0000\u0000\u0000\u0000:\u0000\u0000\u0000src/Composer/Package/LinkConstraint/SpecificConstraint.phpq\u0002\u0000\u0000���Qq\u0002\u0000\u0000�S���\u0001\u0000\u0000\u0000\u0000\u0000\u0000?\u0000\u0000\u0000src/Composer/Package/LinkConstraint/LinkConstraintInterface.php\u0015\u0001\u0000\u0000���Q\u0015\u0001\u0000\u0000�����\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0016\u0000\u0000\u0000src/Composer/Cache.php<\r\u0000\u0000���Q<\r\u0000\u0000]�ꍶ\u0001\u0000\u0000\u0000\u0000\u0000\u00003\u0000\u0000\u0000src/Composer/DependencyResolver/PolicyInterface.php�\u0001\u0000\u0000���Q�\u0001\u0000\u0000B\u0018���\u0001\u0000\u0000\u0000\u0000\u0000\u0000+\u0000\u0000\u0000src/Composer/DependencyResolver/RuleSet.php�\t\u0000\u0000���Q�\t\u0000\u0000Jy\f��\u0001\u0000\u0000\u0000\u0000\u0000\u00006\u0000\u0000\u0000src/Composer/DependencyResolver/SolverBugException.php�\u0001\u0000\u0000���Q�\u0001\u0000\u0000\"qN�\u0001\u0000\u0000\u0000\u0000\u0000\u00001\u0000\u0000\u0000src/Composer/DependencyResolver/DefaultPolicy.php�\u0018\u0000\u0000���Q�\u0018\u0000\u00001��L�\u0001\u0000\u0000\u0000\u0000\u0000\u0000-\u0000\u0000\u0000src/Composer/DependencyResolver/Decisions.phpQ\u000f\u0000\u0000���QQ\u000f\u0000\u0000?��$�\u0001\u0000\u0000\u0000\u0000\u0000\u00001\u0000\u0000\u0000src/Composer/DependencyResolver/RuleWatchNode.php�\u0003\u0000\u0000���Q�\u0003\u0000\u0000]$���\u0001\u0000\u0000\u0000\u0000\u0000\u0000;\u0000\u0000\u0000src/Composer/DependencyResolver/SolverProblemsException.php%\u0004\u0000\u0000���Q%\u0004\u0000\u0000T\u001a�P�\u0001\u0000\u0000\u0000\u0000\u0000\u0000/\u0000\u0000\u0000src/Composer/DependencyResolver/Transaction.php\u0011\u0014\u0000\u0000���Q\u0011\u0014\u0000\u0000��އ�\u0001\u0000\u0000\u0000\u0000\u0000\u0000@\u0000\u0000\u0000src/Composer/DependencyResolver/Operation/UninstallOperation.phpI\u0002\u0000\u0000���QI\u0002\u0000\u0000F��ɶ\u0001\u0000\u0000\u0000\u0000\u0000\u0000=\u0000\u0000\u0000src/Composer/DependencyResolver/Operation/UpdateOperation.phph\u0003\u0000\u0000���Qh\u0003\u0000\u0000�S�]�\u0001\u0000\u0000\u0000\u0000\u0000\u0000I\u0000\u0000\u0000src/Composer/DependencyResolver/Operation/MarkAliasInstalledOperation.php�\u0002\u0000\u0000���Q�\u0002\u0000\u0000xUZa�\u0001\u0000\u0000\u0000\u0000\u0000\u0000>\u0000\u0000\u0000src/Composer/DependencyResolver/Operation/InstallOperation.phpC\u0002\u0000\u0000���QC\u0002\u0000\u0000�\\�*�\u0001\u0000\u0000\u0000\u0000\u0000\u0000=\u0000\u0000\u0000src/Composer/DependencyResolver/Operation/SolverOperation.php�\u0001\u0000\u0000���Q�\u0001\u0000\u0000ħݔ�\u0001\u0000\u0000\u0000\u0000\u0000\u0000K\u0000\u0000\u0000src/Composer/DependencyResolver/Operation/MarkAliasUninstalledOperation.php�\u0002\u0000\u0000���Q�\u0002\u0000\u0000_iǫ�\u0001\u0000\u0000\u0000\u0000\u0000\u0000@\u0000\u0000\u0000src/Composer/DependencyResolver/Operation/OperationInterface.php�\u0000\u0000\u0000���Q�\u0000\u0000\u0000��&��\u0001\u0000\u0000\u0000\u0000\u0000\u0000(\u0000\u0000\u0000src/Composer/DependencyResolver/Pool.php &\u0000\u0000���Q &\u0000\u0000��\u0017��\u0001\u0000\u0000\u0000\u0000\u0000\u0000(\u0000\u0000\u0000src/Composer/DependencyResolver/Rule.php�\u0014\u0000\u0000���Q�\u0014\u0000\u0000\u0005�e�\u0001\u0000\u0000\u0000\u0000\u0000\u00004\u0000\u0000\u0000src/Composer/DependencyResolver/RuleSetGenerator.phpO\u0015\u0000\u0000���QO\u0015\u0000\u0000_<�=�\u0001\u0000\u0000\u0000\u0000\u0000\u0000/\u0000\u0000\u0000src/Composer/DependencyResolver/DebugSolver.php�\u0006\u0000\u0000���Q�\u0006\u0000\u0000�ҭ��\u0001\u0000\u0000\u0000\u0000\u0000\u00003\u0000\u0000\u0000src/Composer/DependencyResolver/RuleSetIterator.php\u0014\u0006\u0000\u0000���Q\u0014\u0006\u0000\u0000}����\u0001\u0000\u0000\u0000\u0000\u0000\u00002\u0000\u0000\u0000src/Composer/DependencyResolver/RuleWatchChain.phpi\u0001\u0000\u0000���Qi\u0001\u0000\u0000h��,�\u0001\u0000\u0000\u0000\u0000\u0000\u0000*\u0000\u0000\u0000src/Composer/DependencyResolver/Solver.php�5\u0000\u0000���Q�5\u0000\u0000���\u0001\u0000\u0000\u0000\u0000\u0000\u0000+\u0000\u0000\u0000src/Composer/DependencyResolver/Request.php�\u0004\u0000\u0000���Q�\u0004\u0000\u00001\u001a�I�\u0001\u0000\u0000\u0000\u0000\u0000\u0000+\u0000\u0000\u0000src/Composer/DependencyResolver/Problem.php�\u0010\u0000\u0000���Q�\u0010\u0000\u0000t�\u0002G�\u0001\u0000\u0000\u0000\u0000\u0000\u00002\u0000\u0000\u0000src/Composer/DependencyResolver/RuleWatchGraph.php�\u0006\u0000\u0000���Q�\u0006\u0000\u0000�r�v�\u0001\u0000\u0000\u0000\u0000\u0000\u0000-\u0000\u0000\u0000src/Composer/Config/ConfigSourceInterface.php�\u0001\u0000\u0000���Q�\u0001\u0000\u0000!�\u0002p�\u0001\u0000\u0000\u0000\u0000\u0000\u0000(\u0000\u0000\u0000src/Composer/Config/JsonConfigSource.php\u001e\b\u0000\u0000���Q\u001e\b\u0000\u0000�d�b�\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000src/Composer/Factory.php\\$\u0000\u0000���Q\\$\u0000\u0000\u0010�\u001f��\u0001\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000src/Composer/Util/Filesystem.php�\u0019\u0000\u0000���Q�\u0019\u0000\u0000���\u0017�\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001c\u0000\u0000\u0000src/Composer/Util/GitHub.php�\t\u0000\u0000���Q�\t\u0000\u0000~)�\u001d�\u0001\u0000\u0000\u0000\u0000\u0000\u0000%\u0000\u0000\u0000src/Composer/Util/ProcessExecutor.phpW\u0006\u0000\u0000���QW\u0006\u0000\u0000�\u0015 ��\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0019\u0000\u0000\u0000src/Composer/Util/Git.phpa\u0002\u0000\u0000���Qa\u0002\u0000\u0000\u000e����\u0001\u0000\u0000\u0000\u0000\u0000\u0000&\u0000\u0000\u0000src/Composer/Util/RemoteFilesystem.php�\u001b\u0000\u0000���Q�\u001b\u0000\u0000�A���\u0001\u0000\u0000\u0000\u0000\u0000\u0000*\u0000\u0000\u0000src/Composer/Util/StreamContextFactory.phpi\n\u0000\u0000���Qi\n\u0000\u0000y^r��\u0001\u0000\u0000\u0000\u0000\u0000\u0000%\u0000\u0000\u0000src/Composer/Util/ConfigValidator.phph\n\u0000\u0000���Qh\n\u0000\u0000E�.1�\u0001\u0000\u0000\u0000\u0000\u0000\u0000\"\u0000\u0000\u0000src/Composer/Util/ErrorHandler.php\u0014\u0002\u0000\u0000���Q\u0014\u0002\u0000\u0000�@���\u0001\u0000\u0000\u0000\u0000\u0000\u0000+\u0000\u0000\u0000src/Composer/Util/SpdxLicenseIdentifier.php6\n\u0000\u0000���Q6\n\u0000\u0000�6�o�\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0019\u0000\u0000\u0000src/Composer/Util/Svn.php�\f\u0000\u0000���Q�\f\u0000\u0000E/ty�\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0019\u0000\u0000\u0000src/Composer/Composer.php�\u0007\u0000\u0000���Q�\u0007\u0000\u0000\u0004\u0013?��\u0001\u0000\u0000\u0000\u0000\u0000\u0000%\u0000\u0000\u0000src/Composer/Json/JsonManipulator.php�\u001e\u0000\u0000���Q�\u001e\u0000\u0000a�!#�\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001e\u0000\u0000\u0000src/Composer/Json/JsonFile.php�\u0013\u0000\u0000���Q�\u0013\u0000\u0000���Q�\u0001\u0000\u0000\u0000\u0000\u0000\u0000-\u0000\u0000\u0000src/Composer/Json/JsonValidationException.php2\u0001\u0000\u0000���Q2\u0001\u0000\u00009b�1�\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0017\u0000\u0000\u0000src/Composer/Config.php�\u0011\u0000\u0000���Q�\u0011\u0000\u0000��<��\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001d\u0000\u0000\u0000src/Composer/Script/Event.phpu\u0002\u0000\u0000���Qu\u0002\u0000\u0000\u0015\u00157��\u0001\u0000\u0000\u0000\u0000\u0000\u0000$\u0000\u0000\u0000src/Composer/Script/ScriptEvents.php}\u0003\u0000\u0000���Q}\u0003\u0000\u0000b4\u001c��\u0001\u0000\u0000\u0000\u0000\u0000\u0000$\u0000\u0000\u0000src/Composer/Script/CommandEvent.phpo\u0000\u0000\u0000���Qo\u0000\u0000\u0000\r�\u0014y�\u0001\u0000\u0000\u0000\u0000\u0000\u0000$\u0000\u0000\u0000src/Composer/Script/PackageEvent.php�\u0001\u0000\u0000���Q�\u0001\u0000\u0000a\u0016�\t�\u0001\u0000\u0000\u0000\u0000\u0000\u0000'\u0000\u0000\u0000src/Composer/Script/EventDispatcher.phpu\f\u0000\u0000���Qu\f\u0000\u0000�����\u0001\u0000\u0000\u0000\u0000\u0000\u0000(\u0000\u0000\u0000src/Composer/Installer/NoopInstaller.php5\u0005\u0000\u0000���Q5\u0005\u0000\u0000�8qa�\u0001\u0000\u0000\u0000\u0000\u0000\u0000/\u0000\u0000\u0000src/Composer/Installer/MetapackageInstaller.php�\u0004\u0000\u0000���Q�\u0004\u0000\u0000��fζ\u0001\u0000\u0000\u0000\u0000\u0000\u0000(\u0000\u0000\u0000src/Composer/Installer/PearInstaller.php\u0007\u0011\u0000\u0000���Q\u0007\u0011\u0000\u0000\u001fW�u�\u0001\u0000\u0000\u0000\u0000\u0000\u0000+\u0000\u0000\u0000src/Composer/Installer/ProjectInstaller.php�\u0005\u0000\u0000���Q�\u0005\u0000\u0000�Q\u001e\u0005�\u0001\u0000\u0000\u0000\u0000\u0000\u0000+\u0000\u0000\u0000src/Composer/Installer/LibraryInstaller.php0\u001a\u0000\u0000���Q0\u001a\u0000\u0000(<�?�\u0001\u0000\u0000\u0000\u0000\u0000\u0000.\u0000\u0000\u0000src/Composer/Installer/InstallationManager.phpK\u0014\u0000\u0000���QK\u0014\u0000\u00008�~b�\u0001\u0000\u0000\u0000\u0000\u0000\u0000-\u0000\u0000\u0000src/Composer/Installer/InstallerInterface.php�\u0002\u0000\u0000���Q�\u0002\u0000\u0000HS���\u0001\u0000\u0000\u0000\u0000\u0000\u0000-\u0000\u0000\u0000src/Composer/Installer/InstallerInstaller.php�\t\u0000\u0000���Q�\t\u0000\u0000�Z�X�\u0001\u0000\u0000\u0000\u0000\u0000\u0000$\u0000\u0000\u0000src/Composer/Console/Application.php�\u0017\u0000\u0000���Q�\u0017\u0000\u00007�ȑ�\u0001\u0000\u0000\u0000\u0000\u0000\u0000,\u0000\u0000\u0000src/Composer/Console/HtmlOutputFormatter.php�\u0005\u0000\u0000���Q�\u0005\u0000\u0000�F���\u0001\u0000\u0000\u0000\u0000\u0000\u0000+\u0000\u0000\u0000src/Composer/Autoload/AutoloadGenerator.php<7\u0000\u0000���Q<7\u0000\u0000Iֆ\u001a�\u0001\u0000\u0000\u0000\u0000\u0000\u0000+\u0000\u0000\u0000src/Composer/Autoload/ClassMapGenerator.php�\n\u0000\u0000���Q�\n\u0000\u0000q�}J�\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001a\u0000\u0000\u0000src/Composer/Installer.php�\\\u0000\u0000���Q�\\\u0000\u00005�\u0002\u0000�\u0001\u0000\u0000\u0000\u0000\u0000\u0000%\u0000\u0000\u0000src/Composer/Autoload/ClassLoader.php\u000f\u001b\u0000\u0000���Q\u000f\u001b\u0000\u0000q\u0007���\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000res/spdx-identifier.jsoni\u000b\u0000\u0000���Qi\u000b\u0000\u0000��R\u001a�\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000res/composer-schema.json @\u0000\u0000���Q @\u0000\u0000kc�\u0002�\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001f\u0000\u0000\u0000src/Composer/IO/hiddeninput.exe\u0000$\u0000\u0000���Q\u0000$\u0000\u0000���v�\u0001\u0000\u0000\u0000\u0000\u0000\u0000?\u0000\u0000\u0000vendor/symfony/process/Symfony/Component/Process/PhpProcess.php\u000f\u0003\u0000\u0000���Q\u000f\u0003\u0000\u00008ZԷ�\u0001\u0000\u0000\u0000\u0000\u0000\u0000E\u0000\u0000\u0000vendor/symfony/process/Symfony/Component/Process/ExecutableFinder.php�\u0004\u0000\u0000���Q�\u0004\u0000\u0000\tJ\u0001\u0000\u0000\u0000\u0000\u0000\u0000<\u0000\u0000\u0000vendor/symfony/process/Symfony/Component/Process/Process.php}D\u0000\u0000���Q}D\u0000\u0000Qn8��\u0001\u0000\u0000\u0000\u0000\u0000\u0000C\u0000\u0000\u0000vendor/symfony/process/Symfony/Component/Process/ProcessBuilder.php�\b\u0000\u0000���Q�\b\u0000\u0000�����\u0001\u0000\u0000\u0000\u0000\u0000\u0000A\u0000\u0000\u0000vendor/symfony/process/Symfony/Component/Process/ProcessUtils.phpG\u0002\u0000\u0000���QG\u0002\u0000\u0000S8}��\u0001\u0000\u0000\u0000\u0000\u0000\u0000Q\u0000\u0000\u0000vendor/symfony/process/Symfony/Component/Process/Exception/ExceptionInterface.phpf\u0000\u0000\u0000���Qf\u0000\u0000\u0000]�>T�\u0001\u0000\u0000\u0000\u0000\u0000\u0000O\u0000\u0000\u0000vendor/symfony/process/Symfony/Component/Process/Exception/RuntimeException.php�\u0000\u0000\u0000���Q�\u0000\u0000\u0000�\u001b�:�\u0001\u0000\u0000\u0000\u0000\u0000\u0000M\u0000\u0000\u0000vendor/symfony/process/Symfony/Component/Process/Exception/LogicException.php�\u0000\u0000\u0000���Q�\u0000\u0000\u0000 ����\u0001\u0000\u0000\u0000\u0000\u0000\u0000U\u0000\u0000\u0000vendor/symfony/process/Symfony/Component/Process/Exception/ProcessFailedException.php�\u0002\u0000\u0000���Q�\u0002\u0000\u0000|�窶\u0001\u0000\u0000\u0000\u0000\u0000\u0000W\u0000\u0000\u0000vendor/symfony/process/Symfony/Component/Process/Exception/InvalidArgumentException.php�\u0000\u0000\u0000���Q�\u0000\u0000\u0000��+_�\u0001\u0000\u0000\u0000\u0000\u0000\u0000H\u0000\u0000\u0000vendor/symfony/process/Symfony/Component/Process/PhpExecutableFinder.php�\u0002\u0000\u0000���Q�\u0002\u0000\u0000��DE�\u0001\u0000\u0000\u0000\u0000\u0000\u0000H\u0000\u0000\u0000vendor/symfony/console/Symfony/Component/Console/Command/HelpCommand.php\n\u0007\u0000\u0000���Q\n\u0007\u0000\u0000�71X�\u0001\u0000\u0000\u0000\u0000\u0000\u0000D\u0000\u0000\u0000vendor/symfony/console/Symfony/Component/Console/Command/Command.php_\u0018\u0000\u0000���Q_\u0018\u0000\u0000��!��\u0001\u0000\u0000\u0000\u0000\u0000\u0000H\u0000\u0000\u0000vendor/symfony/console/Symfony/Component/Console/Command/ListCommand.phpW\u0007\u0000\u0000���QW\u0007\u0000\u0000��\u0001\u0000\u0000\u0000\u0000\u0000\u0000M\u0000\u0000\u0000vendor/symfony/console/Symfony/Component/Console/Tester/ApplicationTester.phpg\u0005\u0000\u0000���Qg\u0005\u0000\u00007-Gƶ\u0001\u0000\u0000\u0000\u0000\u0000\u0000I\u0000\u0000\u0000vendor/symfony/console/Symfony/Component/Console/Tester/CommandTester.php�\u0004\u0000\u0000���Q�\u0004\u0000\u0000S��m�\u0001\u0000\u0000\u0000\u0000\u0000\u0000X\u0000\u0000\u0000vendor/symfony/console/Symfony/Component/Console/Formatter/OutputFormatterStyleStack.php\b\u0005\u0000\u0000���Q\b\u0005\u0000\u0000y\bI'�\u0001\u0000\u0000\u0000\u0000\u0000\u0000S\u0000\u0000\u0000vendor/symfony/console/Symfony/Component/Console/Formatter/OutputFormatterStyle.phpU\f\u0000\u0000���QU\f\u0000\u0000z����\u0001\u0000\u0000\u0000\u0000\u0000\u0000\\\u0000\u0000\u0000vendor/symfony/console/Symfony/Component/Console/Formatter/OutputFormatterStyleInterface.php�\u0001\u0000\u0000���Q�\u0001\u0000\u0000���=�\u0001\u0000\u0000\u0000\u0000\u0000\u0000N\u0000\u0000\u0000vendor/symfony/console/Symfony/Component/Console/Formatter/OutputFormatter.php�\u000b\u0000\u0000���Q�\u000b\u0000\u0000>W���\u0001\u0000\u0000\u0000\u0000\u0000\u0000W\u0000\u0000\u0000vendor/symfony/console/Symfony/Component/Console/Formatter/OutputFormatterInterface.php�\u0001\u0000\u0000���Q�\u0001\u0000\u00003l~��\u0001\u0000\u0000\u0000\u0000\u0000\u0000@\u0000\u0000\u0000vendor/symfony/console/Symfony/Component/Console/Application.php�K\u0000\u0000���Q�K\u0000\u0000i�zx�\u0001\u0000\u0000\u0000\u0000\u0000\u0000H\u0000\u0000\u0000vendor/symfony/console/Symfony/Component/Console/Input/InputArgument.php�\u0005\u0000\u0000���Q�\u0005\u0000\u0000K]�i�\u0001\u0000\u0000\u0000\u0000\u0000\u0000@\u0000\u0000\u0000vendor/symfony/console/Symfony/Component/Console/Input/Input.php4\n\u0000\u0000���Q4\n\u0000\u0000��ݮ�\u0001\u0000\u0000\u0000\u0000\u0000\u0000F\u0000\u0000\u0000vendor/symfony/console/Symfony/Component/Console/Input/StringInput.php�\u0005\u0000\u0000���Q�\u0005\u0000\u0000�]th�\u0001\u0000\u0000\u0000\u0000\u0000\u0000F\u0000\u0000\u0000vendor/symfony/console/Symfony/Component/Console/Input/InputOption.php�\u000b\u0000\u0000���Q�\u000b\u0000\u0000���1�\u0001\u0000\u0000\u0000\u0000\u0000\u0000D\u0000\u0000\u0000vendor/symfony/console/Symfony/Component/Console/Input/ArgvInput.php�\u0012\u0000\u0000���Q�\u0012\u0000\u0000\u0007\u0007\u0016~�\u0001\u0000\u0000\u0000\u0000\u0000\u0000I\u0000\u0000\u0000vendor/symfony/console/Symfony/Component/Console/Input/InputInterface.php \u0003\u0000\u0000���Q \u0003\u0000\u00009��Ƕ\u0001\u0000\u0000\u0000\u0000\u0000\u0000E\u0000\u0000\u0000vendor/symfony/console/Symfony/Component/Console/Input/ArrayInput.php�\t\u0000\u0000���Q�\t\u0000\u0000�\"\u00189�\u0001\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000vendor/symfony/console/Symfony/Component/Console/Input/InputDefinition.php�\u0015\u0000\u0000���Q�\u0015\u0000\u0000I \u0001��\u0001\u0000\u0000\u0000\u0000\u0000\u0000:\u0000\u0000\u0000vendor/symfony/console/Symfony/Component/Console/Shell.phpt\u000f\u0000\u0000���Qt\u000f\u0000\u0000\u0002��-�\u0001\u0000\u0000\u0000\u0000\u0000\u0000B\u0000\u0000\u0000vendor/symfony/console/Symfony/Component/Console/Output/Output.phpx\u0007\u0000\u0000���Qx\u0007\u0000\u0000�\u0002\u0019��\u0001\u0000\u0000\u0000\u0000\u0000\u0000F\u0000\u0000\u0000vendor/symfony/console/Symfony/Component/Console/Output/NullOutput.php�\u0000\u0000\u0000���Q�\u0000\u0000\u0000�Ǣ��\u0001\u0000\u0000\u0000\u0000\u0000\u0000R\u0000\u0000\u0000vendor/symfony/console/Symfony/Component/Console/Output/ConsoleOutputInterface.php\u0015\u0001\u0000\u0000���Q\u0015\u0001\u0000\u0000\u000e��\u0006�\u0001\u0000\u0000\u0000\u0000\u0000\u0000H\u0000\u0000\u0000vendor/symfony/console/Symfony/Component/Console/Output/StreamOutput.php�\u0004\u0000\u0000���Q�\u0004\u0000\u0000.f\u0007\u001d�\u0001\u0000\u0000\u0000\u0000\u0000\u0000K\u0000\u0000\u0000vendor/symfony/console/Symfony/Component/Console/Output/OutputInterface.php#\u0003\u0000\u0000���Q#\u0003\u0000\u0000�L\u0000Y�\u0001\u0000\u0000\u0000\u0000\u0000\u0000I\u0000\u0000\u0000vendor/symfony/console/Symfony/Component/Console/Output/ConsoleOutput.php;\u0005\u0000\u0000���Q;\u0005\u0000\u0000PF\u0012,�\u0001\u0000\u0000\u0000\u0000\u0000\u0000S\u0000\u0000\u0000vendor/symfony/console/Symfony/Component/Console/Descriptor/DescriptorInterface.php�\u0000\u0000\u0000���Q�\u0000\u0000\u0000�\u0006�e�\u0001\u0000\u0000\u0000\u0000\u0000\u0000N\u0000\u0000\u0000vendor/symfony/console/Symfony/Component/Console/Descriptor/TextDescriptor.phpi\u0016\u0000\u0000���Qi\u0016\u0000\u0000���ȶ\u0001\u0000\u0000\u0000\u0000\u0000\u0000M\u0000\u0000\u0000vendor/symfony/console/Symfony/Component/Console/Descriptor/XmlDescriptor.php4\u001a\u0000\u0000���Q4\u001a\u0000\u0000��[\u0019�\u0001\u0000\u0000\u0000\u0000\u0000\u0000R\u0000\u0000\u0000vendor/symfony/console/Symfony/Component/Console/Descriptor/MarkdownDescriptor.php�\r\u0000\u0000���Q�\r\u0000\u0000�)\u0017��\u0001\u0000\u0000\u0000\u0000\u0000\u0000V\u0000\u0000\u0000vendor/symfony/console/Symfony/Component/Console/Descriptor/ApplicationDescription.php�\u0007\u0000\u0000���Q�\u0007\u0000\u0000)I���\u0001\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000vendor/symfony/console/Symfony/Component/Console/Descriptor/Descriptor.php\u001d\u0006\u0000\u0000���Q\u001d\u0006\u0000\u0000\nn���\u0001\u0000\u0000\u0000\u0000\u0000\u0000N\u0000\u0000\u0000vendor/symfony/console/Symfony/Component/Console/Descriptor/JsonDescriptor.php*\f\u0000\u0000���Q*\f\u0000\u0000�\u000fE\u0016�\u0001\u0000\u0000\u0000\u0000\u0000\u0000K\u0000\u0000\u0000vendor/symfony/console/Symfony/Component/Console/Helper/HelperInterface.php�\u0000\u0000\u0000���Q�\u0000\u0000\u0000=e\u001b\f�\u0001\u0000\u0000\u0000\u0000\u0000\u0000G\u0000\u0000\u0000vendor/symfony/console/Symfony/Component/Console/Helper/TableHelper.php�\u0014\u0000\u0000���Q�\u0014\u0000\u0000�]�7�\u0001\u0000\u0000\u0000\u0000\u0000\u0000L\u0000\u0000\u0000vendor/symfony/console/Symfony/Component/Console/Helper/DescriptorHelper.php�\u0006\u0000\u0000���Q�\u0006\u0000\u0000��\u0017��\u0001\u0000\u0000\u0000\u0000\u0000\u0000K\u0000\u0000\u0000vendor/symfony/console/Symfony/Component/Console/Helper/FormatterHelper.php\u001e\u0004\u0000\u0000���Q\u001e\u0004\u0000\u0000�I���\u0001\u0000\u0000\u0000\u0000\u0000\u0000E\u0000\u0000\u0000vendor/symfony/console/Symfony/Component/Console/Helper/HelperSet.php�\u0003\u0000\u0000���Q�\u0003\u0000\u0000�^9t�\u0001\u0000\u0000\u0000\u0000\u0000\u0000H\u0000\u0000\u0000vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.phpg\u001b\u0000\u0000���Qg\u001b\u0000\u0000�pIȶ\u0001\u0000\u0000\u0000\u0000\u0000\u0000B\u0000\u0000\u0000vendor/symfony/console/Symfony/Component/Console/Helper/Helper.php\"\u0002\u0000\u0000���Q\"\u0002\u0000\u0000\u0017��U�\u0001\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000vendor/symfony/console/Symfony/Component/Console/Helper/ProgressHelper.php\u0004\u0019\u0000\u0000���Q\u0004\u0019\u0000\u0000�}X��\u0001\u0000\u0000\u0000\u0000\u0000\u0000G\u0000\u0000\u0000vendor/symfony/console/Symfony/Component/Console/Event/ConsoleEvent.php�\u0002\u0000\u0000���Q�\u0002\u0000\u0000�x�\\�\u0001\u0000\u0000\u0000\u0000\u0000\u0000P\u0000\u0000\u0000vendor/symfony/console/Symfony/Component/Console/Event/ConsoleTerminateEvent.phpt\u0002\u0000\u0000���Qt\u0002\u0000\u0000��~Ҷ\u0001\u0000\u0000\u0000\u0000\u0000\u0000S\u0000\u0000\u0000vendor/symfony/console/Symfony/Component/Console/Event/ConsoleForExceptionEvent.php\u000f\u0003\u0000\u0000���Q\u000f\u0003\u0000\u0000��j��\u0001\u0000\u0000\u0000\u0000\u0000\u0000N\u0000\u0000\u0000vendor/symfony/console/Symfony/Component/Console/Event/ConsoleCommandEvent.php\u000e\u0001\u0000\u0000���Q\u000e\u0001\u0000\u0000�I=��\u0001\u0000\u0000\u0000\u0000\u0000\u0000B\u0000\u0000\u0000vendor/symfony/console/Symfony/Component/Console/ConsoleEvents.php�\u0000\u0000\u0000���Q�\u0000\u0000\u0000R��e�\u0001\u0000\u0000\u0000\u0000\u0000\u00009\u0000\u0000\u0000vendor/symfony/finder/Symfony/Component/Finder/Finder.php�\u001f\u0000\u0000���Q�\u001f\u0000\u0000A�?��\u0001\u0000\u0000\u0000\u0000\u0000\u0000@\u0000\u0000\u0000vendor/symfony/finder/Symfony/Component/Finder/Shell/Command.php�\b\u0000\u0000���Q�\b\u0000\u0000c�v��\u0001\u0000\u0000\u0000\u0000\u0000\u0000>\u0000\u0000\u0000vendor/symfony/finder/Symfony/Component/Finder/Shell/Shell.php�\u0003\u0000\u0000���Q�\u0003\u0000\u0000D�A\n�\u0001\u0000\u0000\u0000\u0000\u0000\u0000C\u0000\u0000\u0000vendor/symfony/finder/Symfony/Component/Finder/Expression/Regex.phpZ\u000e\u0000\u0000���QZ\u000e\u0000\u0000@��~�\u0001\u0000\u0000\u0000\u0000\u0000\u0000B\u0000\u0000\u0000vendor/symfony/finder/Symfony/Component/Finder/Expression/Glob.php�\u0007\u0000\u0000���Q�\u0007\u0000\u0000  V��\u0001\u0000\u0000\u0000\u0000\u0000\u0000H\u0000\u0000\u0000vendor/symfony/finder/Symfony/Component/Finder/Expression/Expression.php{\u0005\u0000\u0000���Q{\u0005\u0000\u0000'ȼ\u0010�\u0001\u0000\u0000\u0000\u0000\u0000\u0000L\u0000\u0000\u0000vendor/symfony/finder/Symfony/Component/Finder/Expression/ValueInterface.php;\u0001\u0000\u0000���Q;\u0001\u0000\u0000\u000b��Ӷ\u0001\u0000\u0000\u0000\u0000\u0000\u0000K\u0000\u0000\u0000vendor/symfony/finder/Symfony/Component/Finder/Adapter/AdapterInterface.phps\u0003\u0000\u0000���Qs\u0003\u0000\u0000r�j]�\u0001\u0000\u0000\u0000\u0000\u0000\u0000I\u0000\u0000\u0000vendor/symfony/finder/Symfony/Component/Finder/Adapter/BsdFindAdapter.phpr\u0006\u0000\u0000���Qr\u0006\u0000\u0000�U�m�\u0001\u0000\u0000\u0000\u0000\u0000\u0000I\u0000\u0000\u0000vendor/symfony/finder/Symfony/Component/Finder/Adapter/GnuFindAdapter.phpU\u0006\u0000\u0000���QU\u0006\u0000\u0000$�矶\u0001\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000vendor/symfony/finder/Symfony/Component/Finder/Adapter/AbstractAdapter.php\u0001\n\u0000\u0000���Q\u0001\n\u0000\u0000�J\u0018��\u0001\u0000\u0000\u0000\u0000\u0000\u0000N\u0000\u0000\u0000vendor/symfony/finder/Symfony/Component/Finder/Adapter/AbstractFindAdapter.phpD\u0018\u0000\u0000���QD\u0018\u0000\u0000��=F�\u0001\u0000\u0000\u0000\u0000\u0000\u0000E\u0000\u0000\u0000vendor/symfony/finder/Symfony/Component/Finder/Adapter/PhpAdapter.php\u000e\u0007\u0000\u0000���Q\u000e\u0007\u0000\u0000���8�\u0001\u0000\u0000\u0000\u0000\u0000\u00007\u0000\u0000\u0000vendor/symfony/finder/Symfony/Component/Finder/Glob.php\r\u0005\u0000\u0000���Q\r\u0005\u0000\u0000z��\n�\u0001\u0000\u0000\u0000\u0000\u0000\u0000T\u0000\u0000\u0000vendor/symfony/finder/Symfony/Component/Finder/Iterator/DepthRangeFilterIterator.php�\u0001\u0000\u0000���Q�\u0001\u0000\u0000�0�\u0004�\u0001\u0000\u0000\u0000\u0000\u0000\u0000L\u0000\u0000\u0000vendor/symfony/finder/Symfony/Component/Finder/Iterator/SortableIterator.php�\u0005\u0000\u0000���Q�\u0005\u0000\u0000�\u001a�Ƕ\u0001\u0000\u0000\u0000\u0000\u0000\u0000U\u0000\u0000\u0000vendor/symfony/finder/Symfony/Component/Finder/Iterator/FilecontentFilterIterator.php#\u0003\u0000\u0000���Q#\u0003\u0000\u0000�_VǶ\u0001\u0000\u0000\u0000\u0000\u0000\u0000M\u0000\u0000\u0000vendor/symfony/finder/Symfony/Component/Finder/Iterator/FilePathsIterator.php�\u0005\u0000\u0000���Q�\u0005\u0000\u0000���Q�\u0001\u0000\u0000\u0000\u0000\u0000\u0000S\u0000\u0000\u0000vendor/symfony/finder/Symfony/Component/Finder/Iterator/SizeRangeFilterIterator.phpg\u0002\u0000\u0000���Qg\u0002\u0000\u0000!ԗ��\u0001\u0000\u0000\u0000\u0000\u0000\u0000Z\u0000\u0000\u0000vendor/symfony/finder/Symfony/Component/Finder/Iterator/ExcludeDirectoryFilterIterator.php�\u0002\u0000\u0000���Q�\u0002\u0000\u0000�z`.�\u0001\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000vendor/symfony/finder/Symfony/Component/Finder/Iterator/FilterIterator.php�\u0001\u0000\u0000���Q�\u0001\u0000\u0000�\u0005\u000b��\u0001\u0000\u0000\u0000\u0000\u0000\u0000V\u0000\u0000\u0000vendor/symfony/finder/Symfony/Component/Finder/Iterator/MultiplePcreFilterIterator.php\u0004\u0003\u0000\u0000���Q\u0004\u0003\u0000\u0000S�C��\u0001\u0000\u0000\u0000\u0000\u0000\u0000P\u0000\u0000\u0000vendor/symfony/finder/Symfony/Component/Finder/Iterator/CustomFilterIterator.php]\u0002\u0000\u0000���Q]\u0002\u0000\u0000t౵�\u0001\u0000\u0000\u0000\u0000\u0000\u0000R\u0000\u0000\u0000vendor/symfony/finder/Symfony/Component/Finder/Iterator/FilenameFilterIterator.php�\u0002\u0000\u0000���Q�\u0002\u0000\u0000�B�Z�\u0001\u0000\u0000\u0000\u0000\u0000\u0000S\u0000\u0000\u0000vendor/symfony/finder/Symfony/Component/Finder/Iterator/DateRangeFilterIterator.phpg\u0002\u0000\u0000���Qg\u0002\u0000\u0000��e\u0000�\u0001\u0000\u0000\u0000\u0000\u0000\u0000R\u0000\u0000\u0000vendor/symfony/finder/Symfony/Component/Finder/Iterator/FileTypeFilterIterator.php\\\u0002\u0000\u0000���Q\\\u0002\u0000\u0000p�'��\u0001\u0000\u0000\u0000\u0000\u0000\u0000V\u0000\u0000\u0000vendor/symfony/finder/Symfony/Component/Finder/Iterator/RecursiveDirectoryIterator.php7\u0002\u0000\u0000���Q7\u0002\u0000\u0000\u0001P�7�\u0001\u0000\u0000\u0000\u0000\u0000\u0000N\u0000\u0000\u0000vendor/symfony/finder/Symfony/Component/Finder/Iterator/PathFilterIterator.php�\u0002\u0000\u0000���Q�\u0002\u0000\u0000_�A\u0015�\u0001\u0000\u0000\u0000\u0000\u0000\u0000L\u0000\u0000\u0000vendor/symfony/finder/Symfony/Component/Finder/Comparator/DateComparator.php&\u0003\u0000\u0000���Q&\u0003\u0000\u0000�hd��\u0001\u0000\u0000\u0000\u0000\u0000\u0000N\u0000\u0000\u0000vendor/symfony/finder/Symfony/Component/Finder/Comparator/NumberComparator.phpy\u0003\u0000\u0000���Qy\u0003\u0000\u0000\"`\u0014۶\u0001\u0000\u0000\u0000\u0000\u0000\u0000H\u0000\u0000\u0000vendor/symfony/finder/Symfony/Component/Finder/Comparator/Comparator.php�\u0003\u0000\u0000���Q�\u0003\u0000\u0000\u0016w�T�\u0001\u0000\u0000\u0000\u0000\u0000\u0000O\u0000\u0000\u0000vendor/symfony/finder/Symfony/Component/Finder/Exception/ExceptionInterface.php{\u0000\u0000\u0000���Q{\u0000\u0000\u0000��\u0001\u0000\u0000\u0000\u0000\u0000\u0000Z\u0000\u0000\u0000vendor/symfony/finder/Symfony/Component/Finder/Exception/OperationNotPermitedException.php�\u0000\u0000\u0000���Q�\u0000\u0000\u0000U\u001288�\u0001\u0000\u0000\u0000\u0000\u0000\u0000T\u0000\u0000\u0000vendor/symfony/finder/Symfony/Component/Finder/Exception/AdapterFailureException.php\u0016\u0002\u0000\u0000���Q\u0016\u0002\u0000\u0000m�_,�\u0001\u0000\u0000\u0000\u0000\u0000\u0000Y\u0000\u0000\u0000vendor/symfony/finder/Symfony/Component/Finder/Exception/ShellCommandFailureException.php$\u0002\u0000\u0000���Q$\u0002\u0000\u0000C�sӶ\u0001\u0000\u0000\u0000\u0000\u0000\u0000>\u0000\u0000\u0000vendor/symfony/finder/Symfony/Component/Finder/SplFileInfo.php�\u0002\u0000\u0000���Q�\u0002\u0000\u0000��hŶ\u0001\u0000\u0000\u0000\u0000\u0000\u00004\u0000\u0000\u0000vendor/seld/jsonlint/src/Seld/JsonLint/Undefined.php>\u0000\u0000\u0000���Q>\u0000\u0000\u0000�q���\u0001\u0000\u0000\u0000\u0000\u0000\u00005\u0000\u0000\u0000vendor/seld/jsonlint/src/Seld/JsonLint/JsonParser.php�,\u0000\u0000���Q�,\u0000\u0000V�\\\r�\u0001\u0000\u0000\u0000\u0000\u0000\u00000\u0000\u0000\u0000vendor/seld/jsonlint/src/Seld/JsonLint/Lexer.php�\u000f\u0000\u0000���Q�\u000f\u0000\u0000�\u000b�Y�\u0001\u0000\u0000\u0000\u0000\u0000\u0000;\u0000\u0000\u0000vendor/seld/jsonlint/src/Seld/JsonLint/ParsingException.php\u001e\u0001\u0000\u0000���Q\u001e\u0001\u0000\u0000��\u0010��\u0001\u0000\u0000\u0000\u0000\u0000\u0000I\u0000\u0000\u0000vendor/justinrainbow/json-schema/src/JsonSchema/Constraints/Undefined.phpx\u0006\u0000\u0000���Qx\u0006\u0000\u0000h��q�\u0001\u0000\u0000\u0000\u0000\u0000\u0000D\u0000\u0000\u0000vendor/justinrainbow/json-schema/src/JsonSchema/Constraints/Type.php�\u0005\u0000\u0000���Q�\u0005\u0000\u0000��+F�\u0001\u0000\u0000\u0000\u0000\u0000\u0000F\u0000\u0000\u0000vendor/justinrainbow/json-schema/src/JsonSchema/Constraints/Schema.php�\u0001\u0000\u0000���Q�\u0001\u0000\u0000�:fM�\u0001\u0000\u0000\u0000\u0000\u0000\u0000F\u0000\u0000\u0000vendor/justinrainbow/json-schema/src/JsonSchema/Constraints/Number.phpW\u0002\u0000\u0000���QW\u0002\u0000\u0000.1���\u0001\u0000\u0000\u0000\u0000\u0000\u0000F\u0000\u0000\u0000vendor/justinrainbow/json-schema/src/JsonSchema/Constraints/Object.php�\u0007\u0000\u0000���Q�\u0007\u0000\u0000c�Z��\u0001\u0000\u0000\u0000\u0000\u0000\u0000S\u0000\u0000\u0000vendor/justinrainbow/json-schema/src/JsonSchema/Constraints/ConstraintInterface.php$\u0001\u0000\u0000���Q$\u0001\u0000\u0000\u0003g���\u0001\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000vendor/justinrainbow/json-schema/src/JsonSchema/Constraints/Constraint.php\u0015\n\u0000\u0000���Q\u0015\n\u0000\u0000>\u001d�\u0018�\u0001\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000vendor/justinrainbow/json-schema/src/JsonSchema/Constraints/Collection.phpV\b\u0000\u0000���QV\b\u0000\u0000�<���\u0001\u0000\u0000\u0000\u0000\u0000\u0000D\u0000\u0000\u0000vendor/justinrainbow/json-schema/src/JsonSchema/Constraints/Enum.php�\u0001\u0000\u0000���Q�\u0001\u0000\u0000$(m��\u0001\u0000\u0000\u0000\u0000\u0000\u0000F\u0000\u0000\u0000vendor/justinrainbow/json-schema/src/JsonSchema/Constraints/String.php�\u0002\u0000\u0000���Q�\u0002\u0000\u0000���k�\u0001\u0000\u0000\u0000\u0000\u0000\u0000=\u0000\u0000\u0000vendor/justinrainbow/json-schema/src/JsonSchema/Validator.php[\u0001\u0000\u0000���Q[\u0001\u0000\u00008\u0011���\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0013\u0000\u0000\u0000vendor/autoload.php�\u0000\u0000\u0000���Q�\u0000\u0000\u0000��OҶ\u0001\u0000\u0000\u0000\u0000\u0000\u0000'\u0000\u0000\u0000vendor/composer/autoload_namespaces.php�\u0001\u0000\u0000���Q�\u0001\u0000\u0000;����\u0001\u0000\u0000\u0000\u0000\u0000\u0000%\u0000\u0000\u0000vendor/composer/autoload_classmap.phpd\u0000\u0000\u0000���Qd\u0000\u0000\u0000Z��H�\u0001\u0000\u0000\u0000\u0000\u0000\u0000!\u0000\u0000\u0000vendor/composer/autoload_real.php�\u0003\u0000\u0000���Q�\u0003\u0000\u0000{X\u0017��\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001f\u0000\u0000\u0000vendor/composer/ClassLoader.php�\u000b\u0000\u0000���Q�\u000b\u0000\u0000sjX��\u0001\u0000\u0000\u0000\u0000\u0000\u0000\f\u0000\u0000\u0000bin/composern\u0004\u0000\u0000���Qn\u0004\u0000\u0000\u001f��W�\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0007\u0000\u0000\u0000LICENSE3\u0004\u0000\u0000���Q3\u0004\u0000\u0000\u000b�2\u000b�\u0001\u0000\u0000\u0000\u0000\u0000\u0000<?php\n\n\n\n\n\n\n\n\n\n\n\nfunction includeIfExists($file)\n{\nreturn file_exists($file) ? include $file : false;\n}\n\nif ((!$loader = includeIfExists(__DIR__.'/../vendor/autoload.php')) && (!$loader = includeIfExists(__DIR__.'/../../../autoload.php'))) {\necho 'You must set up the project dependencies, run the following commands:'.PHP_EOL.\n'curl -sS https://getcomposer.org/installer | php'.PHP_EOL.\n'php composer.phar install'.PHP_EOL;\nexit(1);\n}\n\nreturn $loader;\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\IO;\n\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\Console\\Helper\\HelperSet;\n\n\n\n\n\n\n\nclass ConsoleIO implements IOInterface\n{\nprotected $input;\nprotected $output;\nprotected $helperSet;\nprotected $authentications = array();\nprotected $lastMessage;\nprivate $startTime;\n\n\n\n\n\n\n\n\npublic function __construct(InputInterface $input, OutputInterface $output, HelperSet $helperSet)\n{\n$this->input = $input;\n$this->output = $output;\n$this->helperSet = $helperSet;\n}\n\npublic function enableDebugging($startTime)\n{\n$this->startTime = $startTime;\n}\n\n\n\n\npublic function isInteractive()\n{\nreturn $this->input->isInteractive();\n}\n\n\n\n\npublic function isDecorated()\n{\nreturn $this->output->isDecorated();\n}\n\n\n\n\npublic function isVerbose()\n{\nreturn $this->output->getVerbosity() >= OutputInterface::VERBOSITY_VERBOSE;\n}\n\n\n\n\npublic function isVeryVerbose()\n{\nreturn $this->output->getVerbosity() >= 3; \n }\n\n\n\n\npublic function isDebug()\n{\nreturn $this->output->getVerbosity() >= 4; \n }\n\n\n\n\npublic function write($messages, $newline = true)\n{\nif (null !== $this->startTime) {\n$messages = (array) $messages;\n$messages[0] = sprintf(\n'[%.1fMB/%.2fs] %s',\nmemory_get_usage() / 1024 / 1024,\nmicrotime(true) - $this->startTime,\n$messages[0]\n);\n}\n$this->output->write($messages, $newline);\n$this->lastMessage = join($newline ? \"\\n\" : '', (array) $messages);\n}\n\n\n\n\npublic function overwrite($messages, $newline = true, $size = null)\n{\n\n $messages = join($newline ? \"\\n\" : '', (array) $messages);\n\n\n if (!isset($size)) {\n\n $size = strlen(strip_tags($this->lastMessage));\n}\n\n $this->write(str_repeat(\"\\x08\", $size), false);\n\n\n $this->write($messages, false);\n\n$fill = $size - strlen(strip_tags($messages));\nif ($fill > 0) {\n\n $this->write(str_repeat(' ', $fill), false);\n\n $this->write(str_repeat(\"\\x08\", $fill), false);\n}\n\nif ($newline) {\n$this->write('');\n}\n$this->lastMessage = $messages;\n}\n\n\n\n\npublic function ask($question, $default = null)\n{\nreturn $this->helperSet->get('dialog')->ask($this->output, $question, $default);\n}\n\n\n\n\npublic function askConfirmation($question, $default = true)\n{\nreturn $this->helperSet->get('dialog')->askConfirmation($this->output, $question, $default);\n}\n\n\n\n\npublic function askAndValidate($question, $validator, $attempts = false, $default = null)\n{\nreturn $this->helperSet->get('dialog')->askAndValidate($this->output, $question, $validator, $attempts, $default);\n}\n\n\n\n\npublic function askAndHideAnswer($question)\n{\n\n if (defined('PHP_WINDOWS_VERSION_BUILD')) {\n$exe = __DIR__.'\\\\hiddeninput.exe';\n\n\n if ('phar:' === substr(__FILE__, 0, 5)) {\n$tmpExe = sys_get_temp_dir().'/hiddeninput.exe';\n\n\n \n $source = fopen(__DIR__.'\\\\hiddeninput.exe', 'r');\n$target = fopen($tmpExe, 'w+');\nstream_copy_to_stream($source, $target);\nfclose($source);\nfclose($target);\nunset($source, $target);\n\n$exe = $tmpExe;\n}\n\n$this->write($question, false);\n$value = rtrim(shell_exec($exe));\n$this->write('');\n\n\n if (isset($tmpExe)) {\nunlink($tmpExe);\n}\n\nreturn $value;\n}\n\nif (file_exists('/usr/bin/env')) {\n\n $test = \"/usr/bin/env %s -c 'echo OK' 2> /dev/null\";\nforeach (array('bash', 'zsh', 'ksh', 'csh') as $sh) {\nif ('OK' === rtrim(shell_exec(sprintf($test, $sh)))) {\n$shell = $sh;\nbreak;\n}\n}\nif (isset($shell)) {\n$this->write($question, false);\n$readCmd = ($shell === 'csh') ? 'set mypassword = $<' : 'read -r mypassword';\n$command = sprintf(\"/usr/bin/env %s -c 'stty -echo; %s; stty echo; echo \\$mypassword'\", $shell, $readCmd);\n$value = rtrim(shell_exec($command));\n$this->write('');\n\nreturn $value;\n}\n}\n\n\n return $this->ask($question);\n}\n\n\n\n\npublic function getAuthentications()\n{\nreturn $this->authentications;\n}\n\n\n\n\npublic function hasAuthentication($repositoryName)\n{\n$auths = $this->getAuthentications();\n\nreturn isset($auths[$repositoryName]);\n}\n\n\n\n\npublic function getAuthentication($repositoryName)\n{\n$auths = $this->getAuthentications();\n\nreturn isset($auths[$repositoryName]) ? $auths[$repositoryName] : array('username' => null, 'password' => null);\n}\n\n\n\n\npublic function setAuthentication($repositoryName, $username, $password = null)\n{\n$this->authentications[$repositoryName] = array('username' => $username, 'password' => $password);\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\IO;\n\n\n\n\n\n\nclass NullIO implements IOInterface\n{\n\n\n\npublic function isInteractive()\n{\nreturn false;\n}\n\n\n\n\npublic function isVerbose()\n{\nreturn false;\n}\n\n\n\n\npublic function isVeryVerbose()\n{\nreturn false;\n}\n\n\n\n\npublic function isDebug()\n{\nreturn false;\n}\n\n\n\n\npublic function isDecorated()\n{\nreturn false;\n}\n\n\n\n\npublic function write($messages, $newline = true)\n{\n}\n\n\n\n\npublic function overwrite($messages, $newline = true, $size = 80)\n{\n}\n\n\n\n\npublic function ask($question, $default = null)\n{\nreturn $default;\n}\n\n\n\n\npublic function askConfirmation($question, $default = true)\n{\nreturn $default;\n}\n\n\n\n\npublic function askAndValidate($question, $validator, $attempts = false, $default = null)\n{\nreturn $default;\n}\n\n\n\n\npublic function askAndHideAnswer($question)\n{\nreturn null;\n}\n\n\n\n\npublic function getAuthentications()\n{\nreturn array();\n}\n\n\n\n\npublic function hasAuthentication($repositoryName)\n{\nreturn false;\n}\n\n\n\n\npublic function getAuthentication($repositoryName)\n{\nreturn array('username' => null, 'password' => null);\n}\n\n\n\n\npublic function setAuthentication($repositoryName, $username, $password = null)\n{\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\IO;\n\n\n\n\n\n\ninterface IOInterface\n{\n\n\n\n\n\npublic function isInteractive();\n\n\n\n\n\n\npublic function isVerbose();\n\n\n\n\n\n\npublic function isVeryVerbose();\n\n\n\n\n\n\npublic function isDebug();\n\n\n\n\n\n\npublic function isDecorated();\n\n\n\n\n\n\n\npublic function write($messages, $newline = true);\n\n\n\n\n\n\n\n\npublic function overwrite($messages, $newline = true, $size = 80);\n\n\n\n\n\n\n\n\n\n\n\npublic function ask($question, $default = null);\n\n\n\n\n\n\n\n\n\n\n\npublic function askConfirmation($question, $default = true);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npublic function askAndValidate($question, $validator, $attempts = false, $default = null);\n\n\n\n\n\n\n\n\npublic function askAndHideAnswer($question);\n\n\n\n\n\n\npublic function getAuthentications();\n\n\n\n\n\n\n\n\npublic function hasAuthentication($repositoryName);\n\n\n\n\n\n\n\n\npublic function getAuthentication($repositoryName);\n\n\n\n\n\n\n\n\npublic function setAuthentication($repositoryName, $username, $password = null);\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\IO;\n\nuse Symfony\\Component\\Console\\Output\\StreamOutput;\nuse Symfony\\Component\\Console\\Formatter\\OutputFormatterInterface;\nuse Symfony\\Component\\Console\\Input\\StringInput;\nuse Symfony\\Component\\Console\\Helper\\HelperSet;\n\n\n\n\nclass BufferIO extends ConsoleIO\n{\n\n\n\n\n\npublic function __construct($input = '', $verbosity = null, OutputFormatterInterface $formatter = null)\n{\n$input = new StringInput($input);\n$input->setInteractive(false);\n\n$output = new StreamOutput(fopen('php://memory', 'rw'), $verbosity === null ? StreamOutput::VERBOSITY_NORMAL : $verbosity, !empty($formatter), $formatter);\n\nparent::__construct($input, $output, new HelperSet(array()));\n}\n\npublic function getOutput()\n{\nfseek($this->output->getStream(), 0);\n\n$output = stream_get_contents($this->output->getStream());\n\n$output = preg_replace_callback(\"{(?<=^|\\n|\\x08)(.+?)(\\x08+)}\", function ($matches) {\n$pre = strip_tags($matches[1]);\n\nif (strlen($pre) === strlen($matches[2])) {\nreturn '';\n}\n\n\n return rtrim($matches[1]).\"\\n\";\n}, $output);\n\nreturn $output;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Command;\n\nuse Composer\\Script\\ScriptEvents;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n\n\n\nclass RunScriptCommand extends Command\n{\nprotected function configure()\n{\n$this\n->setName('run-script')\n->setDescription('Run the scripts defined in composer.json.')\n->setDefinition(array(\nnew InputArgument('script', InputArgument::REQUIRED, 'Script name to run.'),\nnew InputOption('dev', null, InputOption::VALUE_NONE, 'Sets the dev mode.'),\nnew InputOption('no-dev', null, InputOption::VALUE_NONE, 'Disables the dev mode.'),\n))\n->setHelp(<<<EOT\nThe <info>run-script</info> command runs scripts defined in composer.json:\n\n<info>php composer.phar run-script post-update-cmd</info>\nEOT\n)\n;\n}\n\nprotected function execute(InputInterface $input, OutputInterface $output)\n{\n$script = $input->getArgument('script');\nif (!in_array($script, array(\nScriptEvents::PRE_INSTALL_CMD,\nScriptEvents::POST_INSTALL_CMD,\nScriptEvents::PRE_UPDATE_CMD,\nScriptEvents::POST_UPDATE_CMD,\n))) {\nif (defined('Composer\\Script\\ScriptEvents::'.str_replace('-', '_', strtoupper($script)))) {\nthrow new \\InvalidArgumentException(sprintf('Script \"%s\" cannot be run with this command', $script));\n}\n\nthrow new \\InvalidArgumentException(sprintf('Script \"%s\" does not exist', $script));\n}\n\n$this->getComposer()->getEventDispatcher()->dispatchCommandEvent($script, $input->getOption('dev') || !$input->getOption('no-dev'));\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Command;\n\nuse Composer\\Composer;\nuse Composer\\Factory;\nuse Composer\\Downloader\\TransportException;\nuse Composer\\Util\\ConfigValidator;\nuse Composer\\Util\\RemoteFilesystem;\nuse Composer\\Util\\StreamContextFactory;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n\n\n\nclass DiagnoseCommand extends Command\n{\nprotected $rfs;\nprotected $failures = 0;\n\nprotected function configure()\n{\n$this\n->setName('diagnose')\n->setDescription('Diagnoses the system to identify common errors.')\n->setHelp(<<<EOT\nThe <info>diagnose</info> command checks common errors to help debugging problems.\n\nEOT\n)\n;\n}\n\nprotected function execute(InputInterface $input, OutputInterface $output)\n{\n$this->rfs = new RemoteFilesystem($this->getIO());\n\n$output->write('Checking platform settings: ');\n$this->outputResult($output, $this->checkPlatform());\n\n$output->write('Checking http connectivity: ');\n$this->outputResult($output, $this->checkHttp());\n\n$opts = stream_context_get_options(StreamContextFactory::getContext('http://example.org'));\nif (!empty($opts['http']['proxy'])) {\n$output->write('Checking HTTP proxy: ');\n$this->outputResult($output, $this->checkHttpProxy());\n$output->write('Checking HTTP proxy support for request_fulluri: ');\n$this->outputResult($output, $this->checkHttpProxyFullUriRequestParam());\n$output->write('Checking HTTPS proxy support for request_fulluri: ');\n$this->outputResult($output, $this->checkHttpsProxyFullUriRequestParam());\n}\n\n$composer = $this->getComposer(false);\nif ($composer) {\n$output->write('Checking composer.json: ');\n$this->outputResult($output, $this->checkComposerSchema());\n}\n\nif ($composer) {\n$config = $composer->getConfig();\n} else {\n$config = Factory::createConfig();\n}\n\nif ($oauth = $config->get('github-oauth')) {\nforeach ($oauth as $domain => $token) {\n$output->write('Checking '.$domain.' oauth access: ');\n$this->outputResult($output, $this->checkGithubOauth($domain, $token));\n}\n}\n\n$output->write('Checking disk free space: ');\n$this->outputResult($output, $this->checkDiskSpace($config));\n\n$output->write('Checking composer version: ');\n$this->outputResult($output, $this->checkVersion());\n\nreturn $this->failures;\n}\n\nprivate function checkComposerSchema()\n{\n$validator = new ConfigValidator($this->getIO());\nlist($errors, $publishErrors, $warnings) = $validator->validate(Factory::getComposerFile());\n\nif ($errors || $publishErrors || $warnings) {\n$messages = array(\n'error' => array_merge($errors, $publishErrors),\n'warning' => $warnings,\n);\n\n$output = '';\nforeach ($messages as $style => $msgs) {\nforeach ($msgs as $msg) {\n$output .= '<' . $style . '>' . $msg . '</' . $style . '>' . PHP_EOL;\n}\n}\n\nreturn rtrim($output);\n}\n\nreturn true;\n}\n\nprivate function checkHttp()\n{\n$protocol = extension_loaded('openssl') ? 'https' : 'http';\ntry {\n$json = $this->rfs->getContents('packagist.org', $protocol . '://packagist.org/packages.json', false);\n} catch (\\Exception $e) {\nreturn $e;\n}\n\nreturn true;\n}\n\nprivate function checkHttpProxy()\n{\n$protocol = extension_loaded('openssl') ? 'https' : 'http';\ntry {\n$json = json_decode($this->rfs->getContents('packagist.org', $protocol . '://packagist.org/packages.json', false), true);\n$hash = reset($json['provider-includes']);\n$hash = $hash['sha256'];\n$path = str_replace('%hash%', $hash, key($json['provider-includes']));\n$provider = $this->rfs->getContents('packagist.org', $protocol . '://packagist.org/'.$path, false);\n\nif (hash('sha256', $provider) !== $hash) {\nreturn 'It seems that your proxy is modifying http traffic on the fly';\n}\n} catch (\\Exception $e) {\nreturn $e;\n}\n\nreturn true;\n}\n\n\n\n\n\n\n\n\nprivate function checkHttpProxyFullUriRequestParam()\n{\n$url = 'http://packagist.org/packages.json';\ntry {\n$this->rfs->getContents('packagist.org', $url, false);\n} catch (TransportException $e) {\ntry {\n$this->rfs->getContents('packagist.org', $url, false, array('http' => array('request_fulluri' => false)));\n} catch (TransportException $e) {\nreturn 'Unable to assert the situation, maybe packagist.org is down ('.$e->getMessage().')';\n}\n\nreturn 'It seems there is a problem with your proxy server, try setting the \"HTTP_PROXY_REQUEST_FULLURI\" and \"HTTPS_PROXY_REQUEST_FULLURI\" environment variables to \"false\"';\n}\n\nreturn true;\n}\n\n\n\n\n\n\n\n\nprivate function checkHttpsProxyFullUriRequestParam()\n{\nif (!extension_loaded('openssl')) {\nreturn 'You need the openssl extension installed for this check';\n}\n\n$url = 'https://api.github.com/repos/Seldaek/jsonlint/zipball/1.0.0';\ntry {\n$rfcResult = $this->rfs->getContents('api.github.com', $url, false);\n} catch (TransportException $e) {\ntry {\n$this->rfs->getContents('api.github.com', $url, false, array('http' => array('request_fulluri' => false)));\n} catch (TransportException $e) {\nreturn 'Unable to assert the situation, maybe github is down ('.$e->getMessage().')';\n}\n\nreturn 'It seems there is a problem with your proxy server, try setting the \"HTTPS_PROXY_REQUEST_FULLURI\" environment variable to \"false\"';\n}\n\nreturn true;\n}\n\nprivate function checkGithubOauth($domain, $token)\n{\n$this->getIO()->setAuthentication($domain, $token, 'x-oauth-basic');\ntry {\n$url = $domain === 'github.com' ? 'https://api.'.$domain.'/user/repos' : 'https://'.$domain.'/api/v3/user/repos';\n\nreturn $this->rfs->getContents($domain, $url, false) ? true : 'Unexpected error';\n} catch (\\Exception $e) {\nif ($e instanceof TransportException && $e->getCode() === 401) {\nreturn '<warning>The oauth token for '.$domain.' seems invalid, run \"composer config --global --unset github-oauth.'.$domain.'\" to remove it</warning>';\n}\n\nreturn $e;\n}\n}\n\nprivate function checkDiskSpace($config)\n{\n$minSpaceFree = 1024*1024;\nif ((($df = disk_free_space($dir = $config->get('home'))) !== false && $df < $minSpaceFree)\n|| (($df = disk_free_space($dir = $config->get('vendor-dir'))) !== false && $df < $minSpaceFree)\n) {\nreturn '<error>The disk hosting '.$dir.' is full</error>';\n}\n\nreturn true;\n}\n\nprivate function checkVersion()\n{\n$protocol = extension_loaded('openssl') ? 'https' : 'http';\n$latest = trim($this->rfs->getContents('getcomposer.org', $protocol . '://getcomposer.org/version', false));\n\nif (Composer::VERSION !== $latest && Composer::VERSION !== 'c93aecee4d3998d17a1986f042187d38dd394397') {\nreturn '<warning>Your are not running the latest version</warning>';\n}\n\nreturn true;\n}\n\nprivate function outputResult(OutputInterface $output, $result)\n{\nif (true === $result) {\n$output->writeln('<info>OK</info>');\n} else {\n$this->failures++;\n$output->writeln('<error>FAIL</error>');\nif ($result instanceof \\Exception) {\n$output->writeln('['.get_class($result).'] '.$result->getMessage());\n} elseif ($result) {\n$output->writeln($result);\n}\n}\n}\n\nprivate function checkPlatform()\n{\n$output = '';\n$out = function ($msg, $style) use (&$output) {\n$output .= '<'.$style.'>'.$msg.'</'.$style.'>';\n};\n\n\n $errors = array();\n$warnings = array();\n\n$iniPath = php_ini_loaded_file();\n$displayIniMessage = false;\nif ($iniPath) {\n$iniMessage = PHP_EOL.PHP_EOL.'The php.ini used by your command-line PHP is: ' . $iniPath;\n} else {\n$iniMessage = PHP_EOL.PHP_EOL.'A php.ini file does not exist. You will have to create one.';\n}\n$iniMessage .= PHP_EOL.'If you can not modify the ini file, you can also run `php -d option=value` to modify ini values on the fly. You can use -d multiple times.';\n\nif (!ini_get('allow_url_fopen')) {\n$errors['allow_url_fopen'] = true;\n}\n\nif (version_compare(PHP_VERSION, '5.3.2', '<')) {\n$errors['php'] = PHP_VERSION;\n}\n\nif (!isset($errors['php']) && version_compare(PHP_VERSION, '5.3.4', '<')) {\n$warnings['php'] = PHP_VERSION;\n}\n\nif (!extension_loaded('openssl')) {\n$warnings['openssl'] = true;\n}\n\nif (ini_get('apc.enable_cli')) {\n$warnings['apc_cli'] = true;\n}\n\nob_start();\nphpinfo(INFO_GENERAL);\n$phpinfo = ob_get_clean();\nif (preg_match('{Configure Command(?: *</td><td class=\"v\">| *=> *)(.*?)(?:</td>|$)}m', $phpinfo, $match)) {\n$configure = $match[1];\n\nif (false !== strpos($configure, '--enable-sigchild')) {\n$warnings['sigchild'] = true;\n}\n\nif (false !== strpos($configure, '--with-curlwrappers')) {\n$warnings['curlwrappers'] = true;\n}\n}\n\nif (!empty($errors)) {\nforeach ($errors as $error => $current) {\nswitch ($error) {\ncase 'php':\n$text = PHP_EOL.\"Your PHP ({$current}) is too old, you must upgrade to PHP 5.3.2 or higher.\";\nbreak;\n\ncase 'allow_url_fopen':\n$text = PHP_EOL.\"The allow_url_fopen setting is incorrect.\".PHP_EOL;\n$text .= \"Add the following to the end of your `php.ini`:\".PHP_EOL;\n$text .= \"    allow_url_fopen = On\";\n$displayIniMessage = true;\nbreak;\n}\n$out($text, 'error');\n}\n\n$output .= PHP_EOL;\n}\n\nif (!empty($warnings)) {\nforeach ($warnings as $warning => $current) {\nswitch ($warning) {\ncase 'apc_cli':\n$text = PHP_EOL.\"The apc.enable_cli setting is incorrect.\".PHP_EOL;\n$text .= \"Add the following to the end of your `php.ini`:\".PHP_EOL;\n$text .= \"    apc.enable_cli = Off\";\n$displayIniMessage = true;\nbreak;\n\ncase 'sigchild':\n$text = PHP_EOL.\"PHP was compiled with --enable-sigchild which can cause issues on some platforms.\".PHP_EOL;\n$text .= \"Recompile it without this flag if possible, see also:\".PHP_EOL;\n$text .= \"    https://bugs.php.net/bug.php?id=22999\";\nbreak;\n\ncase 'curlwrappers':\n$text = PHP_EOL.\"PHP was compiled with --with-curlwrappers which will cause issues with HTTP authentication and GitHub.\".PHP_EOL;\n$text .= \"Recompile it without this flag if possible\";\nbreak;\n\ncase 'openssl':\n$text = PHP_EOL.\"The openssl extension is missing, which will reduce the security and stability of Composer.\".PHP_EOL;\n$text .= \"If possible you should enable it or recompile php with --with-openssl\";\nbreak;\n\ncase 'php':\n$text = PHP_EOL.\"Your PHP ({$current}) is quite old, upgrading to PHP 5.3.4 or higher is recommended.\".PHP_EOL;\n$text .= \"Composer works with 5.3.2+ for most people, but there might be edge case issues.\";\nbreak;\n}\n$out($text, 'warning');\n}\n}\n\nif ($displayIniMessage) {\n$out($iniMessage, 'warning');\n}\n\nreturn !$warnings && !$errors ? true : $output;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Command;\n\nuse Composer\\Factory;\nuse Composer\\IO\\IOInterface;\nuse Composer\\DependencyResolver\\Pool;\nuse Composer\\Package\\LinkConstraint\\VersionConstraint;\nuse Composer\\Repository\\CompositeRepository;\n\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n\n\n\n\n\nclass ArchiveCommand extends Command\n{\nprotected function configure()\n{\n$this\n->setName('archive')\n->setDescription('Create an archive of this composer package')\n->setDefinition(array(\nnew InputArgument('package', InputArgument::OPTIONAL, 'The package to archive instead of the current project'),\nnew InputArgument('version', InputArgument::OPTIONAL, 'The package version to archive'),\nnew InputOption('format', 'f', InputOption::VALUE_REQUIRED, 'Format of the resulting archive: tar or zip', 'tar'),\nnew InputOption('dir', false, InputOption::VALUE_REQUIRED, 'Write the archive to this directory', '.'),\n))\n->setHelp(<<<EOT\nThe <info>archive</info> command creates an archive of the specified format\ncontaining the files and directories of the Composer project or the specified\npackage in the specified version and writes it to the specified directory.\n\n<info>php composer.phar archive [--format=zip] [--dir=/foo] [package [version]]</info>\n\nEOT\n)\n;\n}\n\nprotected function execute(InputInterface $input, OutputInterface $output)\n{\nreturn $this->archive(\n$this->getIO(),\n$input->getArgument('package'),\n$input->getArgument('version'),\n$input->getOption('format'),\n$input->getOption('dir')\n);\n}\n\nprotected function archive(IOInterface $io, $packageName = null, $version = null, $format = 'tar', $dest = '.')\n{\n$config = Factory::createConfig();\n$factory = new Factory;\n$archiveManager = $factory->createArchiveManager($config);\n\nif ($packageName) {\n$package = $this->selectPackage($io, $packageName, $version);\n\nif (!$package) {\nreturn 1;\n}\n} else {\n$package = $this->getComposer()->getPackage();\n}\n\n$io->write('<info>Creating the archive.</info>');\n$archiveManager->archive($package, $format, $dest);\n\nreturn 0;\n}\n\nprotected function selectPackage(IOInterface $io, $packageName, $version = null)\n{\n$io->write('<info>Searching for the specified package.</info>');\n\nif ($composer = $this->getComposer(false)) {\n$localRepo = $composer->getRepositoryManager()->getLocalRepository();\n$repos = new CompositeRepository(array_merge(array($localRepo), $composer->getRepositoryManager()->getRepositories()));\n} else {\n$defaultRepos = Factory::createDefaultRepositories($this->getIO());\n$io->write('No composer.json found in the current directory, searching packages from ' . implode(', ', array_keys($defaultRepos)));\n$repos = new CompositeRepository($defaultRepos);\n}\n\n$pool = new Pool();\n$pool->addRepository($repos);\n\n$constraint = ($version) ? new VersionConstraint('>=', $version) : null;\n$packages = $pool->whatProvides($packageName, $constraint);\n\nif (count($packages) > 1) {\n$package = $packages[0];\n$io->write('<info>Found multiple matches, selected '.$package->getPrettyString().'.</info>');\n$io->write('Alternatives were '.implode(', ', array_map(function ($p) { return $p->getPrettyString(); }, $packages)).'.');\n$io->write('<comment>Please use a more specific constraint to pick a different package.</comment>');\n} elseif ($packages) {\n$package = $packages[0];\n$io->write('<info>Found an exact match '.$package->getPrettyString().'.</info>');\n} else {\n$io->write('<error>Could not find a package matching '.$packageName.'.</error>');\n\nreturn false;\n}\n\nreturn $package;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Command;\n\nuse Composer\\Composer;\nuse Composer\\Console\\Application;\nuse Composer\\IO\\IOInterface;\nuse Composer\\IO\\NullIO;\nuse Symfony\\Component\\Console\\Command\\Command as BaseCommand;\n\n\n\n\n\n\n\nabstract class Command extends BaseCommand\n{\n\n\n\nprivate $composer;\n\n\n\n\nprivate $io;\n\n\n\n\n\n\npublic function getComposer($required = true)\n{\nif (null === $this->composer) {\n$application = $this->getApplication();\nif ($application instanceof Application) {\n\n$this->composer = $application->getComposer($required);\n} elseif ($required) {\nthrow new \\RuntimeException(\n'Could not create a Composer\\Composer instance, you must inject '.\n'one if this command is not used with a Composer\\Console\\Application instance'\n);\n}\n}\n\nreturn $this->composer;\n}\n\n\n\n\npublic function setComposer(Composer $composer)\n{\n$this->composer = $composer;\n}\n\n\n\n\npublic function getIO()\n{\nif (null === $this->io) {\n$application = $this->getApplication();\nif ($application instanceof Application) {\n\n$this->io = $application->getIO();\n} else {\n$this->io = new NullIO();\n}\n}\n\nreturn $this->io;\n}\n\n\n\n\npublic function setIO(IOInterface $io)\n{\n$this->io = $io;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Command;\n\nuse Composer\\Config;\nuse Composer\\Factory;\nuse Composer\\Installer;\nuse Composer\\Installer\\ProjectInstaller;\nuse Composer\\Installer\\InstallationManager;\nuse Composer\\IO\\IOInterface;\nuse Composer\\Package\\BasePackage;\nuse Composer\\Package\\LinkConstraint\\VersionConstraint;\nuse Composer\\DependencyResolver\\Pool;\nuse Composer\\DependencyResolver\\Operation\\InstallOperation;\nuse Composer\\Repository\\ComposerRepository;\nuse Composer\\Repository\\CompositeRepository;\nuse Composer\\Repository\\FilesystemRepository;\nuse Composer\\Repository\\InstalledFilesystemRepository;\nuse Composer\\Script\\ScriptEvents;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\Finder\\Finder;\nuse Composer\\Json\\JsonFile;\nuse Composer\\Config\\JsonConfigSource;\nuse Composer\\Util\\Filesystem;\nuse Composer\\Util\\RemoteFilesystem;\nuse Composer\\Package\\Version\\VersionParser;\n\n\n\n\n\n\n\n\nclass CreateProjectCommand extends Command\n{\nprotected function configure()\n{\n$this\n->setName('create-project')\n->setDescription('Create new project from a package into given directory.')\n->setDefinition(array(\nnew InputArgument('package', InputArgument::OPTIONAL, 'Package name to be installed'),\nnew InputArgument('directory', InputArgument::OPTIONAL, 'Directory where the files should be created'),\nnew InputArgument('version', InputArgument::OPTIONAL, 'Version, will defaults to latest'),\nnew InputOption('stability', 's', InputOption::VALUE_REQUIRED, 'Minimum-stability allowed (unless a version is specified).', 'stable'),\nnew InputOption('prefer-source', null, InputOption::VALUE_NONE, 'Forces installation from package sources when possible, including VCS information.'),\nnew InputOption('prefer-dist', null, InputOption::VALUE_NONE, 'Forces installation from package dist even for dev versions.'),\nnew InputOption('repository-url', null, InputOption::VALUE_REQUIRED, 'Pick a different repository url to look for the package.'),\nnew InputOption('dev', null, InputOption::VALUE_NONE, 'Enables installation of require-dev packages (enabled by default, only present for BC).'),\nnew InputOption('no-dev', null, InputOption::VALUE_NONE, 'Disables installation of require-dev packages.'),\nnew InputOption('no-custom-installers', null, InputOption::VALUE_NONE, 'Whether to disable custom installers.'),\nnew InputOption('no-scripts', null, InputOption::VALUE_NONE, 'Whether to prevent execution of all defined scripts in the root package.'),\nnew InputOption('no-progress', null, InputOption::VALUE_NONE, 'Do not output download progress.'),\nnew InputOption('keep-vcs', null, InputOption::VALUE_NONE, 'Whether to prevent deletion vcs folder.'),\n))\n->setHelp(<<<EOT\nThe <info>create-project</info> command creates a new project from a given\npackage into a new directory. If executed without params and in a directory\nwith a composer.json file it installs the packages for the current project.\n\nYou can use this command to bootstrap new projects or setup a clean\nversion-controlled installation for developers of your project.\n\n<info>php composer.phar create-project vendor/project target-directory [version]</info>\n\nYou can also specify the version with the package name using = or : as separator.\n\nTo install unstable packages, either specify the version you want, or use the\n--stability=dev (where dev can be one of RC, beta, alpha or dev).\n\nTo setup a developer workable version you should create the project using the source\ncontrolled code by appending the <info>'--prefer-source'</info> flag.\n\nTo install a package from another repository than the default one you\ncan pass the <info>'--repository-url=http://myrepository.org'</info> flag.\n\nEOT\n)\n;\n}\n\nprotected function execute(InputInterface $input, OutputInterface $output)\n{\n$config = Factory::createConfig();\n\n$preferSource = false;\n$preferDist = false;\nswitch ($config->get('preferred-install')) {\ncase 'source':\n$preferSource = true;\nbreak;\ncase 'dist':\n$preferDist = true;\nbreak;\ncase 'auto':\ndefault:\n\n break;\n}\nif ($input->getOption('prefer-source') || $input->getOption('prefer-dist')) {\n$preferSource = $input->getOption('prefer-source');\n$preferDist = $input->getOption('prefer-dist');\n}\n\nreturn $this->installProject(\n$this->getIO(),\n$config,\n$input->getArgument('package'),\n$input->getArgument('directory'),\n$input->getArgument('version'),\n$input->getOption('stability'),\n$preferSource,\n$preferDist,\n!$input->getOption('no-dev'),\n$input->getOption('repository-url'),\n$input->getOption('no-custom-installers'),\n$input->getOption('no-scripts'),\n$input->getOption('keep-vcs'),\n$input->getOption('no-progress')\n);\n}\n\npublic function installProject(IOInterface $io, $config, $packageName, $directory = null, $packageVersion = null, $stability = 'stable', $preferSource = false, $preferDist = false, $installDevPackages = false, $repositoryUrl = null, $disableCustomInstallers = false, $noScripts = false, $keepVcs = false, $noProgress = false)\n{\nif ($packageName !== null) {\n$installedFromVcs = $this->installRootPackage($io, $config, $packageName, $directory, $packageVersion, $stability, $preferSource, $preferDist, $installDevPackages, $repositoryUrl, $disableCustomInstallers, $noScripts, $keepVcs, $noProgress);\n} else {\n$installedFromVcs = false;\n}\n\n$composer = Factory::create($io);\n\nif ($noScripts === false) {\n\n $composer->getEventDispatcher()->dispatchCommandEvent(ScriptEvents::POST_ROOT_PACKAGE_INSTALL, $installDevPackages);\n}\n\n\n $installer = Installer::create($io, $composer);\n$installer->setPreferSource($preferSource)\n->setPreferDist($preferDist)\n->setDevMode($installDevPackages)\n->setRunScripts( ! $noScripts);\n\nif ($disableCustomInstallers) {\n$installer->disableCustomInstallers();\n}\n\nif (!$installer->run()) {\nreturn 1;\n}\n\n$hasVcs = $installedFromVcs;\nif (!$keepVcs && $installedFromVcs\n&& (\n!$io->isInteractive()\n|| $io->askConfirmation('<info>Do you want to remove the existing VCS (.git, .svn..) history?</info> [<comment>Y,n</comment>]? ', true)\n)\n) {\n$finder = new Finder();\n$finder->depth(0)->directories()->in(getcwd())->ignoreVCS(false)->ignoreDotFiles(false);\nforeach (array('.svn', '_svn', 'CVS', '_darcs', '.arch-params', '.monotone', '.bzr', '.git', '.hg') as $vcsName) {\n$finder->name($vcsName);\n}\n\ntry {\n$fs = new Filesystem();\n$dirs = iterator_to_array($finder);\nunset($finder);\nforeach ($dirs as $dir) {\nif (!$fs->removeDirectory($dir)) {\nthrow new \\RuntimeException('Could not remove '.$dir);\n}\n}\n} catch (\\Exception $e) {\n$io->write('<error>An error occurred while removing the VCS metadata: '.$e->getMessage().'</error>');\n}\n\n$hasVcs = false;\n}\n\n\n if (!$hasVcs) {\n$package = $composer->getPackage();\n$configSource = new JsonConfigSource(new JsonFile('composer.json'));\nforeach (BasePackage::$supportedLinkTypes as $type => $meta) {\nforeach ($package->{'get'.$meta['method']}() as $link) {\nif ($link->getPrettyConstraint() === 'self.version') {\n$configSource->addLink($type, $link->getTarget(), $package->getPrettyVersion());\n}\n}\n}\n}\n\nif ($noScripts === false) {\n\n $composer->getEventDispatcher()->dispatchCommandEvent(ScriptEvents::POST_CREATE_PROJECT_CMD, $installDevPackages);\n}\n\nreturn 0;\n}\n\nprotected function installRootPackage(IOInterface $io, $config, $packageName, $directory = null, $packageVersion = null, $stability = 'stable', $preferSource = false, $preferDist = false, $installDevPackages = false, $repositoryUrl = null, $disableCustomInstallers = false, $noScripts = false, $keepVcs = false, $noProgress = false)\n{\n$stability = strtolower($stability);\nif ($stability === 'rc') {\n$stability = 'RC';\n}\nif (!isset(BasePackage::$stabilities[$stability])) {\nthrow new \\InvalidArgumentException('Invalid stability provided ('.$stability.'), must be one of: '.implode(', ', array_keys(BasePackage::$stabilities)));\n}\n\nif (null === $repositoryUrl) {\n$sourceRepo = new CompositeRepository(Factory::createDefaultRepositories($io, $config));\n} elseif (\"json\" === pathinfo($repositoryUrl, PATHINFO_EXTENSION)) {\n$sourceRepo = new FilesystemRepository(new JsonFile($repositoryUrl, new RemoteFilesystem($io)));\n} elseif (0 === strpos($repositoryUrl, 'http')) {\n$sourceRepo = new ComposerRepository(array('url' => $repositoryUrl), $io, $config);\n} else {\nthrow new \\InvalidArgumentException(\"Invalid repository url given. Has to be a .json file or an http url.\");\n}\n\n$parser = new VersionParser();\n$candidates = array();\n$requirements = $parser->parseNameVersionPairs(array($packageName));\n$name = strtolower($requirements[0]['name']);\nif (!$packageVersion && isset($requirements[0]['version'])) {\n$packageVersion = $requirements[0]['version'];\n}\n\n$pool = new Pool($packageVersion ? 'dev' : $stability);\n$pool->addRepository($sourceRepo);\n\n$constraint = $packageVersion ? new VersionConstraint('=', $parser->normalize($packageVersion)) : null;\n$candidates = $pool->whatProvides($name, $constraint);\nforeach ($candidates as $key => $candidate) {\nif ($candidate->getName() !== $name) {\nunset($candidates[$key]);\n}\n}\n\nif (!$candidates) {\nthrow new \\InvalidArgumentException(\"Could not find package $name\" . ($packageVersion ? \" with version $packageVersion.\" : \" with stability $stability.\"));\n}\n\nif (null === $directory) {\n$parts = explode(\"/\", $name, 2);\n$directory = getcwd() . DIRECTORY_SEPARATOR . array_pop($parts);\n}\n\n\n $package = $candidates[0];\nforeach ($candidates as $candidate) {\nif (version_compare($package->getVersion(), $candidate->getVersion(), '<')) {\n$package = $candidate;\n}\n}\nunset($candidates);\n\n$io->write('<info>Installing ' . $package->getName() . ' (' . VersionParser::formatVersion($package, false) . ')</info>');\n\nif ($disableCustomInstallers) {\n$io->write('<info>Custom installers have been disabled.</info>');\n}\n\nif (0 === strpos($package->getPrettyVersion(), 'dev-') && in_array($package->getSourceType(), array('git', 'hg'))) {\n$package->setSourceReference(substr($package->getPrettyVersion(), 4));\n}\n\n$dm = $this->createDownloadManager($io, $config);\n$dm->setPreferSource($preferSource)\n->setPreferDist($preferDist)\n->setOutputProgress(!$noProgress);\n\n$projectInstaller = new ProjectInstaller($directory, $dm);\n$im = $this->createInstallationManager();\n$im->addInstaller($projectInstaller);\n$im->install(new InstalledFilesystemRepository(new JsonFile('php://memory')), new InstallOperation($package));\n$im->notifyInstalls();\n\n$installedFromVcs = 'source' === $package->getInstallationSource();\n\n$io->write('<info>Created project in ' . $directory . '</info>');\nchdir($directory);\n\nputenv('COMPOSER_ROOT_VERSION='.$package->getPrettyVersion());\n\nreturn $installedFromVcs;\n}\n\nprotected function createDownloadManager(IOInterface $io, Config $config)\n{\n$factory = new Factory();\n\nreturn $factory->createDownloadManager($io, $config);\n}\n\nprotected function createInstallationManager()\n{\nreturn new InstallationManager();\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Command;\n\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n\n\n\nclass AboutCommand extends Command\n{\nprotected function configure()\n{\n$this\n->setName('about')\n->setDescription('Short information about Composer')\n->setHelp(<<<EOT\n<info>php composer.phar about</info>\nEOT\n)\n;\n}\n\nprotected function execute(InputInterface $input, OutputInterface $output)\n{\n$output->writeln(<<<EOT\n<info>Composer - Package Management for PHP</info>\n<comment>Composer is a dependency manager tracking local dependencies of your projects and libraries.\nSee http://getcomposer.org/ for more information.</comment>\nEOT\n);\n\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Command;\n\nuse Composer\\Composer;\nuse Composer\\DependencyResolver\\Pool;\nuse Composer\\DependencyResolver\\DefaultPolicy;\nuse Composer\\Factory;\nuse Composer\\Package\\CompletePackageInterface;\nuse Composer\\Package\\Version\\VersionParser;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Composer\\Repository\\ArrayRepository;\nuse Composer\\Repository\\CompositeRepository;\nuse Composer\\Repository\\ComposerRepository;\nuse Composer\\Repository\\PlatformRepository;\nuse Composer\\Repository\\RepositoryInterface;\n\n\n\n\n\nclass ShowCommand extends Command\n{\nprotected $versionParser;\n\nprotected function configure()\n{\n$this\n->setName('show')\n->setDescription('Show information about packages')\n->setDefinition(array(\nnew InputArgument('package', InputArgument::OPTIONAL, 'Package to inspect'),\nnew InputArgument('version', InputArgument::OPTIONAL, 'Version or version constraint to inspect'),\nnew InputOption('installed', 'i', InputOption::VALUE_NONE, 'List installed packages only'),\nnew InputOption('platform', 'p', InputOption::VALUE_NONE, 'List platform packages only'),\nnew InputOption('available', 'a', InputOption::VALUE_NONE, 'List available packages only'),\nnew InputOption('self', 's', InputOption::VALUE_NONE, 'Show the root package information'),\nnew InputOption('name-only', 'N', InputOption::VALUE_NONE, 'List package names only'),\n))\n->setHelp(<<<EOT\nThe show command displays detailed information about a package, or\nlists all packages available.\n\nEOT\n)\n;\n}\n\nprotected function execute(InputInterface $input, OutputInterface $output)\n{\n$this->versionParser = new VersionParser;\n\n\n $platformRepo = new PlatformRepository;\n\nif ($input->getOption('self')) {\n$package = $this->getComposer(false)->getPackage();\n$repos = $installedRepo = new ArrayRepository(array($package));\n} elseif ($input->getOption('platform')) {\n$repos = $installedRepo = $platformRepo;\n} elseif ($input->getOption('installed')) {\n$repos = $installedRepo = $this->getComposer()->getRepositoryManager()->getLocalRepository();\n} elseif ($input->getOption('available')) {\n$installedRepo = $platformRepo;\nif ($composer = $this->getComposer(false)) {\n$repos = new CompositeRepository($composer->getRepositoryManager()->getRepositories());\n} else {\n$defaultRepos = Factory::createDefaultRepositories($this->getIO());\n$repos = new CompositeRepository($defaultRepos);\n$output->writeln('No composer.json found in the current directory, showing available packages from ' . implode(', ', array_keys($defaultRepos)));\n}\n} elseif ($composer = $this->getComposer(false)) {\n$composer = $this->getComposer();\n$localRepo = $composer->getRepositoryManager()->getLocalRepository();\n$installedRepo = new CompositeRepository(array($localRepo, $platformRepo));\n$repos = new CompositeRepository(array_merge(array($installedRepo), $composer->getRepositoryManager()->getRepositories()));\n} else {\n$defaultRepos = Factory::createDefaultRepositories($this->getIO());\n$output->writeln('No composer.json found in the current directory, showing available packages from ' . implode(', ', array_keys($defaultRepos)));\n$installedRepo = $platformRepo;\n$repos = new CompositeRepository(array_merge(array($installedRepo), $defaultRepos));\n}\n\n\n if ($input->getArgument('package') || !empty($package)) {\n$versions = array();\nif (empty($package)) {\nlist($package, $versions) = $this->getPackage($installedRepo, $repos, $input->getArgument('package'), $input->getArgument('version'));\n\nif (!$package) {\nthrow new \\InvalidArgumentException('Package '.$input->getArgument('package').' not found');\n}\n} else {\n$versions = array($package->getPrettyVersion() => $package->getVersion());\n}\n\n$this->printMeta($input, $output, $package, $versions, $installedRepo, $repos);\n$this->printLinks($input, $output, $package, 'requires');\n$this->printLinks($input, $output, $package, 'devRequires', 'requires (dev)');\nif ($package->getSuggests()) {\n$output->writeln(\"\\n<info>suggests</info>\");\nforeach ($package->getSuggests() as $suggested => $reason) {\n$output->writeln($suggested . ' <comment>' . $reason . '</comment>');\n}\n}\n$this->printLinks($input, $output, $package, 'provides');\n$this->printLinks($input, $output, $package, 'conflicts');\n$this->printLinks($input, $output, $package, 'replaces');\n\nreturn;\n}\n\n\n $packages = array();\n\nif ($repos instanceof CompositeRepository) {\n$repos = $repos->getRepositories();\n} elseif (!is_array($repos)) {\n$repos = array($repos);\n}\n\nforeach ($repos as $repo) {\nif ($repo === $platformRepo) {\n$type = '<info>platform</info>:';\n} elseif (\n$repo === $installedRepo\n|| ($installedRepo instanceof CompositeRepository && in_array($repo, $installedRepo->getRepositories(), true))\n) {\n$type = '<info>installed</info>:';\n} else {\n$type = '<comment>available</comment>:';\n}\nif ($repo instanceof ComposerRepository && $repo->hasProviders()) {\nforeach ($repo->getProviderNames() as $name) {\n$packages[$type][$name] = $name;\n}\n} else {\nforeach ($repo->getPackages() as $package) {\nif (!isset($packages[$type][$package->getName()])\n|| !is_object($packages[$type][$package->getName()])\n|| version_compare($packages[$type][$package->getName()]->getVersion(), $package->getVersion(), '<')\n) {\n$packages[$type][$package->getName()] = $package;\n}\n}\n}\n}\n\n$tree = !$input->getOption('platform') && !$input->getOption('installed') && !$input->getOption('available');\n$indent = $tree ? '  ' : '';\nforeach (array('<info>platform</info>:' => true, '<comment>available</comment>:' => false, '<info>installed</info>:' => true) as $type => $showVersion) {\nif (isset($packages[$type])) {\nif ($tree) {\n$output->writeln($type);\n}\nksort($packages[$type]);\n\n$nameLength = $versionLength = 0;\nforeach ($packages[$type] as $package) {\nif (is_object($package)) {\n$nameLength = max($nameLength, strlen($package->getPrettyName()));\n$versionLength = max($versionLength, strlen($this->versionParser->formatVersion($package)));\n} else {\n$nameLength = max($nameLength, $package);\n}\n}\nlist($width) = $this->getApplication()->getTerminalDimensions();\nif (defined('PHP_WINDOWS_VERSION_BUILD')) {\n$width--;\n}\n\n$writeVersion = !$input->getOption('name-only') && $showVersion && ($nameLength + $versionLength + 3 <= $width);\n$writeDescription = !$input->getOption('name-only') && ($nameLength + ($showVersion ? $versionLength : 0) + 24 <= $width);\nforeach ($packages[$type] as $package) {\nif (is_object($package)) {\n$output->write($indent . str_pad($package->getPrettyName(), $nameLength, ' '), false);\n\nif ($writeVersion) {\n$output->write(' ' . str_pad($this->versionParser->formatVersion($package), $versionLength, ' '), false);\n}\n\nif ($writeDescription) {\n$description = strtok($package->getDescription(), \"\\r\\n\");\n$remaining = $width - $nameLength - $versionLength - 4;\nif (strlen($description) > $remaining) {\n$description = substr($description, 0, $remaining - 3) . '...';\n}\n$output->write(' ' . $description);\n}\n} else {\n$output->write($indent . $package);\n}\n$output->writeln('');\n}\nif ($tree) {\n$output->writeln('');\n}\n}\n}\n}\n\n\n\n\n\n\n\n\n\n\n\nprotected function getPackage(RepositoryInterface $installedRepo, RepositoryInterface $repos, $name, $version = null)\n{\n$name = strtolower($name);\n$constraint = null;\nif ($version) {\n$constraint = $this->versionParser->parseConstraints($version);\n}\n\n$policy = new DefaultPolicy();\n$pool = new Pool('dev');\n$pool->addRepository($repos);\n\n$matchedPackage = null;\n$versions = array();\n$matches = $pool->whatProvides($name, $constraint);\nforeach ($matches as $index => $package) {\n\n if ($package->getName() !== $name) {\nunset($matches[$index]);\ncontinue;\n}\n\n\n if (null === $version && $installedRepo->hasPackage($package)) {\n$matchedPackage = $package;\n}\n\n$versions[$package->getPrettyVersion()] = $package->getVersion();\n$matches[$index] = $package->getId();\n}\n\n\n if (!$matchedPackage && $matches && $prefered = $policy->selectPreferedPackages($pool, array(), $matches)) {\n$matchedPackage = $pool->literalToPackage($prefered[0]);\n}\n\nreturn array($matchedPackage, $versions);\n}\n\n\n\n\nprotected function printMeta(InputInterface $input, OutputInterface $output, CompletePackageInterface $package, array $versions, RepositoryInterface $installedRepo, RepositoryInterface $repos)\n{\n$output->writeln('<info>name</info>     : ' . $package->getPrettyName());\n$output->writeln('<info>descrip.</info> : ' . $package->getDescription());\n$output->writeln('<info>keywords</info> : ' . join(', ', $package->getKeywords() ?: array()));\n$this->printVersions($input, $output, $package, $versions, $installedRepo, $repos);\n$output->writeln('<info>type</info>     : ' . $package->getType());\n$output->writeln('<info>license</info>  : ' . implode(', ', $package->getLicense()));\n$output->writeln('<info>source</info>   : ' . sprintf('[%s] <comment>%s</comment> %s', $package->getSourceType(), $package->getSourceUrl(), $package->getSourceReference()));\n$output->writeln('<info>dist</info>     : ' . sprintf('[%s] <comment>%s</comment> %s', $package->getDistType(), $package->getDistUrl(), $package->getDistReference()));\n$output->writeln('<info>names</info>    : ' . implode(', ', $package->getNames()));\n\nif ($package->getSupport()) {\n$output->writeln(\"\\n<info>support</info>\");\nforeach ($package->getSupport() as $type => $value) {\n$output->writeln('<comment>' . $type . '</comment> : '.$value);\n}\n}\n\nif ($package->getAutoload()) {\n$output->writeln(\"\\n<info>autoload</info>\");\nforeach ($package->getAutoload() as $type => $autoloads) {\n$output->writeln('<comment>' . $type . '</comment>');\n\nif ($type === 'psr-0') {\nforeach ($autoloads as $name => $path) {\n$output->writeln(($name ?: '*') . ' => ' . ($path ?: '.'));\n}\n} elseif ($type === 'classmap') {\n$output->writeln(implode(', ', $autoloads));\n}\n}\nif ($package->getIncludePaths()) {\n$output->writeln('<comment>include-path</comment>');\n$output->writeln(implode(', ', $package->getIncludePaths()));\n}\n}\n}\n\n\n\n\nprotected function printVersions(InputInterface $input, OutputInterface $output, CompletePackageInterface $package, array $versions, RepositoryInterface $installedRepo, RepositoryInterface $repos)\n{\nuasort($versions, 'version_compare');\n$versions = array_keys(array_reverse($versions));\n\n\n if ($installedRepo->hasPackage($package)) {\n$installedVersion = $package->getPrettyVersion();\n$key = array_search($installedVersion, $versions);\nif (false !== $key) {\n$versions[$key] = '<info>* ' . $installedVersion . '</info>';\n}\n}\n\n$versions = implode(', ', $versions);\n\n$output->writeln('<info>versions</info> : ' . $versions);\n}\n\n\n\n\n\n\n\n\n\n\nprotected function printLinks(InputInterface $input, OutputInterface $output, CompletePackageInterface $package, $linkType, $title = null)\n{\n$title = $title ?: $linkType;\nif ($links = $package->{'get'.ucfirst($linkType)}()) {\n$output->writeln(\"\\n<info>\" . $title . \"</info>\");\n\nforeach ($links as $link) {\n$output->writeln($link->getTarget() . ' <comment>' . $link->getPrettyConstraint() . '</comment>');\n}\n}\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Command;\n\nuse Composer\\Installer;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n\n\n\nclass UpdateCommand extends Command\n{\nprotected function configure()\n{\n$this\n->setName('update')\n->setDescription('Updates your dependencies to the latest version according to composer.json, and updates the composer.lock file.')\n->setDefinition(array(\nnew InputArgument('packages', InputArgument::IS_ARRAY | InputArgument::OPTIONAL, 'Packages that should be updated, if not provided all packages are.'),\nnew InputOption('prefer-source', null, InputOption::VALUE_NONE, 'Forces installation from package sources when possible, including VCS information.'),\nnew InputOption('prefer-dist', null, InputOption::VALUE_NONE, 'Forces installation from package dist even for dev versions.'),\nnew InputOption('dry-run', null, InputOption::VALUE_NONE, 'Outputs the operations but will not execute anything (implicitly enables --verbose).'),\nnew InputOption('dev', null, InputOption::VALUE_NONE, 'Enables installation of require-dev packages (enabled by default, only present for BC).'),\nnew InputOption('no-dev', null, InputOption::VALUE_NONE, 'Disables installation of require-dev packages.'),\nnew InputOption('lock', null, InputOption::VALUE_NONE, 'Only updates the lock file hash to suppress warning about the lock file being out of date.'),\nnew InputOption('no-custom-installers', null, InputOption::VALUE_NONE, 'Disables all custom installers.'),\nnew InputOption('no-scripts', null, InputOption::VALUE_NONE, 'Skips the execution of all scripts defined in composer.json file.'),\nnew InputOption('no-progress', null, InputOption::VALUE_NONE, 'Do not output download progress.'),\nnew InputOption('verbose', 'v|vv|vvv', InputOption::VALUE_NONE, 'Shows more details including new commits pulled in when updating packages.'),\nnew InputOption('optimize-autoloader', 'o', InputOption::VALUE_NONE, 'Optimize autoloader during autoloader dump')\n))\n->setHelp(<<<EOT\nThe <info>update</info> command reads the composer.json file from the\ncurrent directory, processes it, and updates, removes or installs all the\ndependencies.\n\n<info>php composer.phar update</info>\n\nTo limit the update operation to a few packages, you can list the package(s)\nyou want to update as such:\n\n<info>php composer.phar update vendor/package1 foo/mypackage [...]</info>\nEOT\n)\n;\n}\n\nprotected function execute(InputInterface $input, OutputInterface $output)\n{\n$composer = $this->getComposer();\n$composer->getDownloadManager()->setOutputProgress(!$input->getOption('no-progress'));\n$io = $this->getIO();\n$install = Installer::create($io, $composer);\n\n$preferSource = false;\n$preferDist = false;\nswitch ($composer->getConfig()->get('preferred-install')) {\ncase 'source':\n$preferSource = true;\nbreak;\ncase 'dist':\n$preferDist = true;\nbreak;\ncase 'auto':\ndefault:\n\n break;\n}\nif ($input->getOption('prefer-source') || $input->getOption('prefer-dist')) {\n$preferSource = $input->getOption('prefer-source');\n$preferDist = $input->getOption('prefer-dist');\n}\n\n$install\n->setDryRun($input->getOption('dry-run'))\n->setVerbose($input->getOption('verbose'))\n->setPreferSource($preferSource)\n->setPreferDist($preferDist)\n->setDevMode(!$input->getOption('no-dev'))\n->setRunScripts(!$input->getOption('no-scripts'))\n->setOptimizeAutoloader($input->getOption('optimize-autoloader'))\n->setUpdate(true)\n->setUpdateWhitelist($input->getOption('lock') ? array('lock') : $input->getArgument('packages'))\n;\n\nif ($input->getOption('no-custom-installers')) {\n$install->disableCustomInstallers();\n}\n\nreturn $install->run() ? 0 : 1;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Command;\n\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Composer\\Config;\nuse Composer\\Config\\JsonConfigSource;\nuse Composer\\Factory;\nuse Composer\\Json\\JsonFile;\n\n\n\n\n\nclass ConfigCommand extends Command\n{\n\n\n\nprotected $config;\n\n\n\n\nprotected $configFile;\n\n\n\n\nprotected $configSource;\n\n\n\n\nprotected function configure()\n{\n$this\n->setName('config')\n->setDescription('Set config options')\n->setDefinition(array(\nnew InputOption('global', 'g', InputOption::VALUE_NONE, 'Apply command to the global config file'),\nnew InputOption('editor', 'e', InputOption::VALUE_NONE, 'Open editor'),\nnew InputOption('unset', null, InputOption::VALUE_NONE, 'Unset the given setting-key'),\nnew InputOption('list', 'l', InputOption::VALUE_NONE, 'List configuration settings'),\nnew InputOption('file', 'f', InputOption::VALUE_REQUIRED, 'If you want to choose a different composer.json or config.json', 'composer.json'),\nnew InputArgument('setting-key', null, 'Setting key'),\nnew InputArgument('setting-value', InputArgument::IS_ARRAY, 'Setting value'),\n))\n->setHelp(<<<EOT\nThis command allows you to edit some basic composer settings in either the\nlocal composer.json file or the global config.json file.\n\nTo edit the global config.json file:\n\n    <comment>%command.full_name% --global</comment>\n\nTo add a repository:\n\n    <comment>%command.full_name% repositories.foo vcs http://bar.com</comment>\n\nYou can add a repository to the global config.json file by passing in the\n<info>--global</info> option.\n\nTo edit the file in an external editor:\n\n    <comment>%command.full_name% --editor</comment>\n\nTo choose your editor you can set the \"EDITOR\" env variable.\n\nTo get a list of configuration values in the file:\n\n    <comment>%command.full_name% --list</comment>\n\nYou can always pass more than one option. As an example, if you want to edit the\nglobal config.json file.\n\n    <comment>%command.full_name% --editor --global</comment>\nEOT\n)\n;\n}\n\n\n\n\nprotected function initialize(InputInterface $input, OutputInterface $output)\n{\nif ($input->getOption('global') && 'composer.json' !== $input->getOption('file')) {\nthrow new \\RuntimeException('--file and --global can not be combined');\n}\n\n$this->config = Factory::createConfig();\n\n\n \n $configFile = $input->getOption('global')\n? ($this->config->get('home') . '/config.json')\n: $input->getOption('file');\n\n$this->configFile = new JsonFile($configFile);\n$this->configSource = new JsonConfigSource($this->configFile);\n\n\n if ($input->getOption('global') && !$this->configFile->exists()) {\ntouch($this->configFile->getPath());\n$this->configFile->write(array('config' => new \\ArrayObject));\nchmod($this->configFile->getPath(), 0600);\n}\n\nif (!$this->configFile->exists()) {\nthrow new \\RuntimeException('No composer.json found in the current directory');\n}\n}\n\n\n\n\nprotected function execute(InputInterface $input, OutputInterface $output)\n{\n\n if ($input->getOption('editor')) {\n$editor = getenv('EDITOR');\nif (!$editor) {\nif (defined('PHP_WINDOWS_VERSION_BUILD')) {\n$editor = 'notepad';\n} else {\nforeach (array('vim', 'vi', 'nano', 'pico', 'ed') as $candidate) {\nif (exec('which '.$candidate)) {\n$editor = $candidate;\nbreak;\n}\n}\n}\n}\n\nsystem($editor . ' ' . $this->configFile->getPath() . (defined('PHP_WINDOWS_VERSION_BUILD') ? '': ' > `tty`'));\n\nreturn 0;\n}\n\nif (!$input->getOption('global')) {\n$this->config->merge($this->configFile->read());\n}\n\n\n if ($input->getOption('list')) {\n$this->listConfiguration($this->config->all(), $this->config->raw(), $output);\n\nreturn 0;\n}\n\n$settingKey = $input->getArgument('setting-key');\nif (!$settingKey) {\nreturn 0;\n}\n\n\n if (array() !== $input->getArgument('setting-value') && $input->getOption('unset')) {\nthrow new \\RuntimeException('You can not combine a setting value with --unset');\n}\n\n\n if (array() === $input->getArgument('setting-value') && !$input->getOption('unset')) {\n$data = $this->config->all();\nif (preg_match('/^repos?(?:itories)?(?:\\.(.+))?/', $settingKey, $matches)) {\nif (empty($matches[1])) {\n$value = isset($data['repositories']) ? $data['repositories'] : array();\n} else {\nif (!isset($data['repositories'][$matches[1]])) {\nthrow new \\InvalidArgumentException('There is no '.$matches[1].' repository defined');\n}\n\n$value = $data['repositories'][$matches[1]];\n}\n} elseif (strpos($settingKey, '.')) {\n$bits = explode('.', $settingKey);\n$data = $data['config'];\nforeach ($bits as $bit) {\nif (isset($data[$bit])) {\n$data = $data[$bit];\n} elseif (isset($data[implode('.', $bits)])) {\n\n $data = $data[implode('.', $bits)];\nbreak;\n} else {\nthrow new \\RuntimeException($settingKey.' is not defined');\n}\narray_shift($bits);\n}\n\n$value = $data;\n} elseif (isset($data['config'][$settingKey])) {\n$value = $data['config'][$settingKey];\n} else {\nthrow new \\RuntimeException($settingKey.' is not defined');\n}\n\nif (is_array($value)) {\n$value = json_encode($value);\n}\n\n$output->writeln($value);\n\nreturn 0;\n}\n\n$values = $input->getArgument('setting-value'); \n\n\n if (preg_match('/^repos?(?:itories)?\\.(.+)/', $settingKey, $matches)) {\nif ($input->getOption('unset')) {\nreturn $this->configSource->removeRepository($matches[1]);\n}\n\nif (2 !== count($values)) {\nthrow new \\RuntimeException('You must pass the type and a url. Example: php composer.phar config repositories.foo vcs http://bar.com');\n}\n\nreturn $this->configSource->addRepository($matches[1], array(\n'type' => $values[0],\n'url' => $values[1],\n));\n}\n\n\n if (preg_match('/^github-oauth\\.(.+)/', $settingKey, $matches)) {\nif ($input->getOption('unset')) {\nreturn $this->configSource->removeConfigSetting('github-oauth.'.$matches[1]);\n}\n\nif (1 !== count($values)) {\nthrow new \\RuntimeException('Too many arguments, expected only one token');\n}\n\nreturn $this->configSource->addConfigSetting('github-oauth.'.$matches[1], $values[0]);\n}\n\n$booleanValidator = function ($val) { return in_array($val, array('true', 'false', '1', '0'), true); };\n$booleanNormalizer = function ($val) { return $val !== 'false' && (bool) $val; };\n\n\n $uniqueConfigValues = array(\n'process-timeout' => array('is_numeric', 'intval'),\n'use-include-path' => array(\n$booleanValidator,\n$booleanNormalizer\n),\n'preferred-install' => array(\nfunction ($val) { return in_array($val, array('auto', 'source', 'dist'), true); },\nfunction ($val) { return $val; }\n),\n'notify-on-install' => array(\n$booleanValidator,\n$booleanNormalizer\n),\n'vendor-dir' => array('is_string', function ($val) { return $val; }),\n'bin-dir' => array('is_string', function ($val) { return $val; }),\n'cache-dir' => array('is_string', function ($val) { return $val; }),\n'cache-files-dir' => array('is_string', function ($val) { return $val; }),\n'cache-repo-dir' => array('is_string', function ($val) { return $val; }),\n'cache-vcs-dir' => array('is_string', function ($val) { return $val; }),\n'cache-ttl' => array('is_numeric', 'intval'),\n'cache-files-ttl' => array('is_numeric', 'intval'),\n'cache-files-maxsize' => array(\nfunction ($val) { return preg_match('/^\\s*([0-9.]+)\\s*(?:([kmg])(?:i?b)?)?\\s*$/i', $val) > 0; },\nfunction ($val) { return $val; }\n),\n'discard-changes' => array(\nfunction ($val) { return in_array($val, array('stash', 'true', 'false', '1', '0'), true); },\nfunction ($val) {\nif ('stash' === $val) {\nreturn 'stash';\n}\n\nreturn $val !== 'false' && (bool) $val;\n}\n),\n);\n$multiConfigValues = array(\n'github-protocols' => array(\nfunction ($vals) {\nif (!is_array($vals)) {\nreturn 'array expected';\n}\n\nforeach ($vals as $val) {\nif (!in_array($val, array('git', 'https', 'http'))) {\nreturn 'valid protocols include: git, https, http';\n}\n}\n\nreturn true;\n},\nfunction ($vals) {\nreturn $vals;\n}\n),\n);\n\nforeach ($uniqueConfigValues as $name => $callbacks) {\nif ($settingKey === $name) {\nif ($input->getOption('unset')) {\nreturn $this->configSource->removeConfigSetting($settingKey);\n}\n\nlist($validator, $normalizer) = $callbacks;\nif (1 !== count($values)) {\nthrow new \\RuntimeException('You can only pass one value. Example: php composer.phar config process-timeout 300');\n}\n\nif (true !== $validation = $validator($values[0])) {\nthrow new \\RuntimeException(sprintf(\n'\"%s\" is an invalid value'.($validation ? ' ('.$validation.')' : ''),\n$values[0]\n));\n}\n\nreturn $this->configSource->addConfigSetting($settingKey, $normalizer($values[0]));\n}\n}\n\nforeach ($multiConfigValues as $name => $callbacks) {\nif ($settingKey === $name) {\nif ($input->getOption('unset')) {\nreturn $this->configSource->removeConfigSetting($settingKey);\n}\n\nlist($validator, $normalizer) = $callbacks;\nif (true !== $validation = $validator($values)) {\nthrow new \\RuntimeException(sprintf(\n'%s is an invalid value'.($validation ? ' ('.$validation.')' : ''),\njson_encode($values)\n));\n}\n\nreturn $this->configSource->addConfigSetting($settingKey, $normalizer($values));\n}\n}\n\nthrow new \\InvalidArgumentException('Setting '.$settingKey.' does not exist or is not supported by this command');\n}\n\n\n\n\n\n\n\n\n\nprotected function listConfiguration(array $contents, array $rawContents, OutputInterface $output, $k = null)\n{\n$origK = $k;\nforeach ($contents as $key => $value) {\nif ($k === null && !in_array($key, array('config', 'repositories'))) {\ncontinue;\n}\n\n$rawVal = isset($rawContents[$key]) ? $rawContents[$key] : null;\n\nif (is_array($value) && (!is_numeric(key($value)) || ($key === 'repositories' && null === $k))) {\n$k .= preg_replace('{^config\\.}', '', $key . '.');\n$this->listConfiguration($value, $rawVal, $output, $k);\n\nif (substr_count($k, '.') > 1) {\n$k = str_split($k, strrpos($k, '.', -2));\n$k = $k[0] . '.';\n} else {\n$k = $origK;\n}\n\ncontinue;\n}\n\nif (is_array($value)) {\n$value = array_map(function ($val) {\nreturn is_array($val) ? json_encode($val) : $val;\n}, $value);\n\n$value = '['.implode(', ', $value).']';\n}\n\nif (is_bool($value)) {\n$value = var_export($value, true);\n}\n\nif (is_string($rawVal) && $rawVal != $value) {\n$output->writeln('[<comment>' . $k . $key . '</comment>] <info>' . $rawVal . ' (' . $value . ')</info>');\n} else {\n$output->writeln('[<comment>' . $k . $key . '</comment>] <info>' . $value . '</info>');\n}\n}\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Command;\n\nuse Composer\\Installer;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n\n\n\n\n\nclass InstallCommand extends Command\n{\nprotected function configure()\n{\n$this\n->setName('install')\n->setDescription('Installs the project dependencies from the composer.lock file if present, or falls back on the composer.json.')\n->setDefinition(array(\nnew InputOption('prefer-source', null, InputOption::VALUE_NONE, 'Forces installation from package sources when possible, including VCS information.'),\nnew InputOption('prefer-dist', null, InputOption::VALUE_NONE, 'Forces installation from package dist even for dev versions.'),\nnew InputOption('dry-run', null, InputOption::VALUE_NONE, 'Outputs the operations but will not execute anything (implicitly enables --verbose).'),\nnew InputOption('dev', null, InputOption::VALUE_NONE, 'Enables installation of require-dev packages (enabled by default, only present for BC).'),\nnew InputOption('no-dev', null, InputOption::VALUE_NONE, 'Disables installation of require-dev packages.'),\nnew InputOption('no-custom-installers', null, InputOption::VALUE_NONE, 'Disables all custom installers.'),\nnew InputOption('no-scripts', null, InputOption::VALUE_NONE, 'Skips the execution of all scripts defined in composer.json file.'),\nnew InputOption('no-progress', null, InputOption::VALUE_NONE, 'Do not output download progress.'),\nnew InputOption('verbose', 'v|vv|vvv', InputOption::VALUE_NONE, 'Shows more details including new commits pulled in when updating packages.'),\nnew InputOption('optimize-autoloader', 'o', InputOption::VALUE_NONE, 'Optimize autoloader during autoloader dump')\n))\n->setHelp(<<<EOT\nThe <info>install</info> command reads the composer.lock file from\nthe current directory, processes it, and downloads and installs all the\nlibraries and dependencies outlined in that file. If the file does not\nexist it will look for composer.json and do the same.\n\n<info>php composer.phar install</info>\n\nEOT\n)\n;\n}\n\nprotected function execute(InputInterface $input, OutputInterface $output)\n{\n$composer = $this->getComposer();\n$composer->getDownloadManager()->setOutputProgress(!$input->getOption('no-progress'));\n$io = $this->getIO();\n$install = Installer::create($io, $composer);\n\n$preferSource = false;\n$preferDist = false;\nswitch ($composer->getConfig()->get('preferred-install')) {\ncase 'source':\n$preferSource = true;\nbreak;\ncase 'dist':\n$preferDist = true;\nbreak;\ncase 'auto':\ndefault:\n\n break;\n}\nif ($input->getOption('prefer-source') || $input->getOption('prefer-dist')) {\n$preferSource = $input->getOption('prefer-source');\n$preferDist = $input->getOption('prefer-dist');\n}\n\n$install\n->setDryRun($input->getOption('dry-run'))\n->setVerbose($input->getOption('verbose'))\n->setPreferSource($preferSource)\n->setPreferDist($preferDist)\n->setDevMode(!$input->getOption('no-dev'))\n->setRunScripts(!$input->getOption('no-scripts'))\n->setOptimizeAutoloader($input->getOption('optimize-autoloader'))\n;\n\nif ($input->getOption('no-custom-installers')) {\n$install->disableCustomInstallers();\n}\n\nreturn $install->run() ? 0 : 1;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Command;\n\nuse Composer\\Util\\ConfigValidator;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n\n\n\n\n\n\nclass ValidateCommand extends Command\n{\n\n\n\nprotected function configure()\n{\n$this\n->setName('validate')\n->setDescription('Validates a composer.json')\n->setDefinition(array(\nnew InputArgument('file', InputArgument::OPTIONAL, 'path to composer.json file', './composer.json')\n))\n->setHelp(<<<EOT\nThe validate command validates a given composer.json\n\nEOT\n);\n}\n\n\n\n\n\n\n\nprotected function execute(InputInterface $input, OutputInterface $output)\n{\n$file = $input->getArgument('file');\n\nif (!file_exists($file)) {\n$output->writeln('<error>' . $file . ' not found.</error>');\n\nreturn 1;\n}\nif (!is_readable($file)) {\n$output->writeln('<error>' . $file . ' is not readable.</error>');\n\nreturn 1;\n}\n\n$validator = new ConfigValidator($this->getIO());\nlist($errors, $publishErrors, $warnings) = $validator->validate($file);\n\n\n if (!$errors && !$publishErrors && !$warnings) {\n$output->writeln('<info>' . $file . ' is valid</info>');\n} elseif (!$errors && !$publishErrors) {\n$output->writeln('<info>' . $file . ' is valid, but with a few warnings</info>');\n$output->writeln('<warning>See http://getcomposer.org/doc/04-schema.md for details on the schema</warning>');\n} elseif (!$errors) {\n$output->writeln('<info>' . $file . ' is valid for simple usage with composer but has</info>');\n$output->writeln('<info>strict errors that make it unable to be published as a package:</info>');\n$output->writeln('<warning>See http://getcomposer.org/doc/04-schema.md for details on the schema</warning>');\n} else {\n$output->writeln('<error>' . $file . ' is invalid, the following errors/warnings were found:</error>');\n}\n\n$messages = array(\n'error' => array_merge($errors, $publishErrors),\n'warning' => $warnings,\n);\n\nforeach ($messages as $style => $msgs) {\nforeach ($msgs as $msg) {\n$output->writeln('<' . $style . '>' . $msg . '</' . $style . '>');\n}\n}\n\nreturn $errors || $publishErrors ? 1 : 0;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Command;\n\nuse Composer\\DependencyResolver\\Pool;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n\n\n\n\nclass DependsCommand extends Command\n{\nprotected $linkTypes = array(\n'require' => array('requires', 'requires'),\n'require-dev' => array('devRequires', 'requires (dev)'),\n);\n\nprotected function configure()\n{\n$this\n->setName('depends')\n->setDescription('Shows which packages depend on the given package')\n->setDefinition(array(\nnew InputArgument('package', InputArgument::REQUIRED, 'Package to inspect'),\nnew InputOption('link-type', '', InputOption::VALUE_REQUIRED | InputOption::VALUE_IS_ARRAY, 'Link types to show (require, require-dev)', array_keys($this->linkTypes)),\n))\n->setHelp(<<<EOT\nDisplays detailed information about where a package is referenced.\n\n<info>php composer.phar depends composer/composer</info>\n\nEOT\n)\n;\n}\n\nprotected function execute(InputInterface $input, OutputInterface $output)\n{\n$repo = $this->getComposer()->getRepositoryManager()->getLocalRepository();\n$needle = $input->getArgument('package');\n\n$pool = new Pool();\n$pool->addRepository($repo);\n\n$packages = $pool->whatProvides($needle);\nif (empty($packages)) {\nthrow new \\InvalidArgumentException('Could not find package \"'.$needle.'\" in your project.');\n}\n\n$linkTypes = $this->linkTypes;\n\n$types = array_map(function ($type) use ($linkTypes) {\n$type = rtrim($type, 's');\nif (!isset($linkTypes[$type])) {\nthrow new \\InvalidArgumentException('Unexpected link type: '.$type.', valid types: '.implode(', ', array_keys($linkTypes)));\n}\n\nreturn $type;\n}, $input->getOption('link-type'));\n\n$messages = array();\n$outputPackages = array();\nforeach ($repo->getPackages() as $package) {\nforeach ($types as $type) {\nforeach ($package->{'get'.$linkTypes[$type][0]}() as $link) {\nif ($link->getTarget() === $needle) {\nif (!isset($outputPackages[$package->getName()])) {\n$messages[] = '<info>'.$package->getPrettyName() . '</info> ' . $linkTypes[$type][1] . ' ' . $needle .' (<info>' . $link->getPrettyConstraint() . '</info>)';\n$outputPackages[$package->getName()] = true;\n}\n}\n}\n}\n}\n\nif ($messages) {\nsort($messages);\n$output->writeln($messages);\n} else {\n$output->writeln('<info>There is no installed package depending on \"'.$needle.'\".</info>');\n}\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Command;\n\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Composer\\Repository\\CompositeRepository;\nuse Composer\\Repository\\PlatformRepository;\nuse Composer\\Repository\\RepositoryInterface;\nuse Composer\\Factory;\n\n\n\n\nclass SearchCommand extends Command\n{\nprotected $matches;\nprotected $lowMatches = array();\nprotected $tokens;\nprotected $output;\nprotected $onlyName;\n\nprotected function configure()\n{\n$this\n->setName('search')\n->setDescription('Search for packages')\n->setDefinition(array(\nnew InputOption('only-name', 'N', InputOption::VALUE_NONE, 'Search only in name'),\nnew InputArgument('tokens', InputArgument::IS_ARRAY | InputArgument::REQUIRED, 'tokens to search for'),\n))\n->setHelp(<<<EOT\nThe search command searches for packages by its name\n<info>php composer.phar search symfony composer</info>\n\nEOT\n)\n;\n}\n\nprotected function execute(InputInterface $input, OutputInterface $output)\n{\n\n $platformRepo = new PlatformRepository;\nif ($composer = $this->getComposer(false)) {\n$localRepo = $composer->getRepositoryManager()->getLocalRepository();\n$installedRepo = new CompositeRepository(array($localRepo, $platformRepo));\n$repos = new CompositeRepository(array_merge(array($installedRepo), $composer->getRepositoryManager()->getRepositories()));\n} else {\n$defaultRepos = Factory::createDefaultRepositories($this->getIO());\n$output->writeln('No composer.json found in the current directory, showing packages from ' . implode(', ', array_keys($defaultRepos)));\n$installedRepo = $platformRepo;\n$repos = new CompositeRepository(array_merge(array($installedRepo), $defaultRepos));\n}\n\n$onlyName = $input->getOption('only-name');\n\n$flags = $onlyName ? RepositoryInterface::SEARCH_NAME : RepositoryInterface::SEARCH_FULLTEXT;\n$results = $repos->search(implode(' ', $input->getArgument('tokens')), $flags);\n\nforeach ($results as $result) {\n$output->writeln($result['name'] . (isset($result['description']) ? ' '. $result['description'] : ''));\n}\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Command;\n\nuse Composer\\Composer;\nuse Composer\\Util\\RemoteFilesystem;\nuse Composer\\Downloader\\FilesystemException;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n\n\n\nclass SelfUpdateCommand extends Command\n{\nprotected function configure()\n{\n$this\n->setName('self-update')\n->setAliases(array('selfupdate'))\n->setDescription('Updates composer.phar to the latest version.')\n->setHelp(<<<EOT\nThe <info>self-update</info> command checks getcomposer.org for newer\nversions of composer and if found, installs the latest.\n\n<info>php composer.phar self-update</info>\n\nEOT\n)\n;\n}\n\nprotected function execute(InputInterface $input, OutputInterface $output)\n{\n$localFilename = realpath($_SERVER['argv'][0]) ?: $_SERVER['argv'][0];\n$tempFilename = dirname($localFilename) . '/' . basename($localFilename, '.phar').'-temp.phar';\n\n\n if (!is_writable($tempDirectory = dirname($tempFilename))) {\nthrow new FilesystemException('Composer update failed: the \"'.$tempDirectory.'\" directory used to download the temp file could not be written');\n}\n\nif (!is_writable($localFilename)) {\nthrow new FilesystemException('Composer update failed: the \"'.$localFilename. '\" file could not be written');\n}\n\n$protocol = extension_loaded('openssl') ? 'https' : 'http';\n$rfs = new RemoteFilesystem($this->getIO());\n$latest = trim($rfs->getContents('getcomposer.org', $protocol . '://getcomposer.org/version', false));\n\nif (Composer::VERSION !== $latest) {\n$output->writeln(sprintf(\"Updating to version <info>%s</info>.\", $latest));\n\n$remoteFilename = $protocol . '://getcomposer.org/composer.phar';\n\n$rfs->copy('getcomposer.org', $remoteFilename, $tempFilename);\n\nif (!file_exists($tempFilename)) {\n$output->writeln('<error>The download of the new composer version failed for an unexpected reason');\n\nreturn 1;\n}\n\ntry {\nchmod($tempFilename, 0777 & ~umask());\n\n $phar = new \\Phar($tempFilename);\n\n unset($phar);\nrename($tempFilename, $localFilename);\n} catch (\\Exception $e) {\n@unlink($tempFilename);\nif (!$e instanceof \\UnexpectedValueException && !$e instanceof \\PharException) {\nthrow $e;\n}\n$output->writeln('<error>The download is corrupted ('.$e->getMessage().').</error>');\n$output->writeln('<error>Please re-run the self-update command to try again.</error>');\n}\n} else {\n$output->writeln(\"<info>You are using the latest composer version.</info>\");\n}\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Command;\n\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Composer\\Factory;\nuse Composer\\Installer;\nuse Composer\\Json\\JsonFile;\nuse Composer\\Json\\JsonManipulator;\n\n\n\n\n\nclass RequireCommand extends InitCommand\n{\nprotected function configure()\n{\n$this\n->setName('require')\n->setDescription('Adds required packages to your composer.json and installs them')\n->setDefinition(array(\nnew InputArgument('packages', InputArgument::IS_ARRAY | InputArgument::OPTIONAL, 'Required package with a version constraint, e.g. foo/bar:1.0.0 or foo/bar=1.0.0 or \"foo/bar 1.0.0\"'),\nnew InputOption('dev', null, InputOption::VALUE_NONE, 'Add requirement to require-dev.'),\nnew InputOption('prefer-source', null, InputOption::VALUE_NONE, 'Forces installation from package sources when possible, including VCS information.'),\nnew InputOption('prefer-dist', null, InputOption::VALUE_NONE, 'Forces installation from package dist even for dev versions.'),\nnew InputOption('no-progress', null, InputOption::VALUE_NONE, 'Do not output download progress.'),\nnew InputOption('no-update', null, InputOption::VALUE_NONE, 'Disables the automatic update of the dependencies.'),\n))\n->setHelp(<<<EOT\nThe require command adds required packages to your composer.json and installs them\n\nIf you do not want to install the new dependencies immediately you can call it with --no-update\n\nEOT\n)\n;\n}\n\nprotected function execute(InputInterface $input, OutputInterface $output)\n{\n$file = Factory::getComposerFile();\n\nif (!file_exists($file) && !file_put_contents($file, \"{\\n}\\n\")) {\n$output->writeln('<error>'.$file.' could not be created.</error>');\n\nreturn 1;\n}\nif (!is_readable($file)) {\n$output->writeln('<error>'.$file.' is not readable.</error>');\n\nreturn 1;\n}\nif (!is_writable($file)) {\n$output->writeln('<error>'.$file.' is not writable.</error>');\n\nreturn 1;\n}\n\n$json = new JsonFile($file);\n$composer = $json->read();\n$composerBackup = file_get_contents($json->getPath());\n\n$requirements = $this->determineRequirements($input, $output, $input->getArgument('packages'));\n\n$requireKey = $input->getOption('dev') ? 'require-dev' : 'require';\n$baseRequirements = array_key_exists($requireKey, $composer) ? $composer[$requireKey] : array();\n$requirements = $this->formatRequirements($requirements);\n\nif (!$this->updateFileCleanly($json, $baseRequirements, $requirements, $requireKey)) {\nforeach ($requirements as $package => $version) {\n$baseRequirements[$package] = $version;\n}\n\n$composer[$requireKey] = $baseRequirements;\n$json->write($composer);\n}\n\n$output->writeln('<info>'.$file.' has been updated</info>');\n\nif ($input->getOption('no-update')) {\nreturn 0;\n}\n\n\n $composer = $this->getComposer();\n$composer->getDownloadManager()->setOutputProgress(!$input->getOption('no-progress'));\n$io = $this->getIO();\n$install = Installer::create($io, $composer);\n\n$install\n->setVerbose($input->getOption('verbose'))\n->setPreferSource($input->getOption('prefer-source'))\n->setPreferDist($input->getOption('prefer-dist'))\n->setDevMode(true)\n->setUpdate(true)\n->setUpdateWhitelist(array_keys($requirements));\n;\n\nif (!$install->run()) {\n$output->writeln(\"\\n\".'<error>Installation failed, reverting '.$file.' to its original content.</error>');\nfile_put_contents($json->getPath(), $composerBackup);\n\nreturn 1;\n}\n\nreturn 0;\n}\n\nprivate function updateFileCleanly($json, array $base, array $new, $requireKey)\n{\n$contents = file_get_contents($json->getPath());\n\n$manipulator = new JsonManipulator($contents);\n\nforeach ($new as $package => $constraint) {\nif (!$manipulator->addLink($requireKey, $package, $constraint)) {\nreturn false;\n}\n}\n\nfile_put_contents($json->getPath(), $manipulator->getContents());\n\nreturn true;\n}\n\nprotected function interact(InputInterface $input, OutputInterface $output)\n{\nreturn;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Command;\n\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n\n\n\nclass DumpAutoloadCommand extends Command\n{\nprotected function configure()\n{\n$this\n->setName('dump-autoload')\n->setAliases(array('dumpautoload'))\n->setDescription('Dumps the autoloader')\n->setDefinition(array(\nnew InputOption('optimize', 'o', InputOption::VALUE_NONE, 'Optimizes PSR0 packages to be loaded with classmaps too, good for production.'),\n))\n->setHelp(<<<EOT\n<info>php composer.phar dump-autoload</info>\nEOT\n)\n;\n}\n\nprotected function execute(InputInterface $input, OutputInterface $output)\n{\n$output->writeln('<info>Generating autoload files</info>');\n\n$composer = $this->getComposer();\n$installationManager = $composer->getInstallationManager();\n$localRepo = $composer->getRepositoryManager()->getLocalRepository();\n$package = $composer->getPackage();\n$config = $composer->getConfig();\n\n$composer->getAutoloadGenerator()->dump($config, $localRepo, $package, $installationManager, 'composer', $input->getOption('optimize'));\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Command\\Helper;\n\nuse Symfony\\Component\\Console\\Helper\\DialogHelper as BaseDialogHelper;\n\nclass DialogHelper extends BaseDialogHelper\n{\n\n\n\n\n\n\n\n\n\n\n\npublic function getQuestion($question, $default = null, $sep = ':')\n{\nreturn $default !== null ?\nsprintf('<info>%s</info> [<comment>%s</comment>]%s ', $question, $default, $sep) :\nsprintf('<info>%s</info>%s ', $question, $sep);\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Command;\n\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Composer\\Downloader\\VcsDownloader;\n\n\n\n\n\nclass StatusCommand extends Command\n{\nprotected function configure()\n{\n$this\n->setName('status')\n->setDescription('Show a list of locally modified packages')\n->setDefinition(array(\nnew InputOption('verbose', 'v|vv|vvv', InputOption::VALUE_NONE, 'Show modified files for each directory that contains changes.'),\n))\n->setHelp(<<<EOT\nThe status command displays a list of dependencies that have\nbeen modified locally.\n\nEOT\n)\n;\n}\n\nprotected function execute(InputInterface $input, OutputInterface $output)\n{\n\n $composer = $this->getComposer();\n$installedRepo = $composer->getRepositoryManager()->getLocalRepository();\n\n$dm = $composer->getDownloadManager();\n$im = $composer->getInstallationManager();\n\n$errors = array();\n\n\n foreach ($installedRepo->getPackages() as $package) {\n$downloader = $dm->getDownloaderForInstalledPackage($package);\n\nif ($downloader instanceof VcsDownloader) {\n$targetDir = $im->getInstallPath($package);\n\nif ($changes = $downloader->getLocalChanges($targetDir)) {\n$errors[$targetDir] = $changes;\n}\n}\n}\n\n\n if (!$errors) {\n$output->writeln('<info>No local changes</info>');\n} else {\n$output->writeln('<error>You have changes in the following dependencies:</error>');\n}\n\nforeach ($errors as $path => $changes) {\nif ($input->getOption('verbose')) {\n$indentedChanges = implode(\"\\n\", array_map(function ($line) {\nreturn '    ' . $line;\n}, explode(\"\\n\", $changes)));\n$output->writeln('<info>'.$path.'</info>:');\n$output->writeln($indentedChanges);\n} else {\n$output->writeln($path);\n}\n}\n\nif ($errors && !$input->getOption('verbose')) {\n$output->writeln('Use --verbose (-v) to see modified files');\n}\n\nreturn $errors ? 1 : 0;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Command;\n\nuse Composer\\Json\\JsonFile;\nuse Composer\\Factory;\nuse Composer\\Package\\BasePackage;\nuse Composer\\Repository\\CompositeRepository;\nuse Composer\\Repository\\PlatformRepository;\nuse Composer\\Package\\Version\\VersionParser;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\Process\\Process;\nuse Symfony\\Component\\Process\\ExecutableFinder;\n\n\n\n\n\nclass InitCommand extends Command\n{\nprivate $gitConfig;\nprivate $repos;\n\npublic function parseAuthorString($author)\n{\nif (preg_match('/^(?P<name>[- \\.,\\w\\'’]+) <(?P<email>.+?)>$/u', $author, $match)) {\nif ($this->isValidEmail($match['email'])) {\nreturn array(\n'name' => trim($match['name']),\n'email' => $match['email']\n);\n}\n}\n\nthrow new \\InvalidArgumentException(\n'Invalid author string.  Must be in the format: '.\n'John Smith <john@example.com>'\n);\n}\n\nprotected function configure()\n{\n$this\n->setName('init')\n->setDescription('Creates a basic composer.json file in current directory.')\n->setDefinition(array(\nnew InputOption('name', null, InputOption::VALUE_REQUIRED, 'Name of the package'),\nnew InputOption('description', null, InputOption::VALUE_REQUIRED, 'Description of package'),\nnew InputOption('author', null, InputOption::VALUE_REQUIRED, 'Author name of package'),\n\n new InputOption('homepage', null, InputOption::VALUE_REQUIRED, 'Homepage of package'),\nnew InputOption('require', null, InputOption::VALUE_IS_ARRAY | InputOption::VALUE_REQUIRED, 'Package to require with a version constraint, e.g. foo/bar:1.0.0 or foo/bar=1.0.0 or \"foo/bar 1.0.0\"'),\nnew InputOption('require-dev', null, InputOption::VALUE_IS_ARRAY | InputOption::VALUE_REQUIRED, 'Package to require for development with a version constraint, e.g. foo/bar:1.0.0 or foo/bar=1.0.0 or \"foo/bar 1.0.0\"'),\nnew InputOption('stability', 's', InputOption::VALUE_REQUIRED, 'Minimum stability (empty or one of: '.implode(', ', array_keys(BasePackage::$stabilities)).')'),\nnew InputOption('license', 'l', InputOption::VALUE_REQUIRED, 'License of package'),\n))\n->setHelp(<<<EOT\nThe <info>init</info> command creates a basic composer.json file\nin the current directory.\n\n<info>php composer.phar init</info>\n\nEOT\n)\n;\n}\n\nprotected function execute(InputInterface $input, OutputInterface $output)\n{\n$dialog = $this->getHelperSet()->get('dialog');\n\n$whitelist = array('name', 'description', 'author', 'homepage', 'require', 'require-dev', 'stability', 'license');\n\n$options = array_filter(array_intersect_key($input->getOptions(), array_flip($whitelist)));\n\nif (isset($options['author'])) {\n$options['authors'] = $this->formatAuthors($options['author']);\nunset($options['author']);\n}\n\nif (isset($options['stability'])) {\n$options['minimum-stability'] = $options['stability'];\nunset($options['stability']);\n}\n\n$options['require'] = isset($options['require']) ? $this->formatRequirements($options['require']) : new \\stdClass;\nif (array() === $options['require']) {\n$options['require'] = new \\stdClass;\n}\n\nif (isset($options['require-dev'])) {\n$options['require-dev'] = $this->formatRequirements($options['require-dev']) ;\nif (array() === $options['require-dev']) {\n$options['require-dev'] = new \\stdClass;\n}\n}\n\n$file = new JsonFile('composer.json');\n\n$json = $file->encode($options);\n\nif ($input->isInteractive()) {\n$output->writeln(array(\n'',\n$json,\n''\n));\nif (!$dialog->askConfirmation($output, $dialog->getQuestion('Do you confirm generation', 'yes', '?'), true)) {\n$output->writeln('<error>Command aborted</error>');\n\nreturn 1;\n}\n}\n\n$file->write($options);\n\nif ($input->isInteractive() && is_dir('.git')) {\n$ignoreFile = realpath('.gitignore');\n\nif (false === $ignoreFile) {\n$ignoreFile = realpath('.') . '/.gitignore';\n}\n\nif (!$this->hasVendorIgnore($ignoreFile)) {\n$question = 'Would you like the <info>vendor</info> directory added to your <info>.gitignore</info> [<comment>yes</comment>]?';\n\nif ($dialog->askConfirmation($output, $question, true)) {\n$this->addVendorIgnore($ignoreFile);\n}\n}\n}\n}\n\nprotected function interact(InputInterface $input, OutputInterface $output)\n{\n$git = $this->getGitConfig();\n\n$dialog = $this->getHelperSet()->get('dialog');\n$formatter = $this->getHelperSet()->get('formatter');\n$output->writeln(array(\n'',\n$formatter->formatBlock('Welcome to the Composer config generator', 'bg=blue;fg=white', true),\n''\n));\n\n\n $output->writeln(array(\n'',\n'This command will guide you through creating your composer.json config.',\n'',\n));\n\n$cwd = realpath(\".\");\n\nif (!$name = $input->getOption('name')) {\n$name = basename($cwd);\n$name = preg_replace('{(?:([a-z])([A-Z])|([A-Z])([A-Z][a-z]))}', '\\\\1\\\\3-\\\\2\\\\4', $name);\n$name = strtolower($name);\nif (isset($git['github.user'])) {\n$name = $git['github.user'] . '/' . $name;\n} elseif (!empty($_SERVER['USERNAME'])) {\n$name = $_SERVER['USERNAME'] . '/' . $name;\n} elseif (get_current_user()) {\n$name = get_current_user() . '/' . $name;\n} else {\n\n $name = $name . '/' . $name;\n}\n} else {\nif (!preg_match('{^[a-z0-9_.-]+/[a-z0-9_.-]+$}', $name)) {\nthrow new \\InvalidArgumentException(\n'The package name '.$name.' is invalid, it should be lowercase and have a vendor name, a forward slash, and a package name, matching: [a-z0-9_.-]+/[a-z0-9_.-]+'\n);\n}\n}\n\n$name = $dialog->askAndValidate(\n$output,\n$dialog->getQuestion('Package name (<vendor>/<name>)', $name),\nfunction ($value) use ($name) {\nif (null === $value) {\nreturn $name;\n}\n\nif (!preg_match('{^[a-z0-9_.-]+/[a-z0-9_.-]+$}', $value)) {\nthrow new \\InvalidArgumentException(\n'The package name '.$value.' is invalid, it should be lowercase and have a vendor name, a forward slash, and a package name, matching: [a-z0-9_.-]+/[a-z0-9_.-]+'\n);\n}\n\nreturn $value;\n}\n);\n$input->setOption('name', $name);\n\n$description = $input->getOption('description') ?: false;\n$description = $dialog->ask(\n$output,\n$dialog->getQuestion('Description', $description)\n);\n$input->setOption('description', $description);\n\nif (null === $author = $input->getOption('author')) {\nif (isset($git['user.name']) && isset($git['user.email'])) {\n$author = sprintf('%s <%s>', $git['user.name'], $git['user.email']);\n}\n}\n\n$self = $this;\n$author = $dialog->askAndValidate(\n$output,\n$dialog->getQuestion('Author', $author),\nfunction ($value) use ($self, $author) {\nif (null === $value) {\nreturn $author;\n}\n\n$author = $self->parseAuthorString($value);\n\nreturn sprintf('%s <%s>', $author['name'], $author['email']);\n}\n);\n$input->setOption('author', $author);\n\n$minimumStability = $input->getOption('stability') ?: '';\n$minimumStability = $dialog->askAndValidate(\n$output,\n$dialog->getQuestion('Minimum Stability', $minimumStability),\nfunction ($value) use ($self, $minimumStability) {\nif (null === $value) {\nreturn $minimumStability;\n}\n\nif (!isset(BasePackage::$stabilities[$value])) {\nthrow new \\InvalidArgumentException(\n'Invalid minimum stability \"'.$value.'\". Must be empty or one of: '.\nimplode(', ', array_keys(BasePackage::$stabilities))\n);\n}\n\nreturn $value;\n}\n);\n$input->setOption('stability', $minimumStability);\n\n$license = $input->getOption('license') ?: false;\n$license = $dialog->ask(\n$output,\n$dialog->getQuestion('License', $license)\n);\n$input->setOption('license', $license);\n\n$output->writeln(array(\n'',\n'Define your dependencies.',\n''\n));\n\n$requirements = array();\nif ($dialog->askConfirmation($output, $dialog->getQuestion('Would you like to define your dependencies (require) interactively', 'yes', '?'), true)) {\n$requirements = $this->determineRequirements($input, $output, $input->getOption('require'));\n}\n$input->setOption('require', $requirements);\n$devRequirements = array();\nif ($dialog->askConfirmation($output, $dialog->getQuestion('Would you like to define your dev dependencies (require-dev) interactively', 'yes', '?'), true)) {\n$devRequirements = $this->determineRequirements($input, $output, $input->getOption('require-dev'));\n}\n$input->setOption('require-dev', $devRequirements);\n}\n\nprotected function findPackages($name)\n{\n$packages = array();\n\n\n if (!$this->repos) {\n$this->repos = new CompositeRepository(array_merge(\narray(new PlatformRepository),\nFactory::createDefaultRepositories($this->getIO())\n));\n}\n\nreturn $this->repos->search($name);\n}\n\nprotected function determineRequirements(InputInterface $input, OutputInterface $output, $requires = array())\n{\n$dialog = $this->getHelperSet()->get('dialog');\n$prompt = $dialog->getQuestion('Search for a package', false, ':');\n\nif ($requires) {\n$requires = $this->normalizeRequirements($requires);\n$result = array();\n\nforeach ($requires as $key => $requirement) {\nif (!isset($requirement['version']) && $input->isInteractive()) {\n$question = $dialog->getQuestion('Please provide a version constraint for the '.$requirement['name'].' requirement');\nif ($constraint = $dialog->ask($output, $question)) {\n$requirement['version'] = $constraint;\n}\n}\nif (!isset($requirement['version'])) {\nthrow new \\InvalidArgumentException('The requirement '.$requirement['name'].' must contain a version constraint');\n}\n\n$result[] = $requirement['name'] . ' ' . $requirement['version'];\n}\n\nreturn $result;\n}\n\nwhile (null !== $package = $dialog->ask($output, $prompt)) {\n$matches = $this->findPackages($package);\n\nif (count($matches)) {\n$output->writeln(array(\n'',\nsprintf('Found <info>%s</info> packages matching <info>%s</info>', count($matches), $package),\n''\n));\n\n$exactMatch = null;\n$choices = array();\nforeach ($matches as $position => $package) {\n$choices[] = sprintf(' <info>%5s</info> %s', \"[$position]\", $package['name']);\nif ($package['name'] === $package) {\n$exactMatch = true;\nbreak;\n}\n}\n\n\n if (!$exactMatch) {\n$output->writeln($choices);\n$output->writeln('');\n\n$validator = function ($selection) use ($matches) {\nif ('' === $selection) {\nreturn false;\n}\n\nif (!is_numeric($selection) && preg_match('{^\\s*(\\S+)\\s+(\\S.*)\\s*$}', $selection, $matches)) {\nreturn $matches[1].' '.$matches[2];\n}\n\nif (!isset($matches[(int) $selection])) {\nthrow new \\Exception('Not a valid selection');\n}\n\n$package = $matches[(int) $selection];\n\nreturn $package['name'];\n};\n\n$package = $dialog->askAndValidate($output, $dialog->getQuestion('Enter package # to add, or the complete package name if it is not listed', false, ':'), $validator, 3);\n}\n\n\n if (false !== $package && false === strpos($package, ' ')) {\n$validator = function ($input) {\n$input = trim($input);\n\nreturn $input ?: false;\n};\n\n$constraint = $dialog->askAndValidate($output, $dialog->getQuestion('Enter the version constraint to require', false, ':'), $validator, 3);\nif (false === $constraint) {\ncontinue;\n}\n\n$package .= ' '.$constraint;\n}\n\nif (false !== $package) {\n$requires[] = $package;\n}\n}\n}\n\nreturn $requires;\n}\n\nprotected function formatAuthors($author)\n{\nreturn array($this->parseAuthorString($author));\n}\n\nprotected function formatRequirements(array $requirements)\n{\n$requires = array();\n$requirements = $this->normalizeRequirements($requirements);\nforeach ($requirements as $requirement) {\n$requires[$requirement['name']] = $requirement['version'];\n}\n\nreturn $requires;\n}\n\nprotected function getGitConfig()\n{\nif (null !== $this->gitConfig) {\nreturn $this->gitConfig;\n}\n\n$finder = new ExecutableFinder();\n$gitBin = $finder->find('git');\n\n$cmd = new Process(sprintf('%s config -l', escapeshellarg($gitBin)));\n$cmd->run();\n\nif ($cmd->isSuccessful()) {\n$this->gitConfig = array();\npreg_match_all('{^([^=]+)=(.*)$}m', $cmd->getOutput(), $matches, PREG_SET_ORDER);\nforeach ($matches as $match) {\n$this->gitConfig[$match[1]] = $match[2];\n}\n\nreturn $this->gitConfig;\n}\n\nreturn $this->gitConfig = array();\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nprotected function hasVendorIgnore($ignoreFile, $vendor = 'vendor')\n{\nif (!file_exists($ignoreFile)) {\nreturn false;\n}\n\n$pattern = sprintf('{^/?%s(/\\*?)?$}', preg_quote($vendor));\n\n$lines = file($ignoreFile, FILE_IGNORE_NEW_LINES);\nforeach ($lines as $line) {\nif (preg_match($pattern, $line)) {\nreturn true;\n}\n}\n\nreturn false;\n}\n\nprotected function normalizeRequirements(array $requirements)\n{\n$parser = new VersionParser();\n\nreturn $parser->parseNameVersionPairs($requirements);\n}\n\nprotected function addVendorIgnore($ignoreFile, $vendor = '/vendor/')\n{\n$contents = \"\";\nif (file_exists($ignoreFile)) {\n$contents = file_get_contents($ignoreFile);\n\nif (\"\\n\" !== substr($contents, 0, -1)) {\n$contents .= \"\\n\";\n}\n}\n\nfile_put_contents($ignoreFile, $contents . $vendor. \"\\n\");\n}\n\nprotected function isValidEmail($email)\n{\n\n if (!function_exists('filter_var')) {\nreturn true;\n}\n\n\n if (version_compare(PHP_VERSION, '5.3.3', '<')) {\nreturn true;\n}\n\nreturn false !== filter_var($email, FILTER_VALIDATE_EMAIL);\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Downloader;\n\nuse Composer\\Config;\nuse Composer\\Package\\PackageInterface;\nuse Composer\\Package\\Version\\VersionParser;\nuse Composer\\Util\\ProcessExecutor;\nuse Composer\\IO\\IOInterface;\nuse Composer\\Util\\Filesystem;\n\n\n\n\nabstract class VcsDownloader implements DownloaderInterface\n{\nprotected $io;\nprotected $config;\nprotected $process;\nprotected $filesystem;\n\npublic function __construct(IOInterface $io, Config $config, ProcessExecutor $process = null, Filesystem $fs = null)\n{\n$this->io = $io;\n$this->config = $config;\n$this->process = $process ?: new ProcessExecutor($io);\n$this->filesystem = $fs ?: new Filesystem;\n}\n\n\n\n\npublic function getInstallationSource()\n{\nreturn 'source';\n}\n\n\n\n\npublic function download(PackageInterface $package, $path)\n{\nif (!$package->getSourceReference()) {\nthrow new \\InvalidArgumentException('Package '.$package->getPrettyName().' is missing reference information');\n}\n\n$this->io->write(\"  - Installing <info>\" . $package->getName() . \"</info> (<comment>\" . VersionParser::formatVersion($package) . \"</comment>)\");\n$this->filesystem->removeDirectory($path);\n$this->doDownload($package, $path);\n$this->io->write('');\n}\n\n\n\n\npublic function update(PackageInterface $initial, PackageInterface $target, $path)\n{\nif (!$target->getSourceReference()) {\nthrow new \\InvalidArgumentException('Package '.$target->getPrettyName().' is missing reference information');\n}\n\n$name = $target->getName();\nif ($initial->getPrettyVersion() == $target->getPrettyVersion()) {\nif ($target->getSourceType() === 'svn') {\n$from = $initial->getSourceReference();\n$to = $target->getSourceReference();\n} else {\n$from = substr($initial->getSourceReference(), 0, 7);\n$to = substr($target->getSourceReference(), 0, 7);\n}\n$name .= ' '.$initial->getPrettyVersion();\n} else {\n$from = VersionParser::formatVersion($initial);\n$to = VersionParser::formatVersion($target);\n}\n\n$this->io->write(\"  - Updating <info>\" . $name . \"</info> (<comment>\" . $from . \"</comment> => <comment>\" . $to . \"</comment>)\");\n\n$this->cleanChanges($path, true);\ntry {\n$this->doUpdate($initial, $target, $path);\n} catch (\\Exception $e) {\n\n $this->reapplyChanges($path);\n\nthrow $e;\n}\n$this->reapplyChanges($path);\n\n\n if ($this->io->isVerbose()) {\n$message = 'Pulling in changes:';\n$logs = $this->getCommitLogs($initial->getSourceReference(), $target->getSourceReference(), $path);\n\nif (!trim($logs)) {\n$message = 'Rolling back changes:';\n$logs = $this->getCommitLogs($target->getSourceReference(), $initial->getSourceReference(), $path);\n}\n\nif (trim($logs)) {\n$logs = implode(\"\\n\", array_map(function ($line) {\nreturn '      ' . $line;\n}, explode(\"\\n\", $logs)));\n\n$this->io->write('    '.$message);\n$this->io->write($logs);\n}\n}\n\n$this->io->write('');\n}\n\n\n\n\npublic function remove(PackageInterface $package, $path)\n{\n$this->io->write(\"  - Removing <info>\" . $package->getName() . \"</info> (<comment>\" . $package->getPrettyVersion() . \"</comment>)\");\n$this->cleanChanges($path, false);\nif (!$this->filesystem->removeDirectory($path)) {\n\n if (!defined('PHP_WINDOWS_VERSION_BUILD') || (usleep(250) && !$this->filesystem->removeDirectory($path))) {\nthrow new \\RuntimeException('Could not completely delete '.$path.', aborting.');\n}\n}\n}\n\n\n\n\n\npublic function setOutputProgress($outputProgress)\n{\nreturn $this;\n}\n\n\n\n\n\n\n\n\n\nprotected function cleanChanges($path, $update)\n{\n\n if (null !== $this->getLocalChanges($path)) {\nthrow new \\RuntimeException('Source directory ' . $path . ' has uncommitted changes.');\n}\n}\n\n\n\n\n\n\n\nprotected function reapplyChanges($path)\n{\n}\n\n\n\n\n\n\n\nabstract protected function doDownload(PackageInterface $package, $path);\n\n\n\n\n\n\n\n\nabstract protected function doUpdate(PackageInterface $initial, PackageInterface $target, $path);\n\n\n\n\n\n\n\nabstract public function getLocalChanges($path);\n\n\n\n\n\n\n\n\n\nabstract protected function getCommitLogs($fromReference, $toReference, $path);\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Downloader;\n\nuse Composer\\Config;\nuse Composer\\Cache;\nuse Composer\\IO\\IOInterface;\nuse Composer\\Package\\PackageInterface;\nuse Composer\\Package\\Version\\VersionParser;\nuse Composer\\Util\\Filesystem;\nuse Composer\\Util\\GitHub;\nuse Composer\\Util\\RemoteFilesystem;\n\n\n\n\n\n\n\n\nclass FileDownloader implements DownloaderInterface\n{\nprivate static $cacheCollected = false;\nprotected $io;\nprotected $config;\nprotected $rfs;\nprotected $filesystem;\nprotected $cache;\nprotected $outputProgress = true;\n\n\n\n\n\n\n\n\n\n\npublic function __construct(IOInterface $io, Config $config, Cache $cache = null, RemoteFilesystem $rfs = null, Filesystem $filesystem = null)\n{\n$this->io = $io;\n$this->config = $config;\n$this->rfs = $rfs ?: new RemoteFilesystem($io);\n$this->filesystem = $filesystem ?: new Filesystem();\n$this->cache = $cache;\n\nif ($this->cache && !self::$cacheCollected && !mt_rand(0, 50)) {\n$this->cache->gc($config->get('cache-ttl'), $config->get('cache-files-maxsize'));\n}\nself::$cacheCollected = true;\n}\n\n\n\n\npublic function getInstallationSource()\n{\nreturn 'dist';\n}\n\n\n\n\npublic function download(PackageInterface $package, $path)\n{\n$url = $package->getDistUrl();\nif (!$url) {\nthrow new \\InvalidArgumentException('The given package is missing url information');\n}\n\n$this->filesystem->ensureDirectoryExists($path);\n\n$fileName = $this->getFileName($package, $path);\n\n$this->io->write(\"  - Installing <info>\" . $package->getName() . \"</info> (<comment>\" . VersionParser::formatVersion($package) . \"</comment>)\");\n\n$processedUrl = $this->processUrl($package, $url);\n$hostname = parse_url($processedUrl, PHP_URL_HOST);\n\nif (strpos($hostname, '.github.com') === (strlen($hostname) - 11)) {\n$hostname = 'github.com';\n}\n\ntry {\ntry {\nif (!$this->cache || !$this->cache->copyTo($this->getCacheKey($package), $fileName)) {\nif (!$this->outputProgress) {\n$this->io->write('    Downloading');\n}\n\n\n $retries = 3;\nwhile ($retries--) {\ntry {\n$this->rfs->copy($hostname, $processedUrl, $fileName, $this->outputProgress);\nbreak;\n} catch (TransportException $e) {\n\n if (0 !== $e->getCode() || !$retries) {\nthrow $e;\n}\nif ($this->io->isVerbose()) {\n$this->io->write('    Download failed, retrying...');\n}\nusleep(500000);\n}\n}\n\nif ($this->cache) {\n$this->cache->copyFrom($this->getCacheKey($package), $fileName);\n}\n} else {\n$this->io->write('    Loading from cache');\n}\n} catch (TransportException $e) {\nif (in_array($e->getCode(), array(404, 403)) && 'github.com' === $hostname && !$this->io->hasAuthentication($hostname)) {\n$message = \"\\n\".'Could not fetch '.$processedUrl.', enter your GitHub credentials '.($e->getCode() === 404 ? 'to access private repos' : 'to go over the API rate limit');\n$gitHubUtil = new GitHub($this->io, $this->config, null, $this->rfs);\nif (!$gitHubUtil->authorizeOAuth($hostname)\n&& (!$this->io->isInteractive() || !$gitHubUtil->authorizeOAuthInteractively($hostname, $message))\n) {\nthrow $e;\n}\n$this->rfs->copy($hostname, $processedUrl, $fileName, $this->outputProgress);\n} else {\nthrow $e;\n}\n}\n\nif (!file_exists($fileName)) {\nthrow new \\UnexpectedValueException($url.' could not be saved to '.$fileName.', make sure the'\n.' directory is writable and you have internet connectivity');\n}\n\n$checksum = $package->getDistSha1Checksum();\nif ($checksum && hash_file('sha1', $fileName) !== $checksum) {\nthrow new \\UnexpectedValueException('The checksum verification of the file failed (downloaded from '.$url.')');\n}\n} catch (\\Exception $e) {\n\n $this->filesystem->removeDirectory($path);\n$this->clearCache($package, $path);\nthrow $e;\n}\n}\n\n\n\n\npublic function setOutputProgress($outputProgress)\n{\n$this->outputProgress = $outputProgress;\n\nreturn $this;\n}\n\nprotected function clearCache(PackageInterface $package, $path)\n{\nif ($this->cache) {\n$fileName = $this->getFileName($package, $path);\n$this->cache->remove($this->getCacheKey($package));\n}\n}\n\n\n\n\npublic function update(PackageInterface $initial, PackageInterface $target, $path)\n{\n$this->remove($initial, $path);\n$this->download($target, $path);\n}\n\n\n\n\npublic function remove(PackageInterface $package, $path)\n{\n$this->io->write(\"  - Removing <info>\" . $package->getName() . \"</info> (<comment>\" . VersionParser::formatVersion($package) . \"</comment>)\");\nif (!$this->filesystem->removeDirectory($path)) {\n\n if (!defined('PHP_WINDOWS_VERSION_BUILD') || (usleep(250000) && !$this->filesystem->removeDirectory($path))) {\nthrow new \\RuntimeException('Could not completely delete '.$path.', aborting.');\n}\n}\n}\n\n\n\n\n\n\n\n\nprotected function getFileName(PackageInterface $package, $path)\n{\nreturn $path.'/'.pathinfo(parse_url($package->getDistUrl(), PHP_URL_PATH), PATHINFO_BASENAME);\n}\n\n\n\n\n\n\n\n\n\n\nprotected function processUrl(PackageInterface $package, $url)\n{\nif (!extension_loaded('openssl') && 0 === strpos($url, 'https:')) {\nthrow new \\RuntimeException('You must enable the openssl extension to download files via https');\n}\n\nreturn $url;\n}\n\nprivate function getCacheKey(PackageInterface $package)\n{\nif (preg_match('{^[a-f0-9]{40}$}', $package->getDistReference())) {\nreturn $package->getName().'/'.$package->getDistReference().'.'.$package->getDistType();\n}\n\nreturn $package->getName().'/'.$package->getVersion().'-'.$package->getDistReference().'.'.$package->getDistType();\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Downloader;\n\nuse Composer\\Package\\PackageInterface;\nuse Composer\\Util\\Svn as SvnUtil;\n\n\n\n\n\nclass SvnDownloader extends VcsDownloader\n{\n\n\n\npublic function doDownload(PackageInterface $package, $path)\n{\n$url = $package->getSourceUrl();\n$ref = $package->getSourceReference();\n\n$this->io->write(\"    Checking out \".$package->getSourceReference());\n$this->execute($url, \"svn co\", sprintf(\"%s/%s\", $url, $ref), null, $path);\n}\n\n\n\n\npublic function doUpdate(PackageInterface $initial, PackageInterface $target, $path)\n{\n$url = $target->getSourceUrl();\n$ref = $target->getSourceReference();\n\n$this->io->write(\"    Checking out \" . $ref);\n$this->execute($url, \"svn switch\", sprintf(\"%s/%s\", $url, $ref), $path);\n}\n\n\n\n\npublic function getLocalChanges($path)\n{\nif (!is_dir($path.'/.svn')) {\nreturn;\n}\n\n$this->process->execute('svn status --ignore-externals', $output, $path);\n\nreturn preg_match('{^ *[^X ] +}m', $output) ? $output : null;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nprotected function execute($baseUrl, $command, $url, $cwd = null, $path = null)\n{\n$util = new SvnUtil($baseUrl, $this->io);\ntry {\nreturn $util->execute($command, $url, $cwd, $path, $this->io->isVerbose());\n} catch (\\RuntimeException $e) {\nthrow new \\RuntimeException(\n'Package could not be downloaded, '.$e->getMessage()\n);\n}\n}\n\n\n\n\nprotected function cleanChanges($path, $update)\n{\nif (!$changes = $this->getLocalChanges($path)) {\nreturn;\n}\n\nif (!$this->io->isInteractive()) {\nif (true === $this->config->get('discard-changes')) {\nreturn $this->discardChanges($path);\n}\n\nreturn parent::cleanChanges($path, $update);\n}\n\n$changes = array_map(function ($elem) {\nreturn '    '.$elem;\n}, preg_split('{\\s*\\r?\\n\\s*}', $changes));\n$this->io->write('    <error>The package has modified files:</error>');\n$this->io->write(array_slice($changes, 0, 10));\nif (count($changes) > 10) {\n$this->io->write('    <info>'.count($changes) - 10 . ' more files modified, choose \"v\" to view the full list</info>');\n}\n\nwhile (true) {\nswitch ($this->io->ask('    <info>Discard changes [y,n,v,?]?</info> ', '?')) {\ncase 'y':\n$this->discardChanges($path);\nbreak 2;\n\ncase 'n':\nthrow new \\RuntimeException('Update aborted');\n\ncase 'v':\n$this->io->write($changes);\nbreak;\n\ncase '?':\ndefault:\n$this->io->write(array(\n'    y - discard changes and apply the '.($update ? 'update' : 'uninstall'),\n'    n - abort the '.($update ? 'update' : 'uninstall').' and let you manually clean things up',\n'    v - view modified files',\n'    ? - print help',\n));\nbreak;\n}\n}\n}\n\n\n\n\nprotected function getCommitLogs($fromReference, $toReference, $path)\n{\n\n $fromRevision = preg_replace('{.*@(\\d+)$}', '$1', $fromReference);\n$toRevision = preg_replace('{.*@(\\d+)$}', '$1', $toReference);\n\n$command = sprintf('svn log -r%s:%s --incremental', $fromRevision, $toRevision);\n\nif (0 !== $this->process->execute($command, $output, $path)) {\nthrow new \\RuntimeException('Failed to execute ' . $command . \"\\n\\n\" . $this->process->getErrorOutput());\n}\n\nreturn $output;\n}\n\nprotected function discardChanges($path)\n{\nif (0 !== $this->process->execute('svn revert -R .', $output, $path)) {\nthrow new \\RuntimeException(\"Could not reset changes\\n\\n:\".$this->process->getErrorOutput());\n}\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Downloader;\n\nuse Composer\\Util\\Filesystem;\n\n\n\n\n\n\n\n\n\n\nclass PearPackageExtractor\n{\nprivate static $rolesWithoutPackageNamePrefix = array('php', 'script', 'www');\n\nprivate $filesystem;\nprivate $file;\n\npublic function __construct($file)\n{\nif (!is_file($file)) {\nthrow new \\UnexpectedValueException('PEAR package file is not found at '.$file);\n}\n\n$this->filesystem = new Filesystem();\n$this->file = $file;\n}\n\n\n\n\n\n\n\n\n\n\n\npublic function extractTo($target, array $roles = array('php' => '/', 'script' => '/bin'), $vars = array())\n{\n$extractionPath = $target.'/tarball';\n\ntry {\n$archive = new \\PharData($this->file);\n$archive->extractTo($extractionPath, null, true);\n\nif (!is_file($this->combine($extractionPath, '/package.xml'))) {\nthrow new \\RuntimeException('Invalid PEAR package. It must contain package.xml file.');\n}\n\n$fileCopyActions = $this->buildCopyActions($extractionPath, $roles, $vars);\n$this->copyFiles($fileCopyActions, $extractionPath, $target, $roles, $vars);\n$this->filesystem->removeDirectory($extractionPath);\n} catch (\\Exception $exception) {\nthrow new \\UnexpectedValueException(sprintf('Failed to extract PEAR package %s to %s. Reason: %s', $this->file, $target, $exception->getMessage()), 0, $exception);\n}\n}\n\n\n\n\n\n\n\n\n\n\nprivate function copyFiles($files, $source, $target, $roles, $vars)\n{\nforeach ($files as $file) {\n$from = $this->combine($source, $file['from']);\n$to = $this->combine($target, $roles[$file['role']]);\n$to = $this->combine($to, $file['to']);\n$tasks = $file['tasks'];\n$this->copyFile($from, $to, $tasks, $vars);\n}\n}\n\nprivate function copyFile($from, $to, $tasks, $vars)\n{\nif (!is_file($from)) {\nthrow new \\RuntimeException('Invalid PEAR package. package.xml defines file that is not located inside tarball.');\n}\n\n$this->filesystem->ensureDirectoryExists(dirname($to));\n\nif (0 == count($tasks)) {\n$copied = copy($from, $to);\n} else {\n$content = file_get_contents($from);\n$replacements = array();\nforeach ($tasks as $task) {\n$pattern = $task['from'];\n$varName = $task['to'];\nif (isset($vars[$varName])) {\nif ($varName === 'php_bin' && false === strpos($to, '.bat')) {\n$replacements[$pattern] = preg_replace('{\\.bat$}', '', $vars[$varName]);\n} else {\n$replacements[$pattern] = $vars[$varName];\n}\n}\n}\n$content = strtr($content, $replacements);\n\n$copied = file_put_contents($to, $content);\n}\n\nif (false === $copied) {\nthrow new \\RuntimeException(sprintf('Failed to copy %s to %s', $from, $to));\n}\n}\n\n\n\n\n\n\n\n\n\n\n\nprivate function buildCopyActions($source, array $roles, $vars)\n{\n\n$package = simplexml_load_file($this->combine($source, 'package.xml'));\nif(false === $package)\nthrow new \\RuntimeException('Package definition file is not valid.');\n\n$packageSchemaVersion = $package['version'];\nif ('1.0' == $packageSchemaVersion) {\n$children = $package->release->filelist->children();\n$packageName = (string) $package->name;\n$packageVersion = (string) $package->release->version;\n$sourceDir = $packageName . '-' . $packageVersion;\n$result = $this->buildSourceList10($children, $roles, $sourceDir, '', null, $packageName);\n} elseif ('2.0' == $packageSchemaVersion || '2.1' == $packageSchemaVersion) {\n$children = $package->contents->children();\n$packageName = (string) $package->name;\n$packageVersion = (string) $package->version->release;\n$sourceDir = $packageName . '-' . $packageVersion;\n$result = $this->buildSourceList20($children, $roles, $sourceDir, '', null, $packageName);\n\n$namespaces = $package->getNamespaces();\n$package->registerXPathNamespace('ns', $namespaces['']);\n$releaseNodes = $package->xpath('ns:phprelease');\n$this->applyRelease($result, $releaseNodes, $vars);\n} else {\nthrow new \\RuntimeException('Unsupported schema version of package definition file.');\n}\n\nreturn $result;\n}\n\nprivate function applyRelease(&$actions, $releaseNodes, $vars)\n{\nforeach ($releaseNodes as $releaseNode) {\n$requiredOs = $releaseNode->installconditions && $releaseNode->installconditions->os && $releaseNode->installconditions->os->name ? (string) $releaseNode->installconditions->os->name : '';\nif ($requiredOs && $vars['os'] != $requiredOs) {\ncontinue;\n}\n\nif ($releaseNode->filelist) {\nforeach ($releaseNode->filelist->children() as $action) {\nif ('install' == $action->getName()) {\n$name = (string) $action['name'];\n$as = (string) $action['as'];\nif (isset($actions[$name])) {\n$actions[$name]['to'] = $as;\n}\n} elseif ('ignore' == $action->getName()) {\n$name = (string) $action['name'];\nunset($actions[$name]);\n} else {\n\n }\n}\n}\nbreak;\n}\n}\n\nprivate function buildSourceList10($children, $targetRoles, $source, $target, $role, $packageName)\n{\n$result = array();\n\n\n foreach ($children as $child) {\n\nif ($child->getName() == 'dir') {\n$dirSource = $this->combine($source, (string) $child['name']);\n$dirTarget = $child['baseinstalldir'] ? : $target;\n$dirRole = $child['role'] ? : $role;\n$dirFiles = $this->buildSourceList10($child->children(), $targetRoles, $dirSource, $dirTarget, $dirRole, $packageName);\n$result = array_merge($result, $dirFiles);\n} elseif ($child->getName() == 'file') {\n$fileRole = (string) $child['role'] ? : $role;\nif (isset($targetRoles[$fileRole])) {\n$fileName = (string) ($child['name'] ? : $child[0]); \n $fileSource = $this->combine($source, $fileName);\n$fileTarget = $this->combine((string) $child['baseinstalldir'] ? : $target, $fileName);\nif (!in_array($fileRole, self::$rolesWithoutPackageNamePrefix)) {\n$fileTarget = $packageName . '/' . $fileTarget;\n}\n$result[(string) $child['name']] = array('from' => $fileSource, 'to' => $fileTarget, 'role' => $fileRole, 'tasks' => array());\n}\n}\n}\n\nreturn $result;\n}\n\nprivate function buildSourceList20($children, $targetRoles, $source, $target, $role, $packageName)\n{\n$result = array();\n\n\n foreach ($children as $child) {\n\nif ('dir' == $child->getName()) {\n$dirSource = $this->combine($source, $child['name']);\n$dirTarget = $child['baseinstalldir'] ? : $target;\n$dirRole = $child['role'] ? : $role;\n$dirFiles = $this->buildSourceList20($child->children(), $targetRoles, $dirSource, $dirTarget, $dirRole, $packageName);\n$result = array_merge($result, $dirFiles);\n} elseif ('file' == $child->getName()) {\n$fileRole = (string) $child['role'] ? : $role;\nif (isset($targetRoles[$fileRole])) {\n$fileSource = $this->combine($source, (string) $child['name']);\n$fileTarget = $this->combine((string) ($child['baseinstalldir'] ? : $target), (string) $child['name']);\n$fileTasks = array();\nforeach ($child->children('http://pear.php.net/dtd/tasks-1.0') as $taskNode) {\nif ('replace' == $taskNode->getName()) {\n$fileTasks[] = array('from' => (string) $taskNode->attributes()->from, 'to' => (string) $taskNode->attributes()->to);\n}\n}\nif (!in_array($fileRole, self::$rolesWithoutPackageNamePrefix)) {\n$fileTarget = $packageName . '/' . $fileTarget;\n}\n$result[(string) $child['name']] = array('from' => $fileSource, 'to' => $fileTarget, 'role' => $fileRole, 'tasks' => $fileTasks);\n}\n}\n}\n\nreturn $result;\n}\n\nprivate function combine($left, $right)\n{\nreturn rtrim($left, '/') . '/' . ltrim($right, '/');\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Downloader;\n\nuse Composer\\Package\\PackageInterface;\nuse Composer\\Downloader\\DownloaderInterface;\nuse Composer\\Util\\Filesystem;\n\n\n\n\n\n\nclass DownloadManager\n{\nprivate $preferDist = false;\nprivate $preferSource = false;\nprivate $filesystem;\nprivate $downloaders = array();\n\n\n\n\n\n\n\npublic function __construct($preferSource = false, Filesystem $filesystem = null)\n{\n$this->preferSource = $preferSource;\n$this->filesystem = $filesystem ?: new Filesystem();\n}\n\n\n\n\n\n\n\npublic function setPreferSource($preferSource)\n{\n$this->preferSource = $preferSource;\n\nreturn $this;\n}\n\n\n\n\n\n\n\npublic function setPreferDist($preferDist)\n{\n$this->preferDist = $preferDist;\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\npublic function setOutputProgress($outputProgress)\n{\nforeach ($this->downloaders as $downloader) {\n$downloader->setOutputProgress($outputProgress);\n}\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\npublic function setDownloader($type, DownloaderInterface $downloader)\n{\n$type = strtolower($type);\n$this->downloaders[$type] = $downloader;\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\n\n\npublic function getDownloader($type)\n{\n$type = strtolower($type);\nif (!isset($this->downloaders[$type])) {\nthrow new \\InvalidArgumentException('Unknown downloader type: '.$type);\n}\n\nreturn $this->downloaders[$type];\n}\n\n\n\n\n\n\n\n\n\n\n\n\npublic function getDownloaderForInstalledPackage(PackageInterface $package)\n{\n$installationSource = $package->getInstallationSource();\n\nif ('dist' === $installationSource) {\n$downloader = $this->getDownloader($package->getDistType());\n} elseif ('source' === $installationSource) {\n$downloader = $this->getDownloader($package->getSourceType());\n} else {\nthrow new \\InvalidArgumentException(\n'Package '.$package.' seems not been installed properly'\n);\n}\n\nif ($installationSource !== $downloader->getInstallationSource()) {\nthrow new \\LogicException(sprintf(\n'Downloader \"%s\" is a %s type downloader and can not be used to download %s',\nget_class($downloader), $downloader->getInstallationSource(), $installationSource\n));\n}\n\nreturn $downloader;\n}\n\n\n\n\n\n\n\n\n\n\npublic function download(PackageInterface $package, $targetDir, $preferSource = null)\n{\n$preferSource = null !== $preferSource ? $preferSource : $this->preferSource;\n$sourceType = $package->getSourceType();\n$distType = $package->getDistType();\n\nif ((!$package->isDev() || $this->preferDist || !$sourceType) && !($preferSource && $sourceType) && $distType) {\n$package->setInstallationSource('dist');\n} elseif ($sourceType) {\n$package->setInstallationSource('source');\n} else {\nthrow new \\InvalidArgumentException('Package '.$package.' must have a source or dist specified');\n}\n\n$this->filesystem->ensureDirectoryExists($targetDir);\n\n$downloader = $this->getDownloaderForInstalledPackage($package);\n$downloader->download($package, $targetDir);\n}\n\n\n\n\n\n\n\n\n\n\npublic function update(PackageInterface $initial, PackageInterface $target, $targetDir)\n{\n$downloader = $this->getDownloaderForInstalledPackage($initial);\n$installationSource = $initial->getInstallationSource();\n\nif ('dist' === $installationSource) {\n$initialType = $initial->getDistType();\n$targetType = $target->getDistType();\n} else {\n$initialType = $initial->getSourceType();\n$targetType = $target->getSourceType();\n}\n\n\n if ($target->isDev() && 'dist' === $installationSource) {\n$downloader->remove($initial, $targetDir);\n$this->download($target, $targetDir);\n\nreturn;\n}\n\nif ($initialType === $targetType) {\n$target->setInstallationSource($installationSource);\n$downloader->update($initial, $target, $targetDir);\n} else {\n$downloader->remove($initial, $targetDir);\n$this->download($target, $targetDir, 'source' === $installationSource);\n}\n}\n\n\n\n\n\n\n\npublic function remove(PackageInterface $package, $targetDir)\n{\n$downloader = $this->getDownloaderForInstalledPackage($package);\n$downloader->remove($package, $targetDir);\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Downloader;\n\nuse Composer\\Package\\PackageInterface;\n\n\n\n\n\n\n\ninterface DownloaderInterface\n{\n\n\n\n\n\npublic function getInstallationSource();\n\n\n\n\n\n\n\npublic function download(PackageInterface $package, $path);\n\n\n\n\n\n\n\n\npublic function update(PackageInterface $initial, PackageInterface $target, $path);\n\n\n\n\n\n\n\npublic function remove(PackageInterface $package, $path);\n\n\n\n\n\n\n\npublic function setOutputProgress($outputProgress);\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Downloader;\n\n\n\n\nclass TransportException extends \\Exception\n{\nprotected $headers;\n\npublic function setHeaders($headers)\n{\n$this->headers = $headers;\n}\n\npublic function getHeaders()\n{\nreturn $this->headers;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Downloader;\n\n\n\n\n\n\nclass PharDownloader extends ArchiveDownloader\n{\n\n\n\nprotected function extract($file, $path)\n{\n\n $archive = new \\Phar($file);\n$archive->extractTo($path, null, true);\n\n\n\n\n\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Downloader;\n\n\n\n\n\n\nclass TarDownloader extends ArchiveDownloader\n{\n\n\n\nprotected function extract($file, $path)\n{\n\n $archive = new \\PharData($file);\n$archive->extractTo($path, null, true);\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Downloader;\n\nuse Composer\\Package\\PackageInterface;\n\n\n\n\nclass HgDownloader extends VcsDownloader\n{\n\n\n\npublic function doDownload(PackageInterface $package, $path)\n{\n$url = escapeshellarg($package->getSourceUrl());\n$ref = escapeshellarg($package->getSourceReference());\n$this->io->write(\"    Cloning \".$package->getSourceReference());\n$command = sprintf('hg clone %s %s', $url, escapeshellarg($path));\nif (0 !== $this->process->execute($command, $ignoredOutput)) {\nthrow new \\RuntimeException('Failed to execute ' . $command . \"\\n\\n\" . $this->process->getErrorOutput());\n}\n$command = sprintf('hg up %s', $ref);\nif (0 !== $this->process->execute($command, $ignoredOutput, $path)) {\nthrow new \\RuntimeException('Failed to execute ' . $command . \"\\n\\n\" . $this->process->getErrorOutput());\n}\n}\n\n\n\n\npublic function doUpdate(PackageInterface $initial, PackageInterface $target, $path)\n{\n$url = escapeshellarg($target->getSourceUrl());\n$ref = escapeshellarg($target->getSourceReference());\n$this->io->write(\"    Updating to \".$target->getSourceReference());\n$command = sprintf('hg pull %s && hg up %s', $url, $ref);\nif (0 !== $this->process->execute($command, $ignoredOutput, $path)) {\nthrow new \\RuntimeException('Failed to execute ' . $command . \"\\n\\n\" . $this->process->getErrorOutput());\n}\n}\n\n\n\n\npublic function getLocalChanges($path)\n{\nif (!is_dir($path.'/.hg')) {\nreturn;\n}\n\n$this->process->execute('hg st', $output, $path);\n\nreturn trim($output) ?: null;\n}\n\n\n\n\nprotected function getCommitLogs($fromReference, $toReference, $path)\n{\n$command = sprintf('hg log -r %s:%s --style compact', $fromReference, $toReference);\n\nif (0 !== $this->process->execute($command, $output, $path)) {\nthrow new \\RuntimeException('Failed to execute ' . $command . \"\\n\\n\" . $this->process->getErrorOutput());\n}\n\nreturn $output;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Downloader;\n\nuse Composer\\Package\\PackageInterface;\n\n\n\n\n\n\n\n\nabstract class ArchiveDownloader extends FileDownloader\n{\n\n\n\npublic function download(PackageInterface $package, $path)\n{\nparent::download($package, $path);\n\n$fileName = $this->getFileName($package, $path);\nif ($this->io->isVerbose()) {\n$this->io->write('    Extracting archive');\n}\n\n$temporaryDir = $this->config->get('vendor-dir').'/composer/'.substr(md5(uniqid('', true)), 0, 8);\ntry {\n$this->filesystem->ensureDirectoryExists($temporaryDir);\ntry {\n$this->extract($fileName, $temporaryDir);\n} catch (\\Exception $e) {\n\n parent::clearCache($package, $path);\nthrow $e;\n}\n\nunlink($fileName);\n\n\n $contentDir = $this->listFiles($temporaryDir);\n\n\n if (1 === count($contentDir) && !is_file($contentDir[0])) {\n$contentDir = $this->listFiles($contentDir[0]);\n}\n\n\n foreach ($contentDir as $file) {\n$this->filesystem->rename($file, $path . '/' . basename($file));\n}\n\n$this->filesystem->removeDirectory($temporaryDir);\n} catch (\\Exception $e) {\n\n $this->filesystem->removeDirectory($path);\n$this->filesystem->removeDirectory($temporaryDir);\nthrow $e;\n}\n\n$this->io->write('');\n}\n\n\n\n\nprotected function getFileName(PackageInterface $package, $path)\n{\nreturn rtrim($path.'/'.md5($path.spl_object_hash($package)).'.'.pathinfo(parse_url($package->getDistUrl(), PHP_URL_PATH), PATHINFO_EXTENSION), '.');\n}\n\n\n\n\nprotected function processUrl(PackageInterface $package, $url)\n{\nif ($package->getDistReference() && strpos($url, 'github.com')) {\nif (preg_match('{^https?://(?:www\\.)?github\\.com/([^/]+)/([^/]+)/(zip|tar)ball/(.+)$}i', $url, $match)) {\n\n $url = 'https://api.github.com/repos/' . $match[1] . '/'. $match[2] . '/' . $match[3] . 'ball/' . $package->getDistReference();\n} elseif ($package->getDistReference() && preg_match('{^https?://(?:www\\.)?github\\.com/([^/]+)/([^/]+)/archive/.+\\.(zip|tar)(?:\\.gz)?$}i', $url, $match)) {\n\n $url = 'https://api.github.com/repos/' . $match[1] . '/'. $match[2] . '/' . $match[3] . 'ball/' . $package->getDistReference();\n} elseif ($package->getDistReference() && preg_match('{^https?://api\\.github\\.com/repos/([^/]+)/([^/]+)/(zip|tar)ball(?:/.+)?$}i', $url, $match)) {\n\n $url = 'https://api.github.com/repos/' . $match[1] . '/'. $match[2] . '/' . $match[3] . 'ball/' . $package->getDistReference();\n}\n}\n\nif (!extension_loaded('openssl') && (0 === strpos($url, 'https:') || 0 === strpos($url, 'http://github.com'))) {\n\n if (preg_match('{^https://api\\.github\\.com/repos/([^/]+/[^/]+)/(zip|tar)ball/([^/]+)$}i', $url, $match)) {\n$url = 'http://nodeload.github.com/'.$match[1].'/'.$match[2].'/'.$match[3];\n} elseif (preg_match('{^https://github\\.com/([^/]+/[^/]+)/(zip|tar)ball/([^/]+)$}i', $url, $match)) {\n$url = 'http://nodeload.github.com/'.$match[1].'/'.$match[2].'/'.$match[3];\n} elseif (preg_match('{^https://github\\.com/([^/]+/[^/]+)/archive/([^/]+)\\.(zip|tar\\.gz)$}i', $url, $match)) {\n$url = 'http://nodeload.github.com/'.$match[1].'/'.$match[3].'/'.$match[2];\n} else {\nthrow new \\RuntimeException('You must enable the openssl extension to download files via https');\n}\n}\n\nreturn parent::processUrl($package, $url);\n}\n\n\n\n\n\n\n\n\n\nabstract protected function extract($file, $path);\n\n\n\n\nprivate function listFiles($dir)\n{\n$files = array_merge(glob($dir . '/.*'), glob($dir . '/*'));\n\nreturn array_values(array_filter($files, function ($el) {\nreturn basename($el) !== '.' && basename($el) !== '..';\n}));\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Downloader;\n\n\n\n\n\n\nclass FilesystemException extends \\Exception\n{\npublic function __construct($message = null, $code = null, \\Exception $previous = null)\n{\nparent::__construct(\"Filesystem exception: \\n\".$message, $code, $previous);\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Downloader;\n\nuse Composer\\Config;\nuse Composer\\Cache;\nuse Composer\\Util\\ProcessExecutor;\nuse Composer\\IO\\IOInterface;\nuse ZipArchive;\n\n\n\n\nclass ZipDownloader extends ArchiveDownloader\n{\nprotected $process;\n\npublic function __construct(IOInterface $io, Config $config, Cache $cache = null, ProcessExecutor $process = null)\n{\n$this->process = $process ?: new ProcessExecutor;\nparent::__construct($io, $config, $cache);\n}\n\nprotected function extract($file, $path)\n{\n$processError = null;\n\n\n if (!defined('PHP_WINDOWS_VERSION_BUILD')) {\n$command = 'unzip '.escapeshellarg($file).' -d '.escapeshellarg($path);\nif (0 === $this->process->execute($command, $ignoredOutput)) {\nreturn;\n}\n\n$processError = 'Failed to execute ' . $command . \"\\n\\n\" . $this->process->getErrorOutput();\n}\n\nif (!class_exists('ZipArchive')) {\n\n $iniPath = php_ini_loaded_file();\n\nif ($iniPath) {\n$iniMessage = 'The php.ini used by your command-line PHP is: ' . $iniPath;\n} else {\n$iniMessage = 'A php.ini file does not exist. You will have to create one.';\n}\n\n$error = \"Could not decompress the archive, enable the PHP zip extension or install unzip.\\n\"\n. $iniMessage . \"\\n\" . $processError;\n\nif (!defined('PHP_WINDOWS_VERSION_BUILD')) {\n$error = \"Could not decompress the archive, enable the PHP zip extension.\\n\" . $iniMessage;\n}\n\nthrow new \\RuntimeException($error);\n}\n\n$zipArchive = new ZipArchive();\n\nif (true !== ($retval = $zipArchive->open($file))) {\nthrow new \\UnexpectedValueException($this->getErrorMessage($retval, $file));\n}\n\nif (true !== $zipArchive->extractTo($path)) {\nthrow new \\RuntimeException(\"There was an error extracting the ZIP file. Corrupt file?\");\n}\n\n$zipArchive->close();\n}\n\n\n\n\n\n\n\n\nprotected function getErrorMessage($retval, $file)\n{\nswitch ($retval) {\ncase ZipArchive::ER_EXISTS:\nreturn sprintf(\"File '%s' already exists.\", $file);\ncase ZipArchive::ER_INCONS:\nreturn sprintf(\"Zip archive '%s' is inconsistent.\", $file);\ncase ZipArchive::ER_INVAL:\nreturn sprintf(\"Invalid argument (%s)\", $file);\ncase ZipArchive::ER_MEMORY:\nreturn sprintf(\"Malloc failure (%s)\", $file);\ncase ZipArchive::ER_NOENT:\nreturn sprintf(\"No such zip file: '%s'\", $file);\ncase ZipArchive::ER_NOZIP:\nreturn sprintf(\"'%s' is not a zip archive.\", $file);\ncase ZipArchive::ER_OPEN:\nreturn sprintf(\"Can't open zip file: %s\", $file);\ncase ZipArchive::ER_READ:\nreturn sprintf(\"Zip read error (%s)\", $file);\ncase ZipArchive::ER_SEEK:\nreturn sprintf(\"Zip seek error (%s)\", $file);\ndefault:\nreturn sprintf(\"'%s' is not a valid zip archive, got error code: %s\", $file, $retval);\n}\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Downloader;\n\nuse Composer\\Package\\PackageInterface;\nuse Composer\\Util\\GitHub;\nuse Composer\\Util\\Git as GitUtil;\n\n\n\n\nclass GitDownloader extends VcsDownloader\n{\nprivate $hasStashedChanges = false;\n\n\n\n\npublic function doDownload(PackageInterface $package, $path)\n{\n$this->cleanEnv();\n$path = $this->normalizePath($path);\n\n$ref = $package->getSourceReference();\n$flag = defined('PHP_WINDOWS_VERSION_MAJOR') ? '/D ' : '';\n$command = 'git clone %s %s && cd '.$flag.'%2$s && git remote add composer %1$s && git fetch composer';\n$this->io->write(\"    Cloning \".$ref);\n\n$commandCallable = function($url) use ($ref, $path, $command) {\nreturn sprintf($command, escapeshellarg($url), escapeshellarg($path), escapeshellarg($ref));\n};\n\n$this->runCommand($commandCallable, $package->getSourceUrl(), $path, true);\n$this->setPushUrl($package, $path);\n\n$this->updateToCommit($path, $ref, $package->getPrettyVersion(), $package->getReleaseDate());\n}\n\n\n\n\npublic function doUpdate(PackageInterface $initial, PackageInterface $target, $path)\n{\n$this->cleanEnv();\n$path = $this->normalizePath($path);\n\n$ref = $target->getSourceReference();\n$this->io->write(\"    Checking out \".$ref);\n$command = 'git remote set-url composer %s && git fetch composer && git fetch --tags composer';\n\n\n $this->process->execute('git remote -v', $output, $path);\nif (preg_match('{^(?:composer|origin)\\s+https?://(.+):(.+)@([^/]+)}im', $output, $match)) {\n$this->io->setAuthentication($match[3], urldecode($match[1]), urldecode($match[2]));\n}\n\n$commandCallable = function($url) use ($command) {\nreturn sprintf($command, escapeshellarg($url));\n};\n\n$this->runCommand($commandCallable, $target->getSourceUrl(), $path);\n$this->updateToCommit($path, $ref, $target->getPrettyVersion(), $target->getReleaseDate());\n}\n\n\n\n\npublic function getLocalChanges($path)\n{\n$this->cleanEnv();\n$path = $this->normalizePath($path);\nif (!is_dir($path.'/.git')) {\nreturn;\n}\n\n$command = 'git status --porcelain --untracked-files=no';\nif (0 !== $this->process->execute($command, $output, $path)) {\nthrow new \\RuntimeException('Failed to execute ' . $command . \"\\n\\n\" . $this->process->getErrorOutput());\n}\n\nreturn trim($output) ?: null;\n}\n\n\n\n\nprotected function cleanChanges($path, $update)\n{\n$this->cleanEnv();\n$path = $this->normalizePath($path);\nif (!$changes = $this->getLocalChanges($path)) {\nreturn;\n}\n\nif (!$this->io->isInteractive()) {\n$discardChanges = $this->config->get('discard-changes');\nif (true === $discardChanges) {\nreturn $this->discardChanges($path);\n}\nif ('stash' === $discardChanges) {\nif (!$update) {\nreturn parent::cleanChanges($path, $update);\n}\n\nreturn $this->stashChanges($path);\n}\n\nreturn parent::cleanChanges($path, $update);\n}\n\n$changes = array_map(function ($elem) {\nreturn '    '.$elem;\n}, preg_split('{\\s*\\r?\\n\\s*}', $changes));\n$this->io->write('    <error>The package has modified files:</error>');\n$this->io->write(array_slice($changes, 0, 10));\nif (count($changes) > 10) {\n$this->io->write('    <info>'.count($changes) - 10 . ' more files modified, choose \"v\" to view the full list</info>');\n}\n\nwhile (true) {\nswitch ($this->io->ask('    <info>Discard changes [y,n,v,'.($update ? 's,' : '').'?]?</info> ', '?')) {\ncase 'y':\n$this->discardChanges($path);\nbreak 2;\n\ncase 's':\nif (!$update) {\ngoto help;\n}\n\n$this->stashChanges($path);\nbreak 2;\n\ncase 'n':\nthrow new \\RuntimeException('Update aborted');\n\ncase 'v':\n$this->io->write($changes);\nbreak;\n\ncase '?':\ndefault:\nhelp:\n$this->io->write(array(\n'    y - discard changes and apply the '.($update ? 'update' : 'uninstall'),\n'    n - abort the '.($update ? 'update' : 'uninstall').' and let you manually clean things up',\n'    v - view modified files',\n));\nif ($update) {\n$this->io->write('    s - stash changes and try to reapply them after the update');\n}\n$this->io->write('    ? - print help');\nbreak;\n}\n}\n}\n\n\n\n\nprotected function reapplyChanges($path)\n{\n$path = $this->normalizePath($path);\nif ($this->hasStashedChanges) {\n$this->hasStashedChanges = false;\n$this->io->write('    <info>Re-applying stashed changes');\nif (0 !== $this->process->execute('git stash pop', $output, $path)) {\nthrow new \\RuntimeException(\"Failed to apply stashed changes:\\n\\n\".$this->process->getErrorOutput());\n}\n}\n}\n\nprotected function updateToCommit($path, $reference, $branch, $date)\n{\n$template = 'git checkout %s && git reset --hard %1$s';\n$branch = preg_replace('{(?:^dev-|(?:\\.x)?-dev$)}i', '', $branch);\n\n$branches = null;\nif (0 === $this->process->execute('git branch -r', $output, $path)) {\n$branches = $output;\n}\n\n\n $gitRef = $reference;\nif (!preg_match('{^[a-f0-9]{40}$}', $reference)\n&& $branches\n&& preg_match('{^\\s+composer/'.preg_quote($reference).'$}m', $output)\n) {\n$command = sprintf('git checkout -B %s %s && git reset --hard %2$s', escapeshellarg($branch), escapeshellarg('composer/'.$reference));\nif (0 === $this->process->execute($command, $output, $path)) {\nreturn;\n}\n}\n\n\n if (preg_match('{^[a-f0-9]{40}$}', $reference)) {\n\n if (!preg_match('{^\\s+composer/'.preg_quote($branch).'$}m', $branches) && preg_match('{^\\s+composer/v'.preg_quote($branch).'$}m', $branches)) {\n$branch = 'v' . $branch;\n}\n\n$command = sprintf('git checkout %s', escapeshellarg($branch));\n$fallbackCommand = sprintf('git checkout -B %s %s', escapeshellarg($branch), escapeshellarg('composer/'.$branch));\nif (0 === $this->process->execute($command, $output, $path)\n|| 0 === $this->process->execute($fallbackCommand, $output, $path)\n) {\n$command = sprintf('git reset --hard %s', escapeshellarg($reference));\nif (0 === $this->process->execute($command, $output, $path)) {\nreturn;\n}\n}\n}\n\n$command = sprintf($template, escapeshellarg($gitRef));\nif (0 === $this->process->execute($command, $output, $path)) {\nreturn;\n}\n\n\n if ($date && false !== strpos($this->process->getErrorOutput(), $reference)) {\n$date = $date->format('U');\n\n\n $command = 'git branch -r';\nif (0 !== $this->process->execute($command, $output, $path)) {\nthrow new \\RuntimeException('Failed to execute ' . $command . \"\\n\\n\" . $this->process->getErrorOutput());\n}\n\n$guessTemplate = 'git log --until=%s --date=raw -n1 --pretty=%%H %s';\nforeach ($this->process->splitLines($output) as $line) {\nif (preg_match('{^composer/'.preg_quote($branch).'(?:\\.x)?$}i', trim($line))) {\n\n if (0 === $this->process->execute(sprintf($guessTemplate, $date, escapeshellarg(trim($line))), $output, $path)) {\n$newReference = trim($output);\n}\n\nbreak;\n}\n}\n\nif (empty($newReference)) {\n\n if (0 !== $this->process->execute(sprintf($guessTemplate, $date, '--all'), $output, $path)) {\nthrow new \\RuntimeException('Failed to execute ' . $this->sanitizeUrl($command) . \"\\n\\n\" . $this->process->getErrorOutput());\n}\n$newReference = trim($output);\n}\n\n\n $command = sprintf($template, escapeshellarg($reference));\nif (0 === $this->process->execute($command, $output, $path)) {\n$this->io->write('    '.$reference.' is gone (history was rewritten?), recovered by checking out '.$newReference);\n\nreturn;\n}\n}\n\nthrow new \\RuntimeException('Failed to execute ' . $this->sanitizeUrl($command) . \"\\n\\n\" . $this->process->getErrorOutput());\n}\n\n\n\n\n\n\n\n\n\n\n\nprotected function runCommand($commandCallable, $url, $cwd, $initialClone = false)\n{\nif ($initialClone) {\n$origCwd = $cwd;\n$cwd = null;\n}\n\nif (preg_match('{^ssh://[^@]+@[^:]+:[^0-9]+}', $url)) {\nthrow new \\InvalidArgumentException('The source URL '.$url.' is invalid, ssh URLs should have a port number after \":\".'.\"\\n\".'Use ssh://git@example.com:22/path or just git@example.com:path if you do not want to provide a password or custom port.');\n}\n\n\n if (preg_match('{^(?:https?|git)(://github.com/.*)}', $url, $match)) {\n$protocols = $this->config->get('github-protocols');\nif (!is_array($protocols)) {\nthrow new \\RuntimeException('Config value \"github-protocols\" must be an array, got '.gettype($protocols));\n}\n$messages = array();\nforeach ($protocols as $protocol) {\n$url = $protocol . $match[1];\nif (0 === $this->process->execute(call_user_func($commandCallable, $url), $ignoredOutput, $cwd)) {\nreturn;\n}\n$messages[] = '- ' . $url . \"\\n\" . preg_replace('#^#m', '  ', $this->process->getErrorOutput());\nif ($initialClone) {\n$this->filesystem->removeDirectory($origCwd);\n}\n}\n\n\n $this->throwException('Failed to clone ' . $this->sanitizeUrl($url) .' via '.implode(', ', $protocols).' protocols, aborting.' . \"\\n\\n\" . implode(\"\\n\", $messages), $url);\n}\n\n$command = call_user_func($commandCallable, $url);\nif (0 !== $this->process->execute($command, $ignoredOutput, $cwd)) {\n\n if (preg_match('{^git@(github.com):(.+?)\\.git$}i', $url, $match)) {\nif (!$this->io->hasAuthentication($match[1])) {\n$gitHubUtil = new GitHub($this->io, $this->config, $this->process);\n$message = 'Cloning failed using an ssh key for authentication, enter your GitHub credentials to access private repos';\n\nif (!$gitHubUtil->authorizeOAuth($match[1]) && $this->io->isInteractive()) {\n$gitHubUtil->authorizeOAuthInteractively($match[1], $message);\n}\n}\n\nif ($this->io->hasAuthentication($match[1])) {\n$auth = $this->io->getAuthentication($match[1]);\n$url = 'https://'.urlencode($auth['username']) . ':' . urlencode($auth['password']) . '@'.$match[1].'/'.$match[2].'.git';\n\n$command = call_user_func($commandCallable, $url);\nif (0 === $this->process->execute($command, $ignoredOutput, $cwd)) {\nreturn;\n}\n}\n} elseif ( \n $this->io->isInteractive() &&\npreg_match('{(https?://)([^/]+)(.*)$}i', $url, $match) &&\nstrpos($this->process->getErrorOutput(), 'fatal: Authentication failed') !== false\n) {\nif ($this->io->hasAuthentication($match[2])) {\n$auth = $this->io->getAuthentication($match[2]);\n} else {\n$this->io->write($url.' requires Authentication');\n$auth = array(\n'username' => $this->io->ask('Username: '),\n'password' => $this->io->askAndHideAnswer('Password: '),\n);\n}\n\n$url = $match[1].urlencode($auth['username']).':'.urlencode($auth['password']).'@'.$match[2].$match[3];\n\n$command = call_user_func($commandCallable, $url);\nif (0 === $this->process->execute($command, $ignoredOutput, $cwd)) {\n$this->io->setAuthentication($match[2], $auth['username'], $auth['password']);\n\nreturn;\n}\n}\n\nif ($initialClone) {\n$this->filesystem->removeDirectory($origCwd);\n}\n$this->throwException('Failed to execute ' . $this->sanitizeUrl($command) . \"\\n\\n\" . $this->process->getErrorOutput(), $url);\n}\n}\n\nprotected function throwException($message, $url)\n{\nif (0 !== $this->process->execute('git --version', $ignoredOutput)) {\nthrow new \\RuntimeException('Failed to clone '.$this->sanitizeUrl($url).', git was not found, check that it is installed and in your PATH env.' . \"\\n\\n\" . $this->process->getErrorOutput());\n}\n\nthrow new \\RuntimeException($message);\n}\n\nprotected function sanitizeUrl($message)\n{\nreturn preg_replace('{://(.+?):.+?@}', '://$1:***@', $message);\n}\n\nprotected function setPushUrl(PackageInterface $package, $path)\n{\n\n if (preg_match('{^(?:https?|git)://github.com/([^/]+)/([^/]+?)(?:\\.git)?$}', $package->getSourceUrl(), $match)) {\n$protocols = $this->config->get('github-protocols');\n$pushUrl = 'git@github.com:'.$match[1].'/'.$match[2].'.git';\nif ($protocols[0] !== 'git') {\n$pushUrl = 'https://github.com/'.$match[1].'/'.$match[2].'.git';\n}\n$cmd = sprintf('git remote set-url --push origin %s', escapeshellarg($pushUrl));\n$this->process->execute($cmd, $ignoredOutput, $path);\n}\n}\n\n\n\n\nprotected function getCommitLogs($fromReference, $toReference, $path)\n{\n$path = $this->normalizePath($path);\n$command = sprintf('git log %s..%s --pretty=format:\"%%h - %%an: %%s\"', $fromReference, $toReference);\n\nif (0 !== $this->process->execute($command, $output, $path)) {\nthrow new \\RuntimeException('Failed to execute ' . $command . \"\\n\\n\" . $this->process->getErrorOutput());\n}\n\nreturn $output;\n}\n\n\n\n\n\nprotected function discardChanges($path)\n{\n$path = $this->normalizePath($path);\nif (0 !== $this->process->execute('git reset --hard', $output, $path)) {\nthrow new \\RuntimeException(\"Could not reset changes\\n\\n:\".$this->process->getErrorOutput());\n}\n}\n\n\n\n\n\nprotected function stashChanges($path)\n{\n$path = $this->normalizePath($path);\nif (0 !== $this->process->execute('git stash', $output, $path)) {\nthrow new \\RuntimeException(\"Could not stash changes\\n\\n:\".$this->process->getErrorOutput());\n}\n\n$this->hasStashedChanges = true;\n}\n\nprotected function cleanEnv()\n{\n$util = new GitUtil;\n$util->cleanEnv();\n}\n\nprotected function normalizePath($path)\n{\nif (defined('PHP_WINDOWS_VERSION_MAJOR') && strlen($path) > 0) {\n$basePath = $path;\n$removed = array();\n\nwhile (!is_dir($basePath) && $basePath !== '\\\\') {\narray_unshift($removed, basename($basePath));\n$basePath = dirname($basePath);\n}\n\nif ($basePath === '\\\\') {\nreturn $path;\n}\n\n$path = rtrim(realpath($basePath) . '/' . implode('/', $removed), '/');\n}\n\nreturn $path;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Repository;\n\n\n\n\n\n\nclass InvalidRepositoryException extends \\Exception\n{\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Repository;\n\nuse Composer\\Package\\AliasPackage;\nuse Composer\\Package\\PackageInterface;\nuse Composer\\Package\\CompletePackageInterface;\nuse Composer\\Package\\Version\\VersionParser;\n\n\n\n\n\n\nclass ArrayRepository implements RepositoryInterface\n{\nprotected $packages;\n\npublic function __construct(array $packages = array())\n{\nforeach ($packages as $package) {\n$this->addPackage($package);\n}\n}\n\n\n\n\npublic function findPackage($name, $version)\n{\n\n $versionParser = new VersionParser();\n$version = $versionParser->normalize($version);\n$name = strtolower($name);\n\nforeach ($this->getPackages() as $package) {\nif ($name === $package->getName() && $version === $package->getVersion()) {\nreturn $package;\n}\n}\n}\n\n\n\n\npublic function findPackages($name, $version = null)\n{\n\n $name = strtolower($name);\n\n\n if (null !== $version) {\n$versionParser = new VersionParser();\n$version = $versionParser->normalize($version);\n}\n\n$packages = array();\n\nforeach ($this->getPackages() as $package) {\nif ($package->getName() === $name && (null === $version || $version === $package->getVersion())) {\n$packages[] = $package;\n}\n}\n\nreturn $packages;\n}\n\n\n\n\npublic function search($query, $mode = 0)\n{\n$regex = '{(?:'.implode('|', preg_split('{\\s+}', $query)).')}i';\n\n$matches = array();\nforeach ($this->getPackages() as $package) {\n$name = $package->getName();\nif (isset($matches[$name])) {\ncontinue;\n}\nif (preg_match($regex, $name)\n|| ($mode === self::SEARCH_FULLTEXT && $package instanceof CompletePackageInterface && preg_match($regex, implode(' ', (array) $package->getKeywords()) . ' ' . $package->getDescription()))\n) {\n$matches[$name] = array(\n'name' => $package->getPrettyName(),\n'description' => $package->getDescription(),\n);\n}\n}\n\nreturn $matches;\n}\n\n\n\n\npublic function hasPackage(PackageInterface $package)\n{\n$packageId = $package->getUniqueName();\n\nforeach ($this->getPackages() as $repoPackage) {\nif ($packageId === $repoPackage->getUniqueName()) {\nreturn true;\n}\n}\n\nreturn false;\n}\n\n\n\n\n\n\npublic function addPackage(PackageInterface $package)\n{\nif (null === $this->packages) {\n$this->initialize();\n}\n$package->setRepository($this);\n$this->packages[] = $package;\n\nif ($package instanceof AliasPackage) {\n$aliasedPackage = $package->getAliasOf();\nif (null === $aliasedPackage->getRepository()) {\n$this->addPackage($aliasedPackage);\n}\n}\n}\n\nprotected function createAliasPackage(PackageInterface $package, $alias, $prettyAlias)\n{\nreturn new AliasPackage($package instanceof AliasPackage ? $package->getAliasOf() : $package, $alias, $prettyAlias);\n}\n\n\n\n\n\n\npublic function removePackage(PackageInterface $package)\n{\n$packageId = $package->getUniqueName();\n\nforeach ($this->getPackages() as $key => $repoPackage) {\nif ($packageId === $repoPackage->getUniqueName()) {\narray_splice($this->packages, $key, 1);\n\nreturn;\n}\n}\n}\n\n\n\n\npublic function getPackages()\n{\nif (null === $this->packages) {\n$this->initialize();\n}\n\nreturn $this->packages;\n}\n\n\n\n\n\n\npublic function count()\n{\nreturn count($this->packages);\n}\n\n\n\n\nprotected function initialize()\n{\n$this->packages = array();\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Repository;\n\nuse Composer\\Json\\JsonFile;\nuse Composer\\Package\\Loader\\ArrayLoader;\nuse Composer\\Package\\Dumper\\ArrayDumper;\n\n\n\n\n\n\n\nclass FilesystemRepository extends WritableArrayRepository\n{\nprivate $file;\n\n\n\n\n\n\npublic function __construct(JsonFile $repositoryFile)\n{\n$this->file = $repositoryFile;\n}\n\n\n\n\nprotected function initialize()\n{\nparent::initialize();\n\nif (!$this->file->exists()) {\nreturn;\n}\n\ntry {\n$packages = $this->file->read();\n\nif (!is_array($packages)) {\nthrow new \\UnexpectedValueException('Could not parse package list from the repository');\n}\n} catch (\\Exception $e) {\nthrow new InvalidRepositoryException('Invalid repository data in '.$this->file->getPath().', packages could not be loaded: ['.get_class($e).'] '.$e->getMessage());\n}\n\n$loader = new ArrayLoader();\nforeach ($packages as $packageData) {\n$package = $loader->load($packageData);\n$this->addPackage($package);\n}\n}\n\npublic function reload()\n{\n$this->packages = null;\n$this->initialize();\n}\n\n\n\n\npublic function write()\n{\n$data = array();\n$dumper = new ArrayDumper();\n\nforeach ($this->getCanonicalPackages() as $package) {\n$data[] = $dumper->dump($package);\n}\n\n$this->file->write($data);\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Repository;\n\nuse Composer\\Package\\PackageInterface;\n\n\n\n\n\n\ninterface WritableRepositoryInterface extends RepositoryInterface\n{\n\n\n\npublic function write();\n\n\n\n\n\n\npublic function addPackage(PackageInterface $package);\n\n\n\n\n\n\npublic function removePackage(PackageInterface $package);\n\n\n\n\n\n\npublic function getCanonicalPackages();\n\n\n\n\npublic function reload();\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Repository;\n\nuse Composer\\IO\\IOInterface;\nuse Composer\\Package\\Version\\VersionParser;\nuse Composer\\Repository\\Pear\\ChannelReader;\nuse Composer\\Package\\CompletePackage;\nuse Composer\\Repository\\Pear\\ChannelInfo;\nuse Composer\\Package\\Link;\nuse Composer\\Package\\LinkConstraint\\VersionConstraint;\nuse Composer\\Util\\RemoteFilesystem;\nuse Composer\\Config;\n\n\n\n\n\n\n\n\n\n\nclass PearRepository extends ArrayRepository\n{\nprivate $url;\nprivate $io;\nprivate $rfs;\nprivate $versionParser;\n\n\n\n\nprivate $vendorAlias;\n\npublic function __construct(array $repoConfig, IOInterface $io, Config $config, RemoteFilesystem $rfs = null)\n{\nif (!preg_match('{^https?://}', $repoConfig['url'])) {\n$repoConfig['url'] = 'http://'.$repoConfig['url'];\n}\n\n$urlBits = parse_url($repoConfig['url']);\nif (empty($urlBits['scheme']) || empty($urlBits['host'])) {\nthrow new \\UnexpectedValueException('Invalid url given for PEAR repository: '.$repoConfig['url']);\n}\n\n$this->url = rtrim($repoConfig['url'], '/');\n$this->io = $io;\n$this->rfs = $rfs ?: new RemoteFilesystem($this->io);\n$this->vendorAlias = isset($repoConfig['vendor-alias']) ? $repoConfig['vendor-alias'] : null;\n$this->versionParser = new VersionParser();\n}\n\nprotected function initialize()\n{\nparent::initialize();\n\n$this->io->write('Initializing PEAR repository '.$this->url);\n\n$reader = new ChannelReader($this->rfs);\ntry {\n$channelInfo = $reader->read($this->url);\n} catch (\\Exception $e) {\n$this->io->write('<warning>PEAR repository from '.$this->url.' could not be loaded. '.$e->getMessage().'</warning>');\n\nreturn;\n}\n$packages = $this->buildComposerPackages($channelInfo, $this->versionParser);\nforeach ($packages as $package) {\n$this->addPackage($package);\n}\n}\n\n\n\n\n\n\n\n\nprivate function buildComposerPackages(ChannelInfo $channelInfo, VersionParser $versionParser)\n{\n$result = array();\nforeach ($channelInfo->getPackages() as $packageDefinition) {\nforeach ($packageDefinition->getReleases() as $version => $releaseInfo) {\ntry {\n$normalizedVersion = $versionParser->normalize($version);\n} catch (\\UnexpectedValueException $e) {\nif ($this->io->isVerbose()) {\n$this->io->write('Could not load '.$packageDefinition->getPackageName().' '.$version.': '.$e->getMessage());\n}\ncontinue;\n}\n\n$composerPackageName = $this->buildComposerPackageName($packageDefinition->getChannelName(), $packageDefinition->getPackageName());\n\n\n \n $urlBits = parse_url($this->url);\n$scheme = (isset($urlBits['scheme']) && 'https' === $urlBits['scheme'] && extension_loaded('openssl')) ? 'https' : 'http';\n$distUrl = \"{$scheme}://{$packageDefinition->getChannelName()}/get/{$packageDefinition->getPackageName()}-{$version}.tgz\";\n\n$requires = array();\n$suggests = array();\n$conflicts = array();\n$replaces = array();\n\n\n \n if ($channelInfo->getName() == $packageDefinition->getChannelName()) {\n$composerPackageAlias = $this->buildComposerPackageName($channelInfo->getAlias(), $packageDefinition->getPackageName());\n$aliasConstraint = new VersionConstraint('==', $normalizedVersion);\n$replaces[] = new Link($composerPackageName, $composerPackageAlias, $aliasConstraint, 'replaces', (string) $aliasConstraint);\n}\n\n\n if (!empty($this->vendorAlias)\n&& ($this->vendorAlias != 'pear-'.$channelInfo->getAlias() || $channelInfo->getName() != $packageDefinition->getChannelName())\n) {\n$composerPackageAlias = \"{$this->vendorAlias}/{$packageDefinition->getPackageName()}\";\n$aliasConstraint = new VersionConstraint('==', $normalizedVersion);\n$replaces[] = new Link($composerPackageName, $composerPackageAlias, $aliasConstraint, 'replaces', (string) $aliasConstraint);\n}\n\nforeach ($releaseInfo->getDependencyInfo()->getRequires() as $dependencyConstraint) {\n$dependencyPackageName = $this->buildComposerPackageName($dependencyConstraint->getChannelName(), $dependencyConstraint->getPackageName());\n$constraint = $versionParser->parseConstraints($dependencyConstraint->getConstraint());\n$link = new Link($composerPackageName, $dependencyPackageName, $constraint, $dependencyConstraint->getType(), $dependencyConstraint->getConstraint());\nswitch ($dependencyConstraint->getType()) {\ncase 'required':\n$requires[] = $link;\nbreak;\ncase 'conflicts':\n$conflicts[] = $link;\nbreak;\ncase 'replaces':\n$replaces[] = $link;\nbreak;\n}\n}\n\nforeach ($releaseInfo->getDependencyInfo()->getOptionals() as $group => $dependencyConstraints) {\nforeach ($dependencyConstraints as $dependencyConstraint) {\n$dependencyPackageName = $this->buildComposerPackageName($dependencyConstraint->getChannelName(), $dependencyConstraint->getPackageName());\n$suggests[$group.'-'.$dependencyPackageName] = $dependencyConstraint->getConstraint();\n}\n}\n\n$package = new CompletePackage($composerPackageName, $normalizedVersion, $version);\n$package->setType('pear-library');\n$package->setDescription($packageDefinition->getDescription());\n$package->setDistType('file');\n$package->setDistUrl($distUrl);\n$package->setAutoload(array('classmap' => array('')));\n$package->setIncludePaths(array('/'));\n$package->setRequires($requires);\n$package->setConflicts($conflicts);\n$package->setSuggests($suggests);\n$package->setReplaces($replaces);\n$result[] = $package;\n}\n}\n\nreturn $result;\n}\n\nprivate function buildComposerPackageName($channelName, $packageName)\n{\nif ('php' === $channelName) {\nreturn \"php\";\n}\nif ('ext' === $channelName) {\nreturn \"ext-{$packageName}\";\n}\n\nreturn \"pear-{$channelName}/{$packageName}\";\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Repository;\n\nuse Composer\\IO\\IOInterface;\nuse Composer\\Config;\n\n\n\n\n\n\n\n\nclass RepositoryManager\n{\nprivate $localRepository;\nprivate $repositories = array();\nprivate $repositoryClasses = array();\nprivate $io;\nprivate $config;\n\npublic function __construct(IOInterface $io, Config $config)\n{\n$this->io = $io;\n$this->config = $config;\n}\n\n\n\n\n\n\n\n\n\npublic function findPackage($name, $version)\n{\nforeach ($this->repositories as $repository) {\nif ($package = $repository->findPackage($name, $version)) {\nreturn $package;\n}\n}\n}\n\n\n\n\n\n\n\n\n\npublic function findPackages($name, $version)\n{\n$packages = array();\n\nforeach ($this->repositories as $repository) {\n$packages = array_merge($packages, $repository->findPackages($name, $version));\n}\n\nreturn $packages;\n}\n\n\n\n\n\n\npublic function addRepository(RepositoryInterface $repository)\n{\n$this->repositories[] = $repository;\n}\n\n\n\n\n\n\n\n\n\npublic function createRepository($type, $config)\n{\nif (!isset($this->repositoryClasses[$type])) {\nthrow new \\InvalidArgumentException('Repository type is not registered: '.$type);\n}\n\n$class = $this->repositoryClasses[$type];\n\nreturn new $class($config, $this->io, $this->config);\n}\n\n\n\n\n\n\n\npublic function setRepositoryClass($type, $class)\n{\n$this->repositoryClasses[$type] = $class;\n}\n\n\n\n\n\n\npublic function getRepositories()\n{\nreturn $this->repositories;\n}\n\n\n\n\n\n\npublic function setLocalRepository(WritableRepositoryInterface $repository)\n{\n$this->localRepository = $repository;\n}\n\n\n\n\n\n\npublic function getLocalRepository()\n{\nreturn $this->localRepository;\n}\n\n\n\n\n\n\n\npublic function getLocalRepositories()\n{\ntrigger_error('This method is deprecated, use getLocalRepository instead since the getLocalDevRepository is now gone', E_USER_DEPRECATED);\n\nreturn array($this->localRepository);\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Repository;\n\nuse Composer\\Package\\AliasPackage;\n\n\n\n\n\n\nclass WritableArrayRepository extends ArrayRepository implements WritableRepositoryInterface\n{\n\n\n\npublic function write()\n{\n}\n\n\n\n\npublic function reload()\n{\n}\n\n\n\n\npublic function getCanonicalPackages()\n{\n$packages = $this->getPackages();\n\n\n $packagesByName = array();\nforeach ($packages as $package) {\nif (!isset($packagesByName[$package->getName()]) || $packagesByName[$package->getName()] instanceof AliasPackage) {\n$packagesByName[$package->getName()] = $package;\n}\n}\n\n$canonicalPackages = array();\n\n\n foreach ($packagesByName as $package) {\nwhile ($package instanceof AliasPackage) {\n$package = $package->getAliasOf();\n}\n\n$canonicalPackages[] = $package;\n}\n\nreturn $canonicalPackages;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Repository\\Vcs;\n\nuse Composer\\Downloader\\TransportException;\nuse Composer\\Json\\JsonFile;\nuse Composer\\Cache;\nuse Composer\\IO\\IOInterface;\nuse Composer\\Util\\RemoteFilesystem;\nuse Composer\\Util\\GitHub;\n\n\n\n\nclass GitHubDriver extends VcsDriver\n{\nprotected $cache;\nprotected $owner;\nprotected $repository;\nprotected $tags;\nprotected $branches;\nprotected $rootIdentifier;\nprotected $hasIssues;\nprotected $infoCache = array();\nprotected $isPrivate = false;\n\n\n\n\n\n\nprotected $gitDriver;\n\n\n\n\npublic function initialize()\n{\npreg_match('#^(?:(?:https?|git)://github\\.com/|git@github\\.com:)([^/]+)/(.+?)(?:\\.git)?$#', $this->url, $match);\n$this->owner = $match[1];\n$this->repository = $match[2];\n$this->originUrl = 'github.com';\n$this->cache = new Cache($this->io, $this->config->get('cache-repo-dir').'/'.$this->originUrl.'/'.$this->owner.'/'.$this->repository);\n\n$this->fetchRootIdentifier();\n}\n\n\n\n\npublic function getRootIdentifier()\n{\nif ($this->gitDriver) {\nreturn $this->gitDriver->getRootIdentifier();\n}\n\nreturn $this->rootIdentifier;\n}\n\n\n\n\npublic function getUrl()\n{\nif ($this->gitDriver) {\nreturn $this->gitDriver->getUrl();\n}\n\nreturn 'https://github.com/'.$this->owner.'/'.$this->repository.'.git';\n}\n\n\n\n\npublic function getSource($identifier)\n{\nif ($this->gitDriver) {\nreturn $this->gitDriver->getSource($identifier);\n}\n$label = array_search($identifier, $this->getTags()) ?: $identifier;\nif ($this->isPrivate) {\n\n \n $url = $this->generateSshUrl();\n} else {\n$url = $this->getUrl();\n}\n\nreturn array('type' => 'git', 'url' => $url, 'reference' => $label);\n}\n\n\n\n\npublic function getDist($identifier)\n{\nif ($this->gitDriver) {\nreturn $this->gitDriver->getDist($identifier);\n}\n$label = array_search($identifier, $this->getTags()) ?: $identifier;\n$url = 'https://api.github.com/repos/'.$this->owner.'/'.$this->repository.'/zipball/'.$label;\n\nreturn array('type' => 'zip', 'url' => $url, 'reference' => $label, 'shasum' => '');\n}\n\n\n\n\npublic function getComposerInformation($identifier)\n{\nif ($this->gitDriver) {\nreturn $this->gitDriver->getComposerInformation($identifier);\n}\n\nif (preg_match('{[a-f0-9]{40}}i', $identifier) && $res = $this->cache->read($identifier)) {\n$this->infoCache[$identifier] = JsonFile::parseJson($res);\n}\n\nif (!isset($this->infoCache[$identifier])) {\n$notFoundRetries = 2;\nwhile ($notFoundRetries) {\ntry {\n$resource = 'https://api.github.com/repos/'.$this->owner.'/'.$this->repository.'/contents/composer.json?ref='.urlencode($identifier);\n$composer = JsonFile::parseJson($this->getContents($resource));\nif (empty($composer['content']) || $composer['encoding'] !== 'base64' || !($composer = base64_decode($composer['content']))) {\nthrow new \\RuntimeException('Could not retrieve composer.json from '.$resource);\n}\nbreak;\n} catch (TransportException $e) {\nif (404 !== $e->getCode()) {\nthrow $e;\n}\n\n\n \n $notFoundRetries--;\n$composer = false;\n}\n}\n\nif ($composer) {\n$composer = JsonFile::parseJson($composer, $resource);\n\nif (!isset($composer['time'])) {\n$resource = 'https://api.github.com/repos/'.$this->owner.'/'.$this->repository.'/commits/'.urlencode($identifier);\n$commit = JsonFile::parseJson($this->getContents($resource), $resource);\n$composer['time'] = $commit['commit']['committer']['date'];\n}\nif (!isset($composer['support']['source'])) {\n$label = array_search($identifier, $this->getTags()) ?: array_search($identifier, $this->getBranches()) ?: $identifier;\n$composer['support']['source'] = sprintf('https://github.com/%s/%s/tree/%s', $this->owner, $this->repository, $label);\n}\nif (!isset($composer['support']['issues']) && $this->hasIssues) {\n$composer['support']['issues'] = sprintf('https://github.com/%s/%s/issues', $this->owner, $this->repository);\n}\n}\n\nif (preg_match('{[a-f0-9]{40}}i', $identifier)) {\n$this->cache->write($identifier, json_encode($composer));\n}\n\n$this->infoCache[$identifier] = $composer;\n}\n\nreturn $this->infoCache[$identifier];\n}\n\n\n\n\npublic function getTags()\n{\nif ($this->gitDriver) {\nreturn $this->gitDriver->getTags();\n}\nif (null === $this->tags) {\n$resource = 'https://api.github.com/repos/'.$this->owner.'/'.$this->repository.'/tags';\n$tagsData = JsonFile::parseJson($this->getContents($resource), $resource);\n$this->tags = array();\nforeach ($tagsData as $tag) {\n$this->tags[$tag['name']] = $tag['commit']['sha'];\n}\n}\n\nreturn $this->tags;\n}\n\n\n\n\npublic function getBranches()\n{\nif ($this->gitDriver) {\nreturn $this->gitDriver->getBranches();\n}\nif (null === $this->branches) {\n$resource = 'https://api.github.com/repos/'.$this->owner.'/'.$this->repository.'/git/refs/heads';\n$branchData = JsonFile::parseJson($this->getContents($resource), $resource);\n$this->branches = array();\nforeach ($branchData as $branch) {\n$name = substr($branch['ref'], 11);\n$this->branches[$name] = $branch['object']['sha'];\n}\n}\n\nreturn $this->branches;\n}\n\n\n\n\npublic static function supports(IOInterface $io, $url, $deep = false)\n{\nif (!preg_match('#^((?:https?|git)://github\\.com/|git@github\\.com:)([^/]+)/(.+?)(?:\\.git)?$#', $url)) {\nreturn false;\n}\n\nif (!extension_loaded('openssl')) {\nif ($io->isVerbose()) {\n$io->write('Skipping GitHub driver for '.$url.' because the OpenSSL PHP extension is missing.');\n}\n\nreturn false;\n}\n\nreturn true;\n}\n\n\n\n\n\n\nprotected function generateSshUrl()\n{\nreturn 'git@github.com:'.$this->owner.'/'.$this->repository.'.git';\n}\n\n\n\n\nprotected function getContents($url, $fetchingRepoData = false)\n{\ntry {\nreturn parent::getContents($url);\n} catch (TransportException $e) {\n$gitHubUtil = new GitHub($this->io, $this->config, $this->process, $this->remoteFilesystem);\n\nswitch ($e->getCode()) {\ncase 401:\ncase 404:\n\n if (!$fetchingRepoData) {\nthrow $e;\n}\n\nif ($gitHubUtil->authorizeOAuth($this->originUrl)) {\nreturn parent::getContents($url);\n}\n\nif (!$this->io->isInteractive()) {\nreturn $this->attemptCloneFallback();\n}\n\n$gitHubUtil->authorizeOAuthInteractively($this->originUrl, 'Your GitHub credentials are required to fetch private repository metadata (<info>'.$this->url.'</info>)');\n\nreturn parent::getContents($url);\n\ncase 403:\nif (!$this->io->hasAuthentication($this->originUrl) && $gitHubUtil->authorizeOAuth($this->originUrl)) {\nreturn parent::getContents($url);\n}\n\nif (!$this->io->isInteractive() && $fetchingRepoData) {\nreturn $this->attemptCloneFallback();\n}\n\n$rateLimited = false;\nforeach ($e->getHeaders() as $header) {\nif (preg_match('{^X-RateLimit-Remaining: *0$}i', trim($header))) {\n$rateLimited = true;\n}\n}\n\nif (!$this->io->hasAuthentication($this->originUrl)) {\nif (!$this->io->isInteractive()) {\n$this->io->write('<error>GitHub API limit exhausted. Failed to get metadata for the '.$this->url.' repository, try running in interactive mode so that you can enter your GitHub credentials to increase the API limit</error>');\nthrow $e;\n}\n\n$gitHubUtil->authorizeOAuthInteractively($this->originUrl, 'API limit exhausted. Enter your GitHub credentials to get a larger API limit (<info>'.$this->url.'</info>)');\n\nreturn parent::getContents($url);\n}\n\nif ($rateLimited) {\n$this->io->write('<error>GitHub API limit exhausted. You are already authorized so you will have to wait a while before doing more requests</error>');\n}\n\nthrow $e;\n\ndefault:\nthrow $e;\n}\n}\n}\n\n\n\n\n\n\nprotected function fetchRootIdentifier()\n{\n$repoDataUrl = 'https://api.github.com/repos/'.$this->owner.'/'.$this->repository;\n\n$repoData = JsonFile::parseJson($this->getContents($repoDataUrl, true), $repoDataUrl);\nif (null === $repoData && null !== $this->gitDriver) {\nreturn;\n}\n\n$this->isPrivate = !empty($repoData['private']);\nif (isset($repoData['default_branch'])) {\n$this->rootIdentifier = $repoData['default_branch'];\n} elseif (isset($repoData['master_branch'])) {\n$this->rootIdentifier = $repoData['master_branch'];\n} else {\n$this->rootIdentifier = 'master';\n}\n$this->hasIssues = !empty($repoData['has_issues']);\n}\n\nprotected function attemptCloneFallback()\n{\n$this->isPrivate = true;\n\ntry {\n\n \n \n \n $this->gitDriver = new GitDriver(\narray('url' => $this->generateSshUrl()),\n$this->io,\n$this->config,\n$this->process,\n$this->remoteFilesystem\n);\n$this->gitDriver->initialize();\n\nreturn;\n} catch (\\RuntimeException $e) {\n$this->gitDriver = null;\n\n$this->io->write('<error>Failed to clone the '.$this->generateSshUrl().' repository, try running in interactive mode so that you can enter your GitHub credentials</error>');\nthrow $e;\n}\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Repository\\Vcs;\n\nuse Composer\\Json\\JsonFile;\nuse Composer\\IO\\IOInterface;\n\n\n\n\nclass GitBitbucketDriver extends VcsDriver implements VcsDriverInterface\n{\nprotected $owner;\nprotected $repository;\nprotected $tags;\nprotected $branches;\nprotected $rootIdentifier;\nprotected $infoCache = array();\n\n\n\n\npublic function initialize()\n{\npreg_match('#^https://bitbucket\\.org/([^/]+)/(.+?)\\.git$#', $this->url, $match);\n$this->owner = $match[1];\n$this->repository = $match[2];\n$this->originUrl = 'bitbucket.org';\n}\n\n\n\n\npublic function getRootIdentifier()\n{\nif (null === $this->rootIdentifier) {\n$resource = $this->getScheme() . '://api.bitbucket.org/1.0/repositories/'.$this->owner.'/'.$this->repository;\n$repoData = JsonFile::parseJson($this->getContents($resource), $resource);\n$this->rootIdentifier = !empty($repoData['main_branch']) ? $repoData['main_branch'] : 'master';\n}\n\nreturn $this->rootIdentifier;\n}\n\n\n\n\npublic function getUrl()\n{\nreturn $this->url;\n}\n\n\n\n\npublic function getSource($identifier)\n{\n$label = array_search($identifier, $this->getTags()) ?: $identifier;\n\nreturn array('type' => 'git', 'url' => $this->getUrl(), 'reference' => $label);\n}\n\n\n\n\npublic function getDist($identifier)\n{\n$label = array_search($identifier, $this->getTags()) ?: $identifier;\n$url = $this->getScheme() . '://bitbucket.org/'.$this->owner.'/'.$this->repository.'/get/'.$label.'.zip';\n\nreturn array('type' => 'zip', 'url' => $url, 'reference' => $label, 'shasum' => '');\n}\n\n\n\n\npublic function getComposerInformation($identifier)\n{\nif (!isset($this->infoCache[$identifier])) {\n$resource = $this->getScheme() . '://bitbucket.org/'.$this->owner.'/'.$this->repository.'/raw/'.$identifier.'/composer.json';\n$composer = $this->getContents($resource);\nif (!$composer) {\nreturn;\n}\n\n$composer = JsonFile::parseJson($composer, $resource);\n\nif (!isset($composer['time'])) {\n$resource = $this->getScheme() . '://api.bitbucket.org/1.0/repositories/'.$this->owner.'/'.$this->repository.'/changesets/'.$identifier;\n$changeset = JsonFile::parseJson($this->getContents($resource), $resource);\n$composer['time'] = $changeset['timestamp'];\n}\n$this->infoCache[$identifier] = $composer;\n}\n\nreturn $this->infoCache[$identifier];\n}\n\n\n\n\npublic function getTags()\n{\nif (null === $this->tags) {\n$resource = $this->getScheme() . '://api.bitbucket.org/1.0/repositories/'.$this->owner.'/'.$this->repository.'/tags';\n$tagsData = JsonFile::parseJson($this->getContents($resource), $resource);\n$this->tags = array();\nforeach ($tagsData as $tag => $data) {\n$this->tags[$tag] = $data['raw_node'];\n}\n}\n\nreturn $this->tags;\n}\n\n\n\n\npublic function getBranches()\n{\nif (null === $this->branches) {\n$resource = $this->getScheme() . '://api.bitbucket.org/1.0/repositories/'.$this->owner.'/'.$this->repository.'/branches';\n$branchData = JsonFile::parseJson($this->getContents($resource), $resource);\n$this->branches = array();\nforeach ($branchData as $branch => $data) {\n$this->branches[$branch] = $data['raw_node'];\n}\n}\n\nreturn $this->branches;\n}\n\n\n\n\npublic static function supports(IOInterface $io, $url, $deep = false)\n{\nif (!preg_match('#^https://bitbucket\\.org/([^/]+)/(.+?)\\.git$#', $url)) {\nreturn false;\n}\n\nif (!extension_loaded('openssl')) {\nif ($io->isVerbose()) {\n$io->write('Skipping Bitbucket git driver for '.$url.' because the OpenSSL PHP extension is missing.');\n}\n\nreturn false;\n}\n\nreturn true;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Repository\\Vcs;\n\nuse Composer\\Json\\JsonFile;\nuse Composer\\Util\\ProcessExecutor;\nuse Composer\\Util\\Filesystem;\nuse Composer\\Util\\Git as GitUtil;\nuse Composer\\IO\\IOInterface;\n\n\n\n\nclass GitDriver extends VcsDriver\n{\nprotected $tags;\nprotected $branches;\nprotected $rootIdentifier;\nprotected $repoDir;\nprotected $infoCache = array();\n\n\n\n\npublic function initialize()\n{\nif (static::isLocalUrl($this->url)) {\n$this->repoDir = str_replace('file://', '', $this->url);\n} else {\n$this->repoDir = $this->config->get('cache-vcs-dir') . '/' . preg_replace('{[^a-z0-9.]}i', '-', $this->url) . '/';\n\n$util = new GitUtil;\n$util->cleanEnv();\n\n$fs = new Filesystem();\n$fs->ensureDirectoryExists(dirname($this->repoDir));\n\nif (!is_writable(dirname($this->repoDir))) {\nthrow new \\RuntimeException('Can not clone '.$this->url.' to access package information. The \"'.dirname($this->repoDir).'\" directory is not writable by the current user.');\n}\n\nif (preg_match('{^ssh://[^@]+@[^:]+:[^0-9]+}', $this->url)) {\nthrow new \\InvalidArgumentException('The source URL '.$this->url.' is invalid, ssh URLs should have a port number after \":\".'.\"\\n\".'Use ssh://git@example.com:22/path or just git@example.com:path if you do not want to provide a password or custom port.');\n}\n\n\n if (is_dir($this->repoDir) && 0 === $this->process->execute('git remote', $output, $this->repoDir)) {\nif (0 !== $this->process->execute('git remote update --prune origin', $output, $this->repoDir)) {\n$this->io->write('<error>Failed to update '.$this->url.', package information from this repository may be outdated ('.$this->process->getErrorOutput().')</error>');\n}\n} else {\n\n $fs->removeDirectory($this->repoDir);\n\n$command = sprintf('git clone --mirror %s %s', escapeshellarg($this->url), escapeshellarg($this->repoDir));\nif (0 !== $this->process->execute($command, $output)) {\n$output = $this->process->getErrorOutput();\n\nif (0 !== $this->process->execute('git --version', $ignoredOutput)) {\nthrow new \\RuntimeException('Failed to clone '.$this->url.', git was not found, check that it is installed and in your PATH env.' . \"\\n\\n\" . $this->process->getErrorOutput());\n}\n\nthrow new \\RuntimeException('Failed to clone '.$this->url.', could not read packages from it' . \"\\n\\n\" .$output);\n}\n}\n}\n\n$this->getTags();\n$this->getBranches();\n}\n\n\n\n\npublic function getRootIdentifier()\n{\nif (null === $this->rootIdentifier) {\n$this->rootIdentifier = 'master';\n\n\n $this->process->execute('git branch --no-color', $output, $this->repoDir);\n$branches = $this->process->splitLines($output);\nif (!in_array('* master', $branches)) {\nforeach ($branches as $branch) {\nif ($branch && preg_match('{^\\* +(\\S+)}', $branch, $match)) {\n$this->rootIdentifier = $match[1];\nbreak;\n}\n}\n}\n}\n\nreturn $this->rootIdentifier;\n}\n\n\n\n\npublic function getUrl()\n{\nreturn $this->url;\n}\n\n\n\n\npublic function getSource($identifier)\n{\n$label = array_search($identifier, (array) $this->tags) ?: $identifier;\n\nreturn array('type' => 'git', 'url' => $this->getUrl(), 'reference' => $label);\n}\n\n\n\n\npublic function getDist($identifier)\n{\nreturn null;\n}\n\n\n\n\npublic function getComposerInformation($identifier)\n{\nif (!isset($this->infoCache[$identifier])) {\n$resource = sprintf('%s:composer.json', escapeshellarg($identifier));\n$this->process->execute(sprintf('git show %s', $resource), $composer, $this->repoDir);\n\nif (!trim($composer)) {\nreturn;\n}\n\n$composer = JsonFile::parseJson($composer, $resource);\n\nif (!isset($composer['time'])) {\n$this->process->execute(sprintf('git log -1 --format=%%at %s', escapeshellarg($identifier)), $output, $this->repoDir);\n$date = new \\DateTime('@'.trim($output), new \\DateTimeZone('UTC'));\n$composer['time'] = $date->format('Y-m-d H:i:s');\n}\n$this->infoCache[$identifier] = $composer;\n}\n\nreturn $this->infoCache[$identifier];\n}\n\n\n\n\npublic function getTags()\n{\nif (null === $this->tags) {\n$this->process->execute('git tag', $output, $this->repoDir);\n$output = $this->process->splitLines($output);\n$this->tags = $output ? array_combine($output, $output) : array();\n}\n\nreturn $this->tags;\n}\n\n\n\n\npublic function getBranches()\n{\nif (null === $this->branches) {\n$branches = array();\n\n$this->process->execute('git branch --no-color --no-abbrev -v', $output, $this->repoDir);\nforeach ($this->process->splitLines($output) as $branch) {\nif ($branch && !preg_match('{^ *[^/]+/HEAD }', $branch)) {\nif (preg_match('{^(?:\\* )? *(\\S+) *([a-f0-9]+) .*$}', $branch, $match)) {\n$branches[$match[1]] = $match[2];\n}\n}\n}\n\n$this->branches = $branches;\n}\n\nreturn $this->branches;\n}\n\n\n\n\npublic static function supports(IOInterface $io, $url, $deep = false)\n{\nif (preg_match('#(^git://|\\.git$|git(?:olite)?@|//git\\.|//github.com/)#i', $url)) {\nreturn true;\n}\n\n\n if (static::isLocalUrl($url)) {\nif (!is_dir($url)) {\nthrow new \\RuntimeException('Directory does not exist: '.$url);\n}\n\n$process = new ProcessExecutor();\n$url = str_replace('file://', '', $url);\n\n if ($process->execute('git tag', $output, $url) === 0) {\nreturn true;\n}\n}\n\nif (!$deep) {\nreturn false;\n}\n\n\n return false;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Repository\\Vcs;\n\nuse Composer\\Cache;\nuse Composer\\Json\\JsonFile;\nuse Composer\\Util\\ProcessExecutor;\nuse Composer\\Util\\Filesystem;\nuse Composer\\Util\\Svn as SvnUtil;\nuse Composer\\IO\\IOInterface;\nuse Composer\\Downloader\\TransportException;\n\n\n\n\n\nclass SvnDriver extends VcsDriver\n{\nprotected $cache;\nprotected $baseUrl;\nprotected $tags;\nprotected $branches;\nprotected $rootIdentifier;\nprotected $infoCache = array();\n\nprotected $trunkPath = 'trunk';\nprotected $branchesPath = 'branches';\nprotected $tagsPath = 'tags';\nprotected $packagePath = '';\n\n\n\n\nprivate $util;\n\n\n\n\npublic function initialize()\n{\n$this->url = $this->baseUrl = rtrim(self::normalizeUrl($this->url), '/');\n\nif (isset($this->repoConfig['trunk-path'])) {\n$this->trunkPath = $this->repoConfig['trunk-path'];\n}\nif (isset($this->repoConfig['branches-path'])) {\n$this->branchesPath = $this->repoConfig['branches-path'];\n}\nif (isset($this->repoConfig['tags-path'])) {\n$this->tagsPath = $this->repoConfig['tags-path'];\n}\nif (isset($this->repoConfig['package-path'])) {\n$this->packagePath = '/' . trim($this->repoConfig['package-path'], '/');\n}\n\nif (false !== ($pos = strrpos($this->url, '/' . $this->trunkPath))) {\n$this->baseUrl = substr($this->url, 0, $pos);\n}\n\n$this->cache = new Cache($this->io, $this->config->get('cache-repo-dir').'/'.preg_replace('{[^a-z0-9.]}i', '-', $this->baseUrl));\n\n$this->getBranches();\n$this->getTags();\n}\n\n\n\n\npublic function getRootIdentifier()\n{\nreturn $this->rootIdentifier ?: $this->trunkPath;\n}\n\n\n\n\npublic function getUrl()\n{\nreturn $this->url;\n}\n\n\n\n\npublic function getSource($identifier)\n{\nreturn array('type' => 'svn', 'url' => $this->baseUrl, 'reference' => $identifier);\n}\n\n\n\n\npublic function getDist($identifier)\n{\nreturn null;\n}\n\n\n\n\npublic function getComposerInformation($identifier)\n{\n$identifier = '/' . trim($identifier, '/') . '/';\n\nif ($res = $this->cache->read($identifier.'.json')) {\n$this->infoCache[$identifier] = JsonFile::parseJson($res);\n}\n\nif (!isset($this->infoCache[$identifier])) {\npreg_match('{^(.+?)(@\\d+)?/$}', $identifier, $match);\nif (!empty($match[2])) {\n$path = $match[1];\n$rev = $match[2];\n} else {\n$path = $identifier;\n$rev = '';\n}\n\ntry {\n$resource = $path.'composer.json';\n$output = $this->execute('svn cat', $this->baseUrl . $resource . $rev);\nif (!trim($output)) {\nreturn;\n}\n} catch (\\RuntimeException $e) {\nthrow new TransportException($e->getMessage());\n}\n\n$composer = JsonFile::parseJson($output, $this->baseUrl . $resource . $rev);\n\nif (!isset($composer['time'])) {\n$output = $this->execute('svn info', $this->baseUrl . $path . $rev);\nforeach ($this->process->splitLines($output) as $line) {\nif ($line && preg_match('{^Last Changed Date: ([^(]+)}', $line, $match)) {\n$date = new \\DateTime($match[1], new \\DateTimeZone('UTC'));\n$composer['time'] = $date->format('Y-m-d H:i:s');\nbreak;\n}\n}\n}\n\n$this->cache->write($identifier.'.json', json_encode($composer));\n$this->infoCache[$identifier] = $composer;\n}\n\nreturn $this->infoCache[$identifier];\n}\n\n\n\n\npublic function getTags()\n{\nif (null === $this->tags) {\n$this->tags = array();\n\nif ($this->tagsPath !== false) {\n$output = $this->execute('svn ls --verbose', $this->baseUrl . '/' . $this->tagsPath);\nif ($output) {\nforeach ($this->process->splitLines($output) as $line) {\n$line = trim($line);\nif ($line && preg_match('{^\\s*(\\S+).*?(\\S+)\\s*$}', $line, $match)) {\nif (isset($match[1]) && isset($match[2]) && $match[2] !== './') {\n$this->tags[rtrim($match[2], '/')] = $this->buildIdentifier(\n'/' . $this->tagsPath . '/' . $match[2],\n$match[1]\n);\n}\n}\n}\n}\n}\n}\n\nreturn $this->tags;\n}\n\n\n\n\npublic function getBranches()\n{\nif (null === $this->branches) {\n$this->branches = array();\n\n$output = $this->execute('svn ls --verbose', $this->baseUrl . '/');\nif ($output) {\nforeach ($this->process->splitLines($output) as $line) {\n$line = trim($line);\nif ($line && preg_match('{^\\s*(\\S+).*?(\\S+)\\s*$}', $line, $match)) {\nif (isset($match[1]) && isset($match[2]) && $match[2] === $this->trunkPath . '/') {\n$this->branches[$this->trunkPath] = $this->buildIdentifier(\n'/' . $this->trunkPath,\n$match[1]\n);\n$this->rootIdentifier = $this->branches[$this->trunkPath];\nbreak;\n}\n}\n}\n}\nunset($output);\n\nif ($this->branchesPath !== false) {\n$output = $this->execute('svn ls --verbose', $this->baseUrl . '/' . $this->branchesPath);\nif ($output) {\nforeach ($this->process->splitLines(trim($output)) as $line) {\n$line = trim($line);\nif ($line && preg_match('{^\\s*(\\S+).*?(\\S+)\\s*$}', $line, $match)) {\nif (isset($match[1]) && isset($match[2]) && $match[2] !== './') {\n$this->branches[rtrim($match[2], '/')] = $this->buildIdentifier(\n'/' . $this->branchesPath . '/' . $match[2],\n$match[1]\n);\n}\n}\n}\n}\n}\n}\n\nreturn $this->branches;\n}\n\n\n\n\npublic static function supports(IOInterface $io, $url, $deep = false)\n{\n$url = self::normalizeUrl($url);\nif (preg_match('#(^svn://|^svn\\+ssh://|svn\\.)#i', $url)) {\nreturn true;\n}\n\n\n if (!$deep && !static::isLocalUrl($url)) {\nreturn false;\n}\n\n$processExecutor = new ProcessExecutor();\n\n$exit = $processExecutor->execute(\n\"svn info --non-interactive {$url}\",\n$ignoredOutput\n);\n\nif ($exit === 0) {\n\n return true;\n}\n\nif (false !== stripos($processExecutor->getErrorOutput(), 'authorization failed:')) {\n\n \n return true;\n}\n\nreturn false;\n}\n\n\n\n\n\n\n\n\nprotected static function normalizeUrl($url)\n{\n$fs = new Filesystem();\nif ($fs->isAbsolutePath($url)) {\nreturn 'file://' . strtr($url, '\\\\', '/');\n}\n\nreturn $url;\n}\n\n\n\n\n\n\n\n\n\n\nprotected function execute($command, $url)\n{\nif (null === $this->util) {\n$this->util = new SvnUtil($this->baseUrl, $this->io, $this->process);\n}\n\ntry {\nreturn $this->util->execute($command, $url);\n} catch (\\RuntimeException $e) {\nif (0 !== $this->process->execute('svn --version', $ignoredOutput)) {\nthrow new \\RuntimeException('Failed to load '.$this->url.', svn was not found, check that it is installed and in your PATH env.' . \"\\n\\n\" . $this->process->getErrorOutput());\n}\n\nthrow new \\RuntimeException(\n'Repository '.$this->url.' could not be processed, '.$e->getMessage()\n);\n}\n}\n\n\n\n\n\n\n\n\n\nprotected function buildIdentifier($baseDir, $revision)\n{\nreturn rtrim($baseDir, '/') . $this->packagePath . '/@' . $revision;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Repository\\Vcs;\n\nuse Composer\\IO\\IOInterface;\n\n\n\n\ninterface VcsDriverInterface\n{\n\n\n\npublic function initialize();\n\n\n\n\n\n\n\npublic function getComposerInformation($identifier);\n\n\n\n\n\n\npublic function getRootIdentifier();\n\n\n\n\n\n\npublic function getBranches();\n\n\n\n\n\n\npublic function getTags();\n\n\n\n\n\npublic function getDist($identifier);\n\n\n\n\n\npublic function getSource($identifier);\n\n\n\n\n\n\npublic function getUrl();\n\n\n\n\n\n\n\n\npublic function hasComposerFile($identifier);\n\n\n\n\n\n\n\n\n\npublic static function supports(IOInterface $io, $url, $deep = false);\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Repository\\Vcs;\n\nuse Composer\\Json\\JsonFile;\nuse Composer\\Util\\ProcessExecutor;\nuse Composer\\Util\\Filesystem;\nuse Composer\\IO\\IOInterface;\n\n\n\n\nclass HgDriver extends VcsDriver\n{\nprotected $tags;\nprotected $branches;\nprotected $rootIdentifier;\nprotected $repoDir;\nprotected $infoCache = array();\n\n\n\n\npublic function initialize()\n{\nif (static::isLocalUrl($this->url)) {\n$this->repoDir = str_replace('file://', '', $this->url);\n} else {\n$cacheDir = $this->config->get('cache-vcs-dir');\n$this->repoDir = $cacheDir . '/' . preg_replace('{[^a-z0-9]}i', '-', $this->url) . '/';\n\n$fs = new Filesystem();\n$fs->ensureDirectoryExists($cacheDir);\n\nif (!is_writable(dirname($this->repoDir))) {\nthrow new \\RuntimeException('Can not clone '.$this->url.' to access package information. The \"'.$cacheDir.'\" directory is not writable by the current user.');\n}\n\n\n if (is_dir($this->repoDir) && 0 === $this->process->execute('hg summary', $output, $this->repoDir)) {\nif (0 !== $this->process->execute('hg pull -u', $output, $this->repoDir)) {\n$this->io->write('<error>Failed to update '.$this->url.', package information from this repository may be outdated ('.$this->process->getErrorOutput().')</error>');\n}\n} else {\n\n $fs->removeDirectory($this->repoDir);\n\nif (0 !== $this->process->execute(sprintf('hg clone %s %s', escapeshellarg($this->url), escapeshellarg($this->repoDir)), $output, $cacheDir)) {\n$output = $this->process->getErrorOutput();\n\nif (0 !== $this->process->execute('hg --version', $ignoredOutput)) {\nthrow new \\RuntimeException('Failed to clone '.$this->url.', hg was not found, check that it is installed and in your PATH env.' . \"\\n\\n\" . $this->process->getErrorOutput());\n}\n\nthrow new \\RuntimeException('Failed to clone '.$this->url.', could not read packages from it' . \"\\n\\n\" .$output);\n}\n}\n}\n\n$this->getTags();\n$this->getBranches();\n}\n\n\n\n\npublic function getRootIdentifier()\n{\nif (null === $this->rootIdentifier) {\n$this->process->execute(sprintf('hg tip --template \"{node}\"'), $output, $this->repoDir);\n$output = $this->process->splitLines($output);\n$this->rootIdentifier = $output[0];\n}\n\nreturn $this->rootIdentifier;\n}\n\n\n\n\npublic function getUrl()\n{\nreturn $this->url;\n}\n\n\n\n\npublic function getSource($identifier)\n{\n$label = array_search($identifier, (array) $this->tags) ? : $identifier;\n\nreturn array('type' => 'hg', 'url' => $this->getUrl(), 'reference' => $label);\n}\n\n\n\n\npublic function getDist($identifier)\n{\nreturn null;\n}\n\n\n\n\npublic function getComposerInformation($identifier)\n{\nif (!isset($this->infoCache[$identifier])) {\n$this->process->execute(sprintf('hg cat -r %s composer.json', escapeshellarg($identifier)), $composer, $this->repoDir);\n\nif (!trim($composer)) {\nreturn;\n}\n\n$composer = JsonFile::parseJson($composer, $identifier);\n\nif (!isset($composer['time'])) {\n$this->process->execute(sprintf('hg log --template \"{date|rfc822date}\" -r %s', escapeshellarg($identifier)), $output, $this->repoDir);\n$date = new \\DateTime(trim($output), new \\DateTimeZone('UTC'));\n$composer['time'] = $date->format('Y-m-d H:i:s');\n}\n$this->infoCache[$identifier] = $composer;\n}\n\nreturn $this->infoCache[$identifier];\n}\n\n\n\n\npublic function getTags()\n{\nif (null === $this->tags) {\n$tags = array();\n\n$this->process->execute('hg tags', $output, $this->repoDir);\nforeach ($this->process->splitLines($output) as $tag) {\nif ($tag && preg_match('(^([^\\s]+)\\s+\\d+:(.*)$)', $tag, $match)) {\n$tags[$match[1]] = $match[2];\n}\n}\nunset($tags['tip']);\n\n$this->tags = $tags;\n}\n\nreturn $this->tags;\n}\n\n\n\n\npublic function getBranches()\n{\nif (null === $this->branches) {\n$branches = array();\n$bookmarks = array();\n\n$this->process->execute('hg branches', $output, $this->repoDir);\nforeach ($this->process->splitLines($output) as $branch) {\nif ($branch && preg_match('(^([^\\s]+)\\s+\\d+:([a-f0-9]+))', $branch, $match)) {\n$branches[$match[1]] = $match[2];\n}\n}\n\n$this->process->execute('hg bookmarks', $output, $this->repoDir);\nforeach ($this->process->splitLines($output) as $branch) {\nif ($branch && preg_match('(^(?:[\\s*]*)([^\\s]+)\\s+\\d+:(.*)$)', $branch, $match)) {\n$bookmarks[$match[1]] = $match[2];\n}\n}\n\n\n $this->branches = array_merge($bookmarks, $branches);\n}\n\nreturn $this->branches;\n}\n\n\n\n\npublic static function supports(IOInterface $io, $url, $deep = false)\n{\nif (preg_match('#(^(?:https?|ssh)://(?:[^@]@)?bitbucket.org|https://(?:.*?)\\.kilnhg.com)#i', $url)) {\nreturn true;\n}\n\n\n if (static::isLocalUrl($url)) {\nif (!is_dir($url)) {\nthrow new \\RuntimeException('Directory does not exist: '.$url);\n}\n\n$process = new ProcessExecutor();\n$url = str_replace('file://', '', $url);\n\n if ($process->execute('hg summary', $output, $url) === 0) {\nreturn true;\n}\n}\n\nif (!$deep) {\nreturn false;\n}\n\n$processExecutor = new ProcessExecutor();\n$exit = $processExecutor->execute(sprintf('hg identify %s', escapeshellarg($url)), $ignored);\n\nreturn $exit === 0;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Repository\\Vcs;\n\nuse Composer\\Downloader\\TransportException;\nuse Composer\\Config;\nuse Composer\\IO\\IOInterface;\nuse Composer\\Util\\ProcessExecutor;\nuse Composer\\Util\\RemoteFilesystem;\n\n\n\n\n\n\nabstract class VcsDriver implements VcsDriverInterface\n{\nprotected $url;\nprotected $originUrl;\nprotected $repoConfig;\nprotected $io;\nprotected $config;\nprotected $process;\nprotected $remoteFilesystem;\n\n\n\n\n\n\n\n\n\n\nfinal public function __construct(array $repoConfig, IOInterface $io, Config $config, ProcessExecutor $process = null, RemoteFilesystem $remoteFilesystem = null)\n{\n\nif (self::isLocalUrl($repoConfig['url'])) {\n$repoConfig['url'] = realpath(\npreg_replace('/^file:\\/\\//', '', $repoConfig['url'])\n);\n}\n\n$this->url = $repoConfig['url'];\n$this->originUrl = $repoConfig['url'];\n$this->repoConfig = $repoConfig;\n$this->io = $io;\n$this->config = $config;\n$this->process = $process ?: new ProcessExecutor;\n$this->remoteFilesystem = $remoteFilesystem ?: new RemoteFilesystem($io);\n}\n\n\n\n\npublic function hasComposerFile($identifier)\n{\ntry {\nreturn (bool) $this->getComposerInformation($identifier);\n} catch (TransportException $e) {\n}\n\nreturn false;\n}\n\n\n\n\n\n\n\n\nprotected function getScheme()\n{\nif (extension_loaded('openssl')) {\nreturn 'https';\n}\n\nreturn 'http';\n}\n\n\n\n\n\n\n\n\nprotected function getContents($url)\n{\nreturn $this->remoteFilesystem->getContents($this->originUrl, $url, false);\n}\n\nprotected static function isLocalUrl($url)\n{\nreturn (bool) preg_match('{^(file://|/|[a-z]:[\\\\\\\\/])}i', $url);\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Repository\\Vcs;\n\nuse Composer\\Json\\JsonFile;\nuse Composer\\IO\\IOInterface;\n\n\n\n\nclass HgBitbucketDriver extends VcsDriver\n{\nprotected $owner;\nprotected $repository;\nprotected $tags;\nprotected $branches;\nprotected $rootIdentifier;\nprotected $infoCache = array();\n\n\n\n\npublic function initialize()\n{\npreg_match('#^https://bitbucket\\.org/([^/]+)/([^/]+)/?$#', $this->url, $match);\n$this->owner = $match[1];\n$this->repository = $match[2];\n$this->originUrl = 'bitbucket.org';\n}\n\n\n\n\npublic function getRootIdentifier()\n{\nif (null === $this->rootIdentifier) {\n$resource = $this->getScheme() . '://api.bitbucket.org/1.0/repositories/'.$this->owner.'/'.$this->repository.'/tags';\n$repoData = JsonFile::parseJson($this->getContents($resource), $resource);\nif (array() === $repoData) {\nthrow new \\RuntimeException('This does not appear to be a mercurial repository, use '.$this->url.'.git if this is a git bitbucket repository');\n}\n$this->rootIdentifier = $repoData['tip']['raw_node'];\n}\n\nreturn $this->rootIdentifier;\n}\n\n\n\n\npublic function getUrl()\n{\nreturn $this->url;\n}\n\n\n\n\npublic function getSource($identifier)\n{\n$label = array_search($identifier, $this->getTags()) ?: $identifier;\n\nreturn array('type' => 'hg', 'url' => $this->getUrl(), 'reference' => $label);\n}\n\n\n\n\npublic function getDist($identifier)\n{\n$label = array_search($identifier, $this->getTags()) ?: $identifier;\n$url = $this->getScheme() . '://bitbucket.org/'.$this->owner.'/'.$this->repository.'/get/'.$label.'.zip';\n\nreturn array('type' => 'zip', 'url' => $url, 'reference' => $label, 'shasum' => '');\n}\n\n\n\n\npublic function getComposerInformation($identifier)\n{\nif (!isset($this->infoCache[$identifier])) {\n$resource = $this->getScheme() . '://bitbucket.org/'.$this->owner.'/'.$this->repository.'/raw/'.$identifier.'/composer.json';\n$composer = $this->getContents($resource);\nif (!$composer) {\nreturn;\n}\n\n$composer = JsonFile::parseJson($composer, $resource);\n\nif (!isset($composer['time'])) {\n$resource = $this->getScheme() . '://api.bitbucket.org/1.0/repositories/'.$this->owner.'/'.$this->repository.'/changesets/'.$identifier;\n$changeset = JsonFile::parseJson($this->getContents($resource), $resource);\n$composer['time'] = $changeset['timestamp'];\n}\n$this->infoCache[$identifier] = $composer;\n}\n\nreturn $this->infoCache[$identifier];\n}\n\n\n\n\npublic function getTags()\n{\nif (null === $this->tags) {\n$resource = $this->getScheme() . '://api.bitbucket.org/1.0/repositories/'.$this->owner.'/'.$this->repository.'/tags';\n$tagsData = JsonFile::parseJson($this->getContents($resource), $resource);\n$this->tags = array();\nforeach ($tagsData as $tag => $data) {\n$this->tags[$tag] = $data['raw_node'];\n}\n}\n\nreturn $this->tags;\n}\n\n\n\n\npublic function getBranches()\n{\nif (null === $this->branches) {\n$resource = $this->getScheme() . '://api.bitbucket.org/1.0/repositories/'.$this->owner.'/'.$this->repository.'/branches';\n$branchData = JsonFile::parseJson($this->getContents($resource), $resource);\n$this->branches = array();\nforeach ($branchData as $branch => $data) {\n$this->branches[$branch] = $data['raw_node'];\n}\n}\n\nreturn $this->branches;\n}\n\n\n\n\npublic static function supports(IOInterface $io, $url, $deep = false)\n{\nif (!preg_match('#^https://bitbucket\\.org/([^/]+)/([^/]+)/?$#', $url)) {\nreturn false;\n}\n\nif (!extension_loaded('openssl')) {\nif ($io->isVerbose()) {\n$io->write('Skipping Bitbucket hg driver for '.$url.' because the OpenSSL PHP extension is missing.');\n}\n\nreturn false;\n}\n\nreturn true;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Repository;\n\n\n\n\n\n\n\n\nclass InstalledArrayRepository extends WritableArrayRepository implements InstalledRepositoryInterface\n{\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Repository;\n\n\n\n\n\n\nclass RepositorySecurityException extends \\Exception\n{\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Repository;\n\nuse Composer\\Package\\AliasPackage;\nuse Composer\\Package\\PackageInterface;\n\n\n\n\ninterface StreamableRepositoryInterface extends RepositoryInterface\n{\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npublic function getMinimalPackages();\n\n\n\n\n\n\n\npublic function loadPackage(array $data);\n\n\n\n\n\n\n\n\npublic function loadAliasPackage(array $data, PackageInterface $aliasOf);\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Repository;\n\nuse Composer\\Downloader\\TransportException;\nuse Composer\\Repository\\Vcs\\VcsDriverInterface;\nuse Composer\\Package\\Version\\VersionParser;\nuse Composer\\Package\\Loader\\ArrayLoader;\nuse Composer\\Package\\Loader\\ValidatingArrayLoader;\nuse Composer\\Package\\Loader\\InvalidPackageException;\nuse Composer\\Package\\Loader\\LoaderInterface;\nuse Composer\\IO\\IOInterface;\nuse Composer\\Config;\n\n\n\n\nclass VcsRepository extends ArrayRepository\n{\nprotected $url;\nprotected $packageName;\nprotected $verbose;\nprotected $io;\nprotected $config;\nprotected $versionParser;\nprotected $type;\nprotected $loader;\nprotected $repoConfig;\nprotected $branchErrorOccurred = false;\n\npublic function __construct(array $repoConfig, IOInterface $io, Config $config, array $drivers = null)\n{\n$this->drivers = $drivers ?: array(\n'github' => 'Composer\\Repository\\Vcs\\GitHubDriver',\n'git-bitbucket' => 'Composer\\Repository\\Vcs\\GitBitbucketDriver',\n'git' => 'Composer\\Repository\\Vcs\\GitDriver',\n'hg-bitbucket' => 'Composer\\Repository\\Vcs\\HgBitbucketDriver',\n'hg' => 'Composer\\Repository\\Vcs\\HgDriver',\n\n 'svn' => 'Composer\\Repository\\Vcs\\SvnDriver',\n);\n\n$this->url = $repoConfig['url'];\n$this->io = $io;\n$this->type = isset($repoConfig['type']) ? $repoConfig['type'] : 'vcs';\n$this->verbose = $io->isVerbose();\n$this->config = $config;\n$this->repoConfig = $repoConfig;\n}\n\npublic function setLoader(LoaderInterface $loader)\n{\n$this->loader = $loader;\n}\n\npublic function getDriver()\n{\nif (isset($this->drivers[$this->type])) {\n$class = $this->drivers[$this->type];\n$driver = new $class($this->repoConfig, $this->io, $this->config);\n$driver->initialize();\n\nreturn $driver;\n}\n\nforeach ($this->drivers as $driver) {\nif ($driver::supports($this->io, $this->url)) {\n$driver = new $driver($this->repoConfig, $this->io, $this->config);\n$driver->initialize();\n\nreturn $driver;\n}\n}\n\nforeach ($this->drivers as $driver) {\nif ($driver::supports($this->io, $this->url, true)) {\n$driver = new $driver($this->repoConfig, $this->io, $this->config);\n$driver->initialize();\n\nreturn $driver;\n}\n}\n}\n\npublic function hadInvalidBranches()\n{\nreturn $this->branchErrorOccurred;\n}\n\nprotected function initialize()\n{\nparent::initialize();\n\n$verbose = $this->verbose;\n\n$driver = $this->getDriver();\nif (!$driver) {\nthrow new \\InvalidArgumentException('No driver found to handle VCS repository '.$this->url);\n}\n\n$this->versionParser = new VersionParser;\nif (!$this->loader) {\n$this->loader = new ArrayLoader($this->versionParser);\n}\n\ntry {\nif ($driver->hasComposerFile($driver->getRootIdentifier())) {\n$data = $driver->getComposerInformation($driver->getRootIdentifier());\n$this->packageName = !empty($data['name']) ? $data['name'] : null;\n}\n} catch (\\Exception $e) {\nif ($verbose) {\n$this->io->write('<error>Skipped parsing '.$driver->getRootIdentifier().', '.$e->getMessage().'</error>');\n}\n}\n\nforeach ($driver->getTags() as $tag => $identifier) {\n$msg = 'Reading composer.json of <info>' . ($this->packageName ?: $this->url) . '</info> (<comment>' . $tag . '</comment>)';\nif ($verbose) {\n$this->io->write($msg);\n} else {\n$this->io->overwrite($msg, false);\n}\n\n\n $tag = str_replace('release-', '', $tag);\n\nif (!$parsedTag = $this->validateTag($tag)) {\nif ($verbose) {\n$this->io->write('<warning>Skipped tag '.$tag.', invalid tag name</warning>');\n}\ncontinue;\n}\n\ntry {\nif (!$data = $driver->getComposerInformation($identifier)) {\nif ($verbose) {\n$this->io->write('<warning>Skipped tag '.$tag.', no composer file</warning>');\n}\ncontinue;\n}\n\n\n if (isset($data['version'])) {\n$data['version_normalized'] = $this->versionParser->normalize($data['version']);\n} else {\n\n $data['version'] = $tag;\n$data['version_normalized'] = $parsedTag;\n}\n\n\n $data['version'] = preg_replace('{[.-]?dev$}i', '', $data['version']);\n$data['version_normalized'] = preg_replace('{(^dev-|[.-]?dev$)}i', '', $data['version_normalized']);\n\n\n if ($data['version_normalized'] !== $parsedTag) {\nif ($verbose) {\n$this->io->write('<warning>Skipped tag '.$tag.', tag ('.$parsedTag.') does not match version ('.$data['version_normalized'].') in composer.json</warning>');\n}\ncontinue;\n}\n\nif ($verbose) {\n$this->io->write('Importing tag '.$tag.' ('.$data['version_normalized'].')');\n}\n\n$this->addPackage($this->loader->load($this->preProcess($driver, $data, $identifier)));\n} catch (\\Exception $e) {\nif ($verbose) {\n$this->io->write('<warning>Skipped tag '.$tag.', '.($e instanceof TransportException ? 'no composer file was found' : $e->getMessage()).'</warning>');\n}\ncontinue;\n}\n}\n\nif (!$verbose) {\n$this->io->overwrite('', false);\n}\n\nforeach ($driver->getBranches() as $branch => $identifier) {\n$msg = 'Reading composer.json of <info>' . ($this->packageName ?: $this->url) . '</info> (<comment>' . $branch . '</comment>)';\nif ($verbose) {\n$this->io->write($msg);\n} else {\n$this->io->overwrite($msg, false);\n}\n\nif (!$parsedBranch = $this->validateBranch($branch)) {\nif ($verbose) {\n$this->io->write('<warning>Skipped branch '.$branch.', invalid name</warning>');\n}\ncontinue;\n}\n\ntry {\nif (!$data = $driver->getComposerInformation($identifier)) {\nif ($verbose) {\n$this->io->write('<warning>Skipped branch '.$branch.', no composer file</warning>');\n}\ncontinue;\n}\n\n\n $data['version'] = $branch;\n$data['version_normalized'] = $parsedBranch;\n\n\n if ('dev-' === substr($parsedBranch, 0, 4) || '9999999-dev' === $parsedBranch) {\n$data['version'] = 'dev-' . $data['version'];\n} else {\n$data['version'] = preg_replace('{(\\.9{7})+}', '.x', $parsedBranch);\n}\n\nif ($verbose) {\n$this->io->write('Importing branch '.$branch.' ('.$data['version'].')');\n}\n\n$packageData = $this->preProcess($driver, $data, $identifier);\n$package = $this->loader->load($packageData);\nif ($this->loader instanceof ValidatingArrayLoader && $this->loader->getWarnings()) {\nthrow new InvalidPackageException($this->loader->getErrors(), $this->loader->getWarnings(), $packageData);\n}\n$this->addPackage($package);\n} catch (TransportException $e) {\nif ($verbose) {\n$this->io->write('<warning>Skipped branch '.$branch.', no composer file was found</warning>');\n}\ncontinue;\n} catch (\\Exception $e) {\nif (!$verbose) {\n$this->io->write('');\n}\n$this->branchErrorOccurred = true;\n$this->io->write('<error>Skipped branch '.$branch.', '.$e->getMessage().'</error>');\n$this->io->write('');\ncontinue;\n}\n}\n\nif (!$verbose) {\n$this->io->overwrite('', false);\n}\n\nif (!$this->getPackages()) {\nthrow new InvalidRepositoryException('No valid composer.json was found in any branch or tag of '.$this->url.', could not load a package from it.');\n}\n}\n\nprivate function preProcess(VcsDriverInterface $driver, array $data, $identifier)\n{\n\n $data['name'] = $this->packageName ?: $data['name'];\n\nif (!isset($data['dist'])) {\n$data['dist'] = $driver->getDist($identifier);\n}\nif (!isset($data['source'])) {\n$data['source'] = $driver->getSource($identifier);\n}\n\nreturn $data;\n}\n\nprivate function validateBranch($branch)\n{\ntry {\nreturn $this->versionParser->normalizeBranch($branch);\n} catch (\\Exception $e) {\n}\n\nreturn false;\n}\n\nprivate function validateTag($version)\n{\ntry {\nreturn $this->versionParser->normalize($version);\n} catch (\\Exception $e) {\n}\n\nreturn false;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Repository;\n\nuse Composer\\Package\\CompletePackage;\nuse Composer\\Package\\Version\\VersionParser;\n\n\n\n\nclass PlatformRepository extends ArrayRepository\n{\nconst PLATFORM_PACKAGE_REGEX = '{^(?:php(?:-64bit)?|(?:ext|lib)-[^/]+)$}i';\n\nprotected function initialize()\n{\nparent::initialize();\n\n$versionParser = new VersionParser();\n\ntry {\n$prettyVersion = PHP_VERSION;\n$version = $versionParser->normalize($prettyVersion);\n} catch (\\UnexpectedValueException $e) {\n$prettyVersion = preg_replace('#^([^~+-]+).*$#', '$1', PHP_VERSION);\n$version = $versionParser->normalize($prettyVersion);\n}\n\n$php = new CompletePackage('php', $version, $prettyVersion);\n$php->setDescription('The PHP interpreter');\nparent::addPackage($php);\n\nif (PHP_INT_SIZE === 8) {\n$php64 = new CompletePackage('php-64bit', $version, $prettyVersion);\n$php64->setDescription('The PHP interpreter (64bit)');\nparent::addPackage($php64);\n}\n\n$loadedExtensions = get_loaded_extensions();\n\n\n foreach ($loadedExtensions as $name) {\nif (in_array($name, array('standard', 'Core'))) {\ncontinue;\n}\n\n$reflExt = new \\ReflectionExtension($name);\ntry {\n$prettyVersion = $reflExt->getVersion();\n$version = $versionParser->normalize($prettyVersion);\n} catch (\\UnexpectedValueException $e) {\n$prettyVersion = '0';\n$version = $versionParser->normalize($prettyVersion);\n}\n\n$ext = new CompletePackage('ext-'.$name, $version, $prettyVersion);\n$ext->setDescription('The '.$name.' PHP extension');\nparent::addPackage($ext);\n}\n\n\n \n \n foreach ($loadedExtensions as $name) {\n$prettyVersion = null;\nswitch ($name) {\ncase 'curl':\n$curlVersion = curl_version();\n$prettyVersion = $curlVersion['version'];\nbreak;\n\ncase 'iconv':\n$prettyVersion = ICONV_VERSION;\nbreak;\n\ncase 'intl':\n$name = 'ICU';\nif (defined('INTL_ICU_VERSION')) {\n$prettyVersion = INTL_ICU_VERSION;\n} else {\n$reflector = new \\ReflectionExtension('intl');\n\nob_start();\n$reflector->info();\n$output = ob_get_clean();\n\npreg_match('/^ICU version => (.*)$/m', $output, $matches);\n$prettyVersion = $matches[1];\n}\n\nbreak;\n\ncase 'libxml':\n$prettyVersion = LIBXML_DOTTED_VERSION;\nbreak;\n\ncase 'openssl':\n$prettyVersion = preg_replace_callback('{^(?:OpenSSL\\s*)?([0-9.]+)([a-z]?).*}', function ($match) {\nreturn $match[1] . (empty($match[2]) ? '' : '.'.(ord($match[2]) - 96));\n}, OPENSSL_VERSION_TEXT);\nbreak;\n\ncase 'pcre':\n$prettyVersion = preg_replace('{^(\\S+).*}', '$1', PCRE_VERSION);\nbreak;\n\ncase 'uuid':\n$prettyVersion = phpversion('uuid');\nbreak;\n\ncase 'xsl':\n$prettyVersion = LIBXSLT_DOTTED_VERSION;\nbreak;\n\ndefault:\n\n continue 2;\n}\n\ntry {\n$version = $versionParser->normalize($prettyVersion);\n} catch (\\UnexpectedValueException $e) {\ncontinue;\n}\n\n$lib = new CompletePackage('lib-'.$name, $version, $prettyVersion);\n$lib->setDescription('The '.$name.' PHP library');\nparent::addPackage($lib);\n}\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Repository;\n\n\n\n\n\n\nclass InstalledFilesystemRepository extends FilesystemRepository implements InstalledRepositoryInterface\n{\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Repository;\n\nuse Composer\\Package\\PackageInterface;\n\n\n\n\n\n\nclass CompositeRepository implements RepositoryInterface\n{\n\n\n\n\nprivate $repositories;\n\n\n\n\n\npublic function __construct(array $repositories)\n{\n$this->repositories = array();\nforeach ($repositories as $repo) {\n$this->addRepository($repo);\n}\n}\n\n\n\n\n\n\npublic function getRepositories()\n{\nreturn $this->repositories;\n}\n\n\n\n\npublic function hasPackage(PackageInterface $package)\n{\nforeach ($this->repositories as $repository) {\n\nif ($repository->hasPackage($package)) {\nreturn true;\n}\n}\n\nreturn false;\n}\n\n\n\n\npublic function findPackage($name, $version)\n{\nforeach ($this->repositories as $repository) {\n\n$package = $repository->findPackage($name, $version);\nif (null !== $package) {\nreturn $package;\n}\n}\n\nreturn null;\n}\n\n\n\n\npublic function findPackages($name, $version = null)\n{\n$packages = array();\nforeach ($this->repositories as $repository) {\n\n$packages[] = $repository->findPackages($name, $version);\n}\n\nreturn call_user_func_array('array_merge', $packages);\n}\n\n\n\n\npublic function search($query, $mode = 0)\n{\n$matches = array();\nforeach ($this->repositories as $repository) {\n\n$matches[] = $repository->search($query, $mode);\n}\n\nreturn call_user_func_array('array_merge', $matches);\n}\n\n\n\n\npublic function filterPackages($callback, $class = 'Composer\\Package\\Package')\n{\nforeach ($this->repositories as $repository) {\nif (false === $repository->filterPackages($callback, $class)) {\nreturn false;\n}\n}\n\nreturn true;\n}\n\n\n\n\npublic function getPackages()\n{\n$packages = array();\nforeach ($this->repositories as $repository) {\n\n$packages[] = $repository->getPackages();\n}\n\nreturn call_user_func_array('array_merge', $packages);\n}\n\n\n\n\npublic function removePackage(PackageInterface $package)\n{\nforeach ($this->repositories as $repository) {\n\n$repository->removePackage($package);\n}\n}\n\n\n\n\npublic function count()\n{\n$total = 0;\nforeach ($this->repositories as $repository) {\n\n$total += $repository->count();\n}\n\nreturn $total;\n}\n\n\n\n\n\npublic function addRepository(RepositoryInterface $repository)\n{\nif ($repository instanceof self) {\nforeach ($repository->getRepositories() as $repo) {\n$this->addRepository($repo);\n}\n} else {\n$this->repositories[] = $repository;\n}\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Repository;\n\n\n\n\n\n\n\n\ninterface InstalledRepositoryInterface extends WritableRepositoryInterface\n{\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Repository;\n\nuse Composer\\Package\\Loader\\ArrayLoader;\nuse Composer\\Package\\PackageInterface;\nuse Composer\\Package\\AliasPackage;\nuse Composer\\Package\\Version\\VersionParser;\nuse Composer\\DependencyResolver\\Pool;\nuse Composer\\Json\\JsonFile;\nuse Composer\\Cache;\nuse Composer\\Config;\nuse Composer\\IO\\IOInterface;\nuse Composer\\Util\\RemoteFilesystem;\n\n\n\n\nclass ComposerRepository extends ArrayRepository implements StreamableRepositoryInterface\n{\nprotected $config;\nprotected $options;\nprotected $url;\nprotected $baseUrl;\nprotected $io;\nprotected $rfs;\nprotected $cache;\nprotected $notifyUrl;\nprotected $searchUrl;\nprotected $hasProviders = false;\nprotected $providersUrl;\nprotected $providerListing;\nprotected $providers = array();\nprotected $providersByUid = array();\nprotected $loader;\nprotected $rootAliases;\nprotected $allowSslDowngrade = false;\nprivate $rawData;\nprivate $minimalPackages;\nprivate $degradedMode = false;\nprivate $rootData;\n\npublic function __construct(array $repoConfig, IOInterface $io, Config $config)\n{\nif (!preg_match('{^[\\w.]+\\??://}', $repoConfig['url'])) {\n\n $repoConfig['url'] = 'http://'.$repoConfig['url'];\n}\n$repoConfig['url'] = rtrim($repoConfig['url'], '/');\n\nif ('https?' === substr($repoConfig['url'], 0, 6)) {\n$repoConfig['url'] = (extension_loaded('openssl') ? 'https' : 'http') . substr($repoConfig['url'], 6);\n}\n\n$urlBits = parse_url($repoConfig['url']);\nif (empty($urlBits['scheme']) || empty($urlBits['host'])) {\nthrow new \\UnexpectedValueException('Invalid url given for Composer repository: '.$repoConfig['url']);\n}\n\nif (!isset($repoConfig['options'])) {\n$repoConfig['options'] = array();\n}\nif (isset($repoConfig['allow_ssl_downgrade']) && true === $repoConfig['allow_ssl_downgrade']) {\n$this->allowSslDowngrade = true;\n}\n\n$this->config = $config;\n$this->options = $repoConfig['options'];\n$this->url = $repoConfig['url'];\n$this->baseUrl = rtrim(preg_replace('{^(.*)(?:/packages.json)?(?:[?#].*)?$}', '$1', $this->url), '/');\n$this->io = $io;\n$this->cache = new Cache($io, $config->get('cache-repo-dir').'/'.preg_replace('{[^a-z0-9.]}i', '-', $this->url), 'a-z0-9.$');\n$this->loader = new ArrayLoader();\n$this->rfs = new RemoteFilesystem($this->io, $this->options);\n}\n\npublic function setRootAliases(array $rootAliases)\n{\n$this->rootAliases = $rootAliases;\n}\n\npublic function getPackages()\n{\nif ($this->hasProviders()) {\nthrow new \\LogicException('Composer repositories that have providers can not load the complete list of packages, use getProviderNames instead.');\n}\n\nreturn parent::getPackages();\n}\n\n\n\n\npublic function getMinimalPackages()\n{\nif (isset($this->minimalPackages)) {\nreturn $this->minimalPackages;\n}\n\nif (null === $this->rawData) {\n$this->rawData = $this->loadDataFromServer();\n}\n\n$this->minimalPackages = array();\n$versionParser = new VersionParser;\n\nforeach ($this->rawData as $package) {\n$version = !empty($package['version_normalized']) ? $package['version_normalized'] : $versionParser->normalize($package['version']);\n$data = array(\n'name' => strtolower($package['name']),\n'repo' => $this,\n'version' => $version,\n'raw' => $package,\n);\nif (!empty($package['replace'])) {\n$data['replace'] = $package['replace'];\n}\nif (!empty($package['provide'])) {\n$data['provide'] = $package['provide'];\n}\n\n\n if ($aliasNormalized = $this->loader->getBranchAlias($package)) {\n$data['alias'] = preg_replace('{(\\.9{7})+}', '.x', $aliasNormalized);\n$data['alias_normalized'] = $aliasNormalized;\n}\n\n$this->minimalPackages[] = $data;\n}\n\nreturn $this->minimalPackages;\n}\n\n\n\n\npublic function search($query, $mode = 0)\n{\n$this->loadRootServerFile();\n\nif ($this->searchUrl && $mode === self::SEARCH_FULLTEXT) {\n$url = str_replace('%query%', $query, $this->searchUrl);\n\n$json = $this->rfs->getContents($url, $url, false);\n$results = JsonFile::parseJson($json, $url);\n\nreturn $results['results'];\n}\n\nif ($this->hasProviders()) {\n$results = array();\n$regex = '{(?:'.implode('|', preg_split('{\\s+}', $query)).')}i';\n\nforeach ($this->getProviderNames() as $name) {\nif (preg_match($regex, $name)) {\n$results[] = array('name' => $name);\n}\n}\n\nreturn $results;\n}\n\nreturn parent::search($query, $mode);\n}\n\npublic function getProviderNames()\n{\n$this->loadRootServerFile();\n\nif (null === $this->providerListing) {\n$this->loadProviderListings($this->loadRootServerFile());\n}\n\nif ($this->providersUrl) {\nreturn array_keys($this->providerListing);\n}\n\n\n $providers = array();\nforeach (array_keys($this->providerListing) as $provider) {\n$providers[] = substr($provider, 2, -5);\n}\n\nreturn $providers;\n}\n\n\n\n\npublic function loadPackage(array $data)\n{\n$package = $this->createPackage($data['raw'], 'Composer\\Package\\Package');\nif ($package instanceof AliasPackage) {\n$package = $package->getAliasOf();\n}\n$package->setRepository($this);\n\nreturn $package;\n}\n\n\n\n\npublic function loadAliasPackage(array $data, PackageInterface $aliasOf)\n{\n$aliasPackage = $this->createAliasPackage($aliasOf, $data['version'], $data['alias']);\n$aliasPackage->setRepository($this);\n\nreturn $aliasPackage;\n}\n\npublic function hasProviders()\n{\n$this->loadRootServerFile();\n\nreturn $this->hasProviders;\n}\n\npublic function resetPackageIds()\n{\nforeach ($this->providersByUid as $package) {\nif ($package instanceof AliasPackage) {\n$package->getAliasOf()->setId(-1);\n}\n$package->setId(-1);\n}\n}\n\npublic function whatProvides(Pool $pool, $name)\n{\nif (isset($this->providers[$name])) {\nreturn $this->providers[$name];\n}\n\n\n if (preg_match(PlatformRepository::PLATFORM_PACKAGE_REGEX, $name) || '__root__' === $name) {\nreturn array();\n}\n\nif (null === $this->providerListing) {\n$this->loadProviderListings($this->loadRootServerFile());\n}\n\nif ($this->providersUrl) {\n\n if (!isset($this->providerListing[$name])) {\nreturn array();\n}\n\n$hash = $this->providerListing[$name]['sha256'];\n$url = str_replace(array('%package%', '%hash%'), array($name, $hash), $this->providersUrl);\n$cacheKey = 'provider-'.strtr($name, '/', '$').'.json';\n} else {\n\n $url = 'p/'.$name.'.json';\n\n\n if (!isset($this->providerListing[$url])) {\nreturn array();\n}\n$hash = $this->providerListing[$url]['sha256'];\n$cacheKey = null;\n}\n\nif ($this->cache->sha256($cacheKey) === $hash) {\n$packages = json_decode($this->cache->read($cacheKey), true);\n} else {\n$packages = $this->fetchFile($url, $cacheKey, $hash);\n}\n\n$this->providers[$name] = array();\nforeach ($packages['packages'] as $versions) {\nforeach ($versions as $version) {\n\n if (isset($this->providersByUid[$version['uid']])) {\n\n if (!isset($this->providers[$name][$version['uid']])) {\n\n if ($this->providersByUid[$version['uid']] instanceof AliasPackage) {\n$this->providers[$name][$version['uid']] = $this->providersByUid[$version['uid']]->getAliasOf();\n$this->providers[$name][$version['uid'].'-alias'] = $this->providersByUid[$version['uid']];\n} else {\n$this->providers[$name][$version['uid']] = $this->providersByUid[$version['uid']];\n}\n\n if (isset($this->providersByUid[$version['uid'].'-root'])) {\n$this->providers[$name][$version['uid'].'-root'] = $this->providersByUid[$version['uid'].'-root'];\n}\n}\n} else {\nif (isset($version['provide']) || isset($version['replace'])) {\n\n $names = array(\nstrtolower($version['name']) => true,\n);\nif (isset($version['provide'])) {\nforeach ($version['provide'] as $target => $constraint) {\n$names[strtolower($target)] = true;\n}\n}\nif (isset($version['replace'])) {\nforeach ($version['replace'] as $target => $constraint) {\n$names[strtolower($target)] = true;\n}\n}\n$names = array_keys($names);\n} else {\n$names = array(strtolower($version['name']));\n}\nif (!$pool->isPackageAcceptable(strtolower($version['name']), VersionParser::parseStability($version['version']))) {\ncontinue;\n}\n\n\n $package = $this->createPackage($version, 'Composer\\Package\\Package');\n$package->setRepository($this);\n\nif ($package instanceof AliasPackage) {\n$aliased = $package->getAliasOf();\n$aliased->setRepository($this);\n\n$this->providers[$name][$version['uid']] = $aliased;\n$this->providers[$name][$version['uid'].'-alias'] = $package;\n\n\n $this->providersByUid[$version['uid']] = $package;\n} else {\n$this->providers[$name][$version['uid']] = $package;\n$this->providersByUid[$version['uid']] = $package;\n}\n\n\n unset($rootAliasData);\n\nif (isset($this->rootAliases[$name][$package->getVersion()])) {\n$rootAliasData = $this->rootAliases[$name][$package->getVersion()];\n} elseif ($package instanceof AliasPackage && isset($this->rootAliases[$name][$package->getAliasOf()->getVersion()])) {\n$rootAliasData = $this->rootAliases[$name][$package->getAliasOf()->getVersion()];\n}\n\nif (isset($rootAliasData)) {\n$alias = $this->createAliasPackage($package, $rootAliasData['alias_normalized'], $rootAliasData['alias']);\n$alias->setRepository($this);\n\n$this->providers[$name][$version['uid'].'-root'] = $alias;\n$this->providersByUid[$version['uid'].'-root'] = $alias;\n}\n}\n}\n}\n\nreturn $this->providers[$name];\n}\n\n\n\n\nprotected function initialize()\n{\nparent::initialize();\n\n$repoData = $this->loadDataFromServer();\n\nforeach ($repoData as $package) {\n$this->addPackage($this->createPackage($package, 'Composer\\Package\\CompletePackage'));\n}\n}\n\nprotected function loadRootServerFile()\n{\nif (null !== $this->rootData) {\nreturn $this->rootData;\n}\n\nif (!extension_loaded('openssl') && 'https' === substr($this->url, 0, 5)) {\nthrow new \\RuntimeException('You must enable the openssl extension in your php.ini to load information from '.$this->url);\n}\n\n$jsonUrlParts = parse_url($this->url);\n\nif (isset($jsonUrlParts['path']) && false !== strpos($jsonUrlParts['path'], '/packages.json')) {\n$jsonUrl = $this->url;\n} else {\n$jsonUrl = $this->url . '/packages.json';\n}\n\n$data = $this->fetchFile($jsonUrl, 'packages.json');\n\nif (!empty($data['notify-batch'])) {\n$this->notifyUrl = $this->canonicalizeUrl($data['notify-batch']);\n} elseif (!empty($data['notify_batch'])) {\n\n $this->notifyUrl = $this->canonicalizeUrl($data['notify_batch']);\n} elseif (!empty($data['notify'])) {\n$this->notifyUrl = $this->canonicalizeUrl($data['notify']);\n}\n\nif (!empty($data['search'])) {\n$this->searchUrl = $this->canonicalizeUrl($data['search']);\n}\n\nif ($this->allowSslDowngrade) {\n$this->url = str_replace('https://', 'http://', $this->url);\n}\n\nif (!empty($data['providers-url'])) {\n$this->providersUrl = $this->canonicalizeUrl($data['providers-url']);\n$this->hasProviders = true;\n}\n\nif (!empty($data['providers']) || !empty($data['providers-includes'])) {\n$this->hasProviders = true;\n}\n\nreturn $this->rootData = $data;\n}\n\nprotected function canonicalizeUrl($url)\n{\nif ('/' === $url[0]) {\nreturn preg_replace('{(https?://[^/]+).*}i', '$1' . $url, $this->url);\n}\n\nreturn $url;\n}\n\nprotected function loadDataFromServer()\n{\n$data = $this->loadRootServerFile();\n\nreturn $this->loadIncludes($data);\n}\n\nprotected function loadProviderListings($data)\n{\nif (isset($data['providers'])) {\nif (!is_array($this->providerListing)) {\n$this->providerListing = array();\n}\n$this->providerListing = array_merge($this->providerListing, $data['providers']);\n}\n\nif ($this->providersUrl && isset($data['provider-includes'])) {\n$includes = $data['provider-includes'];\nforeach ($includes as $include => $metadata) {\n$url = $this->baseUrl . '/' . str_replace('%hash%', $metadata['sha256'], $include);\n$cacheKey = str_replace(array('%hash%','$'), '', $include);\nif ($this->cache->sha256($cacheKey) === $metadata['sha256']) {\n$includedData = json_decode($this->cache->read($cacheKey), true);\n} else {\n$includedData = $this->fetchFile($url, $cacheKey, $metadata['sha256']);\n}\n\n$this->loadProviderListings($includedData);\n}\n} elseif (isset($data['providers-includes'])) {\n\n $includes = $data['providers-includes'];\nforeach ($includes as $include => $metadata) {\nif ($this->cache->sha256($include) === $metadata['sha256']) {\n$includedData = json_decode($this->cache->read($include), true);\n} else {\n$includedData = $this->fetchFile($include, null, $metadata['sha256']);\n}\n\n$this->loadProviderListings($includedData);\n}\n}\n}\n\nprotected function loadIncludes($data)\n{\n$packages = array();\n\n\n if (!isset($data['packages']) && !isset($data['includes'])) {\nforeach ($data as $pkg) {\nforeach ($pkg['versions'] as $metadata) {\n$packages[] = $metadata;\n}\n}\n\nreturn $packages;\n}\n\nif (isset($data['packages'])) {\nforeach ($data['packages'] as $package => $versions) {\nforeach ($versions as $version => $metadata) {\n$packages[] = $metadata;\n}\n}\n}\n\nif (isset($data['includes'])) {\nforeach ($data['includes'] as $include => $metadata) {\nif ($this->cache->sha1($include) === $metadata['sha1']) {\n$includedData = json_decode($this->cache->read($include), true);\n} else {\n$includedData = $this->fetchFile($include);\n}\n$packages = array_merge($packages, $this->loadIncludes($includedData));\n}\n}\n\nreturn $packages;\n}\n\nprotected function createPackage(array $data, $class)\n{\ntry {\nif (!isset($data['notification-url'])) {\n$data['notification-url'] = $this->notifyUrl;\n}\n\nreturn $this->loader->load($data, 'Composer\\Package\\CompletePackage');\n} catch (\\Exception $e) {\nthrow new \\RuntimeException('Could not load package '.(isset($data['name']) ? $data['name'] : json_encode($data)).' in '.$this->url.': ['.get_class($e).'] '.$e->getMessage(), 0, $e);\n}\n}\n\nprotected function fetchFile($filename, $cacheKey = null, $sha256 = null)\n{\nif (!$cacheKey) {\n$cacheKey = $filename;\n$filename = $this->baseUrl.'/'.$filename;\n}\n\n$retries = 3;\nwhile ($retries--) {\ntry {\n$json = $this->rfs->getContents($filename, $filename, false);\nif ($sha256 && $sha256 !== hash('sha256', $json)) {\nif ($retries) {\nusleep(100000);\n\ncontinue;\n}\n\n\n throw new RepositorySecurityException('The contents of '.$filename.' do not match its signature. This should indicate a man-in-the-middle attack. Try running composer again and report this if you think it is a mistake.');\n}\n$data = JsonFile::parseJson($json, $filename);\n$this->cache->write($cacheKey, $json);\n\nbreak;\n} catch (\\Exception $e) {\nif ($retries) {\nusleep(100000);\ncontinue;\n}\n\nif ($e instanceof RepositorySecurityException) {\nthrow $e;\n}\n\nif ($contents = $this->cache->read($cacheKey)) {\nif (!$this->degradedMode) {\n$this->io->write('<warning>'.$e->getMessage().'</warning>');\n$this->io->write('<warning>'.$this->url.' could not be fully loaded, package information was loaded from the local cache and may be out of date</warning>');\n}\n$this->degradedMode = true;\n$data = JsonFile::parseJson($contents, $this->cache->getRoot().$cacheKey);\n\nbreak;\n}\n\nthrow $e;\n}\n}\n\nreturn $data;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Repository\\Pear;\n\n\n\n\n\n\nclass DependencyInfo\n{\nprivate $requires;\nprivate $optionals;\n\n\n\n\n\npublic function __construct($requires, $optionals)\n{\n$this->requires = $requires;\n$this->optionals = $optionals;\n}\n\n\n\n\npublic function getRequires()\n{\nreturn $this->requires;\n}\n\n\n\n\npublic function getOptionals()\n{\nreturn $this->optionals;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Repository\\Pear;\n\n\n\n\n\n\nclass PackageDependencyParser\n{\n\n\n\n\n\n\npublic function buildDependencyInfo($depArray)\n{\nif (!is_array($depArray)) {\nreturn new DependencyInfo(array(), array());\n}\nif (!$this->isHash($depArray)) {\nreturn new DependencyInfo($this->buildDependency10Info($depArray), array());\n}\n\nreturn $this->buildDependency20Info($depArray);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nprivate function buildDependency10Info($depArray)\n{\nstatic $dep10toOperatorMap = array('has'=>'==', 'eq' => '==', 'ge' => '>=', 'gt' => '>', 'le' => '<=', 'lt' => '<', 'not' => '!=');\n\n$result = array();\n\nforeach ($depArray as $depItem) {\nif (empty($depItem['rel']) || !array_key_exists($depItem['rel'], $dep10toOperatorMap)) {\n\n continue;\n}\n\n$depType = !empty($depItem['optional']) && 'yes' == $depItem['optional']\n? 'optional'\n: 'required';\n$depType = 'not' == $depItem['rel']\n? 'conflicts'\n: $depType;\n\n$depVersion = !empty($depItem['version']) ? $this->parseVersion($depItem['version']) : '*';\n\n\n $depVersionConstraint = ('has' == $depItem['rel'] || 'not' == $depItem['rel']) && '*' == $depVersion\n? '*'\n: $dep10toOperatorMap[$depItem['rel']] . $depVersion;\n\nswitch ($depItem['type']) {\ncase 'php':\n$depChannelName = 'php';\n$depPackageName = '';\nbreak;\ncase 'pkg':\n$depChannelName = !empty($depItem['channel']) ? $depItem['channel'] : 'pear.php.net';\n$depPackageName = $depItem['name'];\nbreak;\ncase 'ext':\n$depChannelName = 'ext';\n$depPackageName = $depItem['name'];\nbreak;\ncase 'os':\ncase 'sapi':\n$depChannelName = '';\n$depPackageName = '';\nbreak;\ndefault:\n$depChannelName = '';\n$depPackageName = '';\nbreak;\n}\n\nif ('' != $depChannelName) {\n$result[] = new DependencyConstraint(\n$depType,\n$depVersionConstraint,\n$depChannelName,\n$depPackageName\n);\n}\n}\n\nreturn $result;\n}\n\n\n\n\n\n\n\nprivate function buildDependency20Info($depArray)\n{\n$result = array();\n$optionals = array();\n$defaultOptionals = array();\nforeach ($depArray as $depType => $depTypeGroup) {\nif (!is_array($depTypeGroup)) {\ncontinue;\n}\nif ('required' == $depType || 'optional' == $depType) {\nforeach ($depTypeGroup as $depItemType => $depItem) {\nswitch ($depItemType) {\ncase 'php':\n$result[] = new DependencyConstraint(\n$depType,\n$this->parse20VersionConstraint($depItem),\n'php',\n''\n);\nbreak;\ncase 'package':\n$deps = $this->buildDepPackageConstraints($depItem, $depType);\n$result = array_merge($result, $deps);\nbreak;\ncase 'extension':\n$deps = $this->buildDepExtensionConstraints($depItem, $depType);\n$result = array_merge($result, $deps);\nbreak;\ncase 'subpackage':\n$deps = $this->buildDepPackageConstraints($depItem, 'replaces');\n$defaultOptionals += $deps;\nbreak;\ncase 'os':\ncase 'pearinstaller':\nbreak;\ndefault:\nbreak;\n}\n}\n} elseif ('group' == $depType) {\nif ($this->isHash($depTypeGroup)) {\n$depTypeGroup = array($depTypeGroup);\n}\n\nforeach ($depTypeGroup as $depItem) {\n$groupName = $depItem['attribs']['name'];\nif (!isset($optionals[$groupName])) {\n$optionals[$groupName] = array();\n}\n\nif (isset($depItem['subpackage'])) {\n$optionals[$groupName] += $this->buildDepPackageConstraints($depItem['subpackage'], 'replaces');\n} else {\n$result += $this->buildDepPackageConstraints($depItem['package'], 'optional');\n}\n}\n}\n}\n\nif (count($defaultOptionals) > 0) {\n$optionals['*'] = $defaultOptionals;\n}\n\nreturn new DependencyInfo($result, $optionals);\n}\n\n\n\n\n\n\n\n\nprivate function buildDepExtensionConstraints($depItem, $depType)\n{\nif ($this->isHash($depItem)) {\n$depItem = array($depItem);\n}\n\n$result = array();\nforeach ($depItem as $subDepItem) {\n$depChannelName = 'ext';\n$depPackageName = $subDepItem['name'];\n$depVersionConstraint = $this->parse20VersionConstraint($subDepItem);\n\n$result[] = new DependencyConstraint(\n$depType,\n$depVersionConstraint,\n$depChannelName,\n$depPackageName\n);\n}\n\nreturn $result;\n}\n\n\n\n\n\n\n\n\nprivate function buildDepPackageConstraints($depItem, $depType)\n{\nif ($this->isHash($depItem)) {\n$depItem = array($depItem);\n}\n\n$result = array();\nforeach ($depItem as $subDepItem) {\n$depChannelName = $subDepItem['channel'];\n$depPackageName = $subDepItem['name'];\n$depVersionConstraint = $this->parse20VersionConstraint($subDepItem);\nif (isset($subDepItem['conflicts'])) {\n$depType = 'conflicts';\n}\n\n$result[] = new DependencyConstraint(\n$depType,\n$depVersionConstraint,\n$depChannelName,\n$depPackageName\n);\n}\n\nreturn $result;\n}\n\n\n\n\n\n\n\nprivate function parse20VersionConstraint(array $data)\n{\nstatic $dep20toOperatorMap = array('has'=>'==', 'min' => '>=', 'max' => '<=', 'exclude' => '!=');\n\n$versions = array();\n$values = array_intersect_key($data, $dep20toOperatorMap);\nif (0 == count($values)) {\nreturn '*';\n}\nif (isset($values['min']) && isset($values['exclude']) && $data['min'] == $data['exclude']) {\n$versions[] = '>' . $this->parseVersion($values['min']);\n} elseif (isset($values['max']) && isset($values['exclude']) && $data['max'] == $data['exclude']) {\n$versions[] = '<' . $this->parseVersion($values['max']);\n} else {\nforeach ($values as $op => $version) {\nif ('exclude' == $op && is_array($version)) {\nforeach ($version as $versionPart) {\n$versions[] = $dep20toOperatorMap[$op] . $this->parseVersion($versionPart);\n}\n} else {\n$versions[] = $dep20toOperatorMap[$op] . $this->parseVersion($version);\n}\n}\n}\n\nreturn implode(',', $versions);\n}\n\n\n\n\n\n\n\nprivate function parseVersion($version)\n{\nif (preg_match('{^v?(\\d{1,3})(\\.\\d+)?(\\.\\d+)?(\\.\\d+)?}i', $version, $matches)) {\n$version = $matches[1]\n.(!empty($matches[2]) ? $matches[2] : '.0')\n.(!empty($matches[3]) ? $matches[3] : '.0')\n.(!empty($matches[4]) ? $matches[4] : '.0');\n\nreturn $version;\n}\n\nreturn null;\n}\n\n\n\n\n\n\n\nprivate function isHash(array $array)\n{\nreturn !array_key_exists(1, $array) && !array_key_exists(0, $array);\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Repository\\Pear;\n\n\n\n\n\n\nclass ChannelInfo\n{\nprivate $name;\nprivate $alias;\nprivate $packages;\n\n\n\n\n\n\npublic function __construct($name, $alias, array $packages)\n{\n$this->name = $name;\n$this->alias = $alias;\n$this->packages = $packages;\n}\n\n\n\n\n\n\npublic function getName()\n{\nreturn $this->name;\n}\n\n\n\n\n\n\npublic function getAlias()\n{\nreturn $this->alias;\n}\n\n\n\n\n\n\npublic function getPackages()\n{\nreturn $this->packages;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Repository\\Pear;\n\nuse Composer\\Util\\RemoteFilesystem;\n\n\n\n\n\n\n\n\nclass ChannelReader extends BaseChannelReader\n{\n\nprivate $readerMap;\n\npublic function __construct(RemoteFilesystem $rfs)\n{\nparent::__construct($rfs);\n\n$rest10reader = new ChannelRest10Reader($rfs);\n$rest11reader = new ChannelRest11Reader($rfs);\n\n$this->readerMap = array(\n'REST1.3' => $rest11reader,\n'REST1.2' => $rest11reader,\n'REST1.1' => $rest11reader,\n'REST1.0' => $rest10reader,\n);\n}\n\n\n\n\n\n\n\n\npublic function read($url)\n{\n$xml = $this->requestXml($url, \"/channel.xml\");\n\n$channelName = (string) $xml->name;\n$channelSummary = (string) $xml->summary;\n$channelAlias = (string) $xml->suggestedalias;\n\n$supportedVersions = array_keys($this->readerMap);\n$selectedRestVersion = $this->selectRestVersion($xml, $supportedVersions);\nif (!$selectedRestVersion) {\nthrow new \\UnexpectedValueException(sprintf('PEAR repository %s does not supports any of %s protocols.', $url, implode(', ', $supportedVersions)));\n}\n\n$reader = $this->readerMap[$selectedRestVersion['version']];\n$packageDefinitions = $reader->read($selectedRestVersion['baseUrl']);\n\nreturn new ChannelInfo($channelName, $channelAlias, $packageDefinitions);\n}\n\n\n\n\n\n\n\n\nprivate function selectRestVersion($channelXml, $supportedVersions)\n{\n$channelXml->registerXPathNamespace('ns', self::CHANNEL_NS);\n\nforeach ($supportedVersions as $version) {\n$xpathTest = \"ns:servers/ns:primary/ns:rest/ns:baseurl[@type='{$version}']\";\n$testResult = $channelXml->xpath($xpathTest);\nif (count($testResult) > 0) {\nreturn array('version' => $version, 'baseUrl' => (string) $testResult[0]);\n}\n}\n\nreturn null;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Repository\\Pear;\n\n\n\n\n\n\nclass PackageInfo\n{\nprivate $channelName;\nprivate $packageName;\nprivate $license;\nprivate $shortDescription;\nprivate $description;\nprivate $releases;\n\n\n\n\n\n\n\n\n\npublic function __construct($channelName, $packageName, $license, $shortDescription, $description, $releases)\n{\n$this->channelName = $channelName;\n$this->packageName = $packageName;\n$this->license = $license;\n$this->shortDescription = $shortDescription;\n$this->description = $description;\n$this->releases = $releases;\n}\n\n\n\n\npublic function getChannelName()\n{\nreturn $this->channelName;\n}\n\n\n\n\npublic function getPackageName()\n{\nreturn $this->packageName;\n}\n\n\n\n\npublic function getDescription()\n{\nreturn $this->description;\n}\n\n\n\n\npublic function getShortDescription()\n{\nreturn $this->shortDescription;\n}\n\n\n\n\npublic function getLicense()\n{\nreturn $this->license;\n}\n\n\n\n\npublic function getReleases()\n{\nreturn $this->releases;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Repository\\Pear;\n\n\n\n\n\n\nclass DependencyConstraint\n{\nprivate $type;\nprivate $constraint;\nprivate $channelName;\nprivate $packageName;\n\n\n\n\n\n\n\npublic function __construct($type, $constraint, $channelName, $packageName)\n{\n$this->type = $type;\n$this->constraint = $constraint;\n$this->channelName = $channelName;\n$this->packageName = $packageName;\n}\n\npublic function getChannelName()\n{\nreturn $this->channelName;\n}\n\npublic function getConstraint()\n{\nreturn $this->constraint;\n}\n\npublic function getPackageName()\n{\nreturn $this->packageName;\n}\n\npublic function getType()\n{\nreturn $this->type;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Repository\\Pear;\n\n\n\n\n\n\n\n\n\n\nclass ChannelRest11Reader extends BaseChannelReader\n{\nprivate $dependencyReader;\n\npublic function __construct($rfs)\n{\nparent::__construct($rfs);\n\n$this->dependencyReader = new PackageDependencyParser();\n}\n\n\n\n\n\n\n\n\npublic function read($baseUrl)\n{\nreturn $this->readChannelPackages($baseUrl);\n}\n\n\n\n\n\n\n\n\nprivate function readChannelPackages($baseUrl)\n{\n$result = array();\n\n$xml = $this->requestXml($baseUrl, \"/c/categories.xml\");\n$xml->registerXPathNamespace('ns', self::ALL_CATEGORIES_NS);\nforeach ($xml->xpath('ns:c') as $node) {\n$categoryName = (string) $node;\n$categoryPackages = $this->readCategoryPackages($baseUrl, $categoryName);\n$result = array_merge($result, $categoryPackages);\n}\n\nreturn $result;\n}\n\n\n\n\n\n\n\n\n\nprivate function readCategoryPackages($baseUrl, $categoryName)\n{\n$result = array();\n\n$categoryPath = '/c/'.urlencode($categoryName).'/packagesinfo.xml';\n$xml = $this->requestXml($baseUrl, $categoryPath);\n$xml->registerXPathNamespace('ns', self::CATEGORY_PACKAGES_INFO_NS);\nforeach ($xml->xpath('ns:pi') as $node) {\n$packageInfo = $this->parsePackage($node);\n$result[] = $packageInfo;\n}\n\nreturn $result;\n}\n\n\n\n\n\n\n\nprivate function parsePackage($packageInfo)\n{\n$packageInfo->registerXPathNamespace('ns', self::CATEGORY_PACKAGES_INFO_NS);\n$channelName = (string) $packageInfo->p->c;\n$packageName = (string) $packageInfo->p->n;\n$license = (string) $packageInfo->p->l;\n$shortDescription = (string) $packageInfo->p->s;\n$description = (string) $packageInfo->p->d;\n\n$dependencies = array();\nforeach ($packageInfo->xpath('ns:deps') as $node) {\n$dependencyVersion = (string) $node->v;\n$dependencyArray = unserialize((string) $node->d);\n\n$dependencyInfo = $this->dependencyReader->buildDependencyInfo($dependencyArray);\n\n$dependencies[$dependencyVersion] = $dependencyInfo;\n}\n\n$releases = array();\n$releasesInfo = $packageInfo->xpath('ns:a/ns:r');\nif ($releasesInfo) {\nforeach ($releasesInfo as $node) {\n$releaseVersion = (string) $node->v;\n$releaseStability = (string) $node->s;\n$releases[$releaseVersion] = new ReleaseInfo(\n$releaseStability,\nisset($dependencies[$releaseVersion]) ? $dependencies[$releaseVersion] : new DependencyInfo(array(), array())\n);\n}\n}\n\nreturn new PackageInfo(\n$channelName,\n$packageName,\n$license,\n$shortDescription,\n$description,\n$releases\n);\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Repository\\Pear;\n\n\n\n\n\n\nclass ReleaseInfo\n{\nprivate $stability;\nprivate $dependencyInfo;\n\n\n\n\n\npublic function __construct($stability, $dependencyInfo)\n{\n$this->stability = $stability;\n$this->dependencyInfo = $dependencyInfo;\n}\n\n\n\n\npublic function getDependencyInfo()\n{\nreturn $this->dependencyInfo;\n}\n\n\n\n\npublic function getStability()\n{\nreturn $this->stability;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Repository\\Pear;\n\nuse Composer\\Util\\RemoteFilesystem;\n\n\n\n\n\n\n\n\nabstract class BaseChannelReader\n{\n\n\n\nconst CHANNEL_NS = 'http://pear.php.net/channel-1.0';\nconst ALL_CATEGORIES_NS = 'http://pear.php.net/dtd/rest.allcategories';\nconst CATEGORY_PACKAGES_INFO_NS = 'http://pear.php.net/dtd/rest.categorypackageinfo';\nconst ALL_PACKAGES_NS = 'http://pear.php.net/dtd/rest.allpackages';\nconst ALL_RELEASES_NS = 'http://pear.php.net/dtd/rest.allreleases';\nconst PACKAGE_INFO_NS = 'http://pear.php.net/dtd/rest.package';\n\n\nprivate $rfs;\n\nprotected function __construct(RemoteFilesystem $rfs)\n{\n$this->rfs = $rfs;\n}\n\n\n\n\n\n\n\n\n\nprotected function requestContent($origin, $path)\n{\n$url = rtrim($origin, '/') . '/' . ltrim($path, '/');\n$content = $this->rfs->getContents($origin, $url, false);\nif (!$content) {\nthrow new \\UnexpectedValueException('The PEAR channel at ' . $url . ' did not respond.');\n}\n\nreturn $content;\n}\n\n\n\n\n\n\n\n\n\nprotected function requestXml($origin, $path)\n{\n\n $xml = simplexml_load_string($this->requestContent($origin, $path), \"SimpleXMLElement\", LIBXML_NOERROR);\n\nif (false == $xml) {\n$url = rtrim($origin, '/') . '/' . ltrim($path, '/');\nthrow new \\UnexpectedValueException(sprintf('The PEAR channel at ' . $origin . ' is broken. (Invalid XML at file `%s`)', $path));\n}\n\nreturn $xml;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Repository\\Pear;\n\nuse Composer\\Downloader\\TransportException;\n\n\n\n\n\n\n\n\n\n\n\n\nclass ChannelRest10Reader extends BaseChannelReader\n{\nprivate $dependencyReader;\n\npublic function __construct($rfs)\n{\nparent::__construct($rfs);\n\n$this->dependencyReader = new PackageDependencyParser();\n}\n\n\n\n\n\n\n\n\npublic function read($baseUrl)\n{\nreturn $this->readPackages($baseUrl);\n}\n\n\n\n\n\n\n\n\nprivate function readPackages($baseUrl)\n{\n$result = array();\n\n$xmlPath = '/p/packages.xml';\n$xml = $this->requestXml($baseUrl, $xmlPath);\n$xml->registerXPathNamespace('ns', self::ALL_PACKAGES_NS);\nforeach ($xml->xpath('ns:p') as $node) {\n$packageName = (string) $node;\n$packageInfo = $this->readPackage($baseUrl, $packageName);\n$result[] = $packageInfo;\n}\n\nreturn $result;\n}\n\n\n\n\n\n\n\n\n\nprivate function readPackage($baseUrl, $packageName)\n{\n$xmlPath = '/p/' . strtolower($packageName) . '/info.xml';\n$xml = $this->requestXml($baseUrl, $xmlPath);\n$xml->registerXPathNamespace('ns', self::PACKAGE_INFO_NS);\n\n$channelName = (string) $xml->c;\n$packageName = (string) $xml->n;\n$license = (string) $xml->l;\n$shortDescription = (string) $xml->s;\n$description = (string) $xml->d;\n\nreturn new PackageInfo(\n$channelName,\n$packageName,\n$license,\n$shortDescription,\n$description,\n$this->readPackageReleases($baseUrl, $packageName)\n);\n}\n\n\n\n\n\n\n\n\n\n\nprivate function readPackageReleases($baseUrl, $packageName)\n{\n$result = array();\n\ntry {\n$xmlPath = '/r/' . strtolower($packageName) . '/allreleases.xml';\n$xml = $this->requestXml($baseUrl, $xmlPath);\n$xml->registerXPathNamespace('ns', self::ALL_RELEASES_NS);\nforeach ($xml->xpath('ns:r') as $node) {\n$releaseVersion = (string) $node->v;\n$releaseStability = (string) $node->s;\n\ntry {\n$result[$releaseVersion] = new ReleaseInfo(\n$releaseStability,\n$this->readPackageReleaseDependencies($baseUrl, $packageName, $releaseVersion)\n);\n} catch (TransportException $exception) {\nif ($exception->getCode() != 404) {\nthrow $exception;\n}\n}\n}\n} catch (TransportException $exception) {\nif ($exception->getCode() != 404) {\nthrow $exception;\n}\n}\n\nreturn $result;\n}\n\n\n\n\n\n\n\n\n\n\nprivate function readPackageReleaseDependencies($baseUrl, $packageName, $version)\n{\n$dependencyReader = new PackageDependencyParser();\n\n$depthPath = '/r/' . strtolower($packageName) . '/deps.' . $version . '.txt';\n$content = $this->requestContent($baseUrl, $depthPath);\n$dependencyArray = unserialize($content);\n$result = $dependencyReader->buildDependencyInfo($dependencyArray);\n\nreturn $result;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Repository;\n\nuse Composer\\Package\\PackageInterface;\n\n\n\n\n\n\n\n\ninterface RepositoryInterface extends \\Countable\n{\nconst SEARCH_FULLTEXT = 0;\nconst SEARCH_NAME = 1;\n\n\n\n\n\n\n\n\npublic function hasPackage(PackageInterface $package);\n\n\n\n\n\n\n\n\n\npublic function findPackage($name, $version);\n\n\n\n\n\n\n\n\n\npublic function findPackages($name, $version = null);\n\n\n\n\n\n\npublic function getPackages();\n\n\n\n\n\n\n\n\npublic function search($query, $mode = 0);\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Repository;\n\nuse Composer\\IO\\IOInterface;\nuse Composer\\Json\\JsonFile;\nuse Composer\\Package\\Loader\\ArrayLoader;\n\n\n\n\nclass ArtifactRepository extends ArrayRepository\n{\n\nprotected $loader;\n\nprotected $lookup;\n\npublic function __construct(array $repoConfig, IOInterface $io)\n{\nif (!extension_loaded('zip')) {\nthrow new \\RuntimeException('The artifact repository requires PHP\\'s zip extension');\n}\n\n$this->loader = new ArrayLoader();\n$this->lookup = $repoConfig['url'];\n$this->io = $io;\n}\n\nprotected function initialize()\n{\nparent::initialize();\n\n$this->scanDirectory($this->lookup);\n}\n\nprivate function scanDirectory($path)\n{\n$io = $this->io;\n\n$directory = new \\RecursiveDirectoryIterator($path);\n$iterator = new \\RecursiveIteratorIterator($directory);\n$regex = new \\RegexIterator($iterator, '/^.+\\.(zip|phar)$/i');\nforeach ($regex as $file) {\n\nif (!$file->isFile()) {\ncontinue;\n}\n\n$package = $this->getComposerInformation($file);\nif (!$package) {\nif ($io->isVerbose()) {\n$io->write(\"File <comment>{$file->getBasename()}</comment> doesn't seem to hold a package\");\n}\ncontinue;\n}\n\nif ($io->isVerbose()) {\n$template = 'Found package <info>%s</info> (<comment>%s</comment>) in file <info>%s</info>';\n$io->write(sprintf($template, $package->getName(), $package->getPrettyVersion(), $file->getBasename()));\n}\n\n$this->addPackage($package);\n}\n}\n\nprivate function getComposerInformation(\\SplFileInfo $file)\n{\n$zip = new \\ZipArchive();\n$zip->open($file->getPathname());\n\nif (0 == $zip->numFiles) {\nreturn false;\n}\n\n$foundFileIndex = $zip->locateName('composer.json', \\ZipArchive::FL_NODIR);\nif (false === $foundFileIndex) {\nreturn false;\n}\n\n$configurationFileName = $zip->getNameIndex($foundFileIndex);\n\n$composerFile = \"zip://{$file->getPathname()}#$configurationFileName\";\n$json = file_get_contents($composerFile);\n\n$package = JsonFile::parseJson($json, $composerFile);\n$package['dist'] = array(\n'type' => 'zip',\n'url' => $file->getRealPath(),\n'reference' => $file->getBasename(),\n'shasum' => sha1_file($file->getRealPath())\n);\n\n$package = $this->loader->load($package);\n\nreturn $package;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Repository;\n\nuse Composer\\Package\\Loader\\ArrayLoader;\nuse Composer\\Package\\Loader\\ValidatingArrayLoader;\n\n\n\n\n\n\nclass PackageRepository extends ArrayRepository\n{\nprivate $config;\n\n\n\n\n\n\npublic function __construct(array $config)\n{\n$this->config = $config['package'];\n\n\n if (!is_numeric(key($this->config))) {\n$this->config = array($this->config);\n}\n}\n\n\n\n\nprotected function initialize()\n{\nparent::initialize();\n\n$loader = new ValidatingArrayLoader(new ArrayLoader, false);\nforeach ($this->config as $package) {\ntry {\n$package = $loader->load($package);\n} catch (\\Exception $e) {\nthrow new InvalidRepositoryException('A repository of type \"package\" contains an invalid package definition: '.$e->getMessage().\"\\n\\nInvalid package definition:\\n\".json_encode($package));\n}\n\n$this->addPackage($package);\n}\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Package;\n\n\n\n\n\n\nclass CompletePackage extends Package implements CompletePackageInterface\n{\nprotected $repositories;\nprotected $license = array();\nprotected $keywords;\nprotected $authors;\nprotected $description;\nprotected $homepage;\nprotected $scripts = array();\nprotected $support = array();\n\n\n\n\npublic function setScripts(array $scripts)\n{\n$this->scripts = $scripts;\n}\n\n\n\n\npublic function getScripts()\n{\nreturn $this->scripts;\n}\n\n\n\n\n\n\npublic function setRepositories($repositories)\n{\n$this->repositories = $repositories;\n}\n\n\n\n\npublic function getRepositories()\n{\nreturn $this->repositories;\n}\n\n\n\n\n\n\npublic function setLicense(array $license)\n{\n$this->license = $license;\n}\n\n\n\n\npublic function getLicense()\n{\nreturn $this->license;\n}\n\n\n\n\n\n\npublic function setKeywords(array $keywords)\n{\n$this->keywords = $keywords;\n}\n\n\n\n\npublic function getKeywords()\n{\nreturn $this->keywords;\n}\n\n\n\n\n\n\npublic function setAuthors(array $authors)\n{\n$this->authors = $authors;\n}\n\n\n\n\npublic function getAuthors()\n{\nreturn $this->authors;\n}\n\n\n\n\n\n\npublic function setDescription($description)\n{\n$this->description = $description;\n}\n\n\n\n\npublic function getDescription()\n{\nreturn $this->description;\n}\n\n\n\n\n\n\npublic function setHomepage($homepage)\n{\n$this->homepage = $homepage;\n}\n\n\n\n\npublic function getHomepage()\n{\nreturn $this->homepage;\n}\n\n\n\n\n\n\npublic function setSupport(array $support)\n{\n$this->support = $support;\n}\n\n\n\n\npublic function getSupport()\n{\nreturn $this->support;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Package\\Dumper;\n\nuse Composer\\Package\\BasePackage;\nuse Composer\\Package\\PackageInterface;\nuse Composer\\Package\\CompletePackageInterface;\nuse Composer\\Package\\RootPackageInterface;\nuse Composer\\Package\\Link;\n\n\n\n\n\nclass ArrayDumper\n{\npublic function dump(PackageInterface $package)\n{\n$keys = array(\n'binaries' => 'bin',\n'type',\n'extra',\n'installationSource' => 'installation-source',\n'autoload',\n'notificationUrl' => 'notification-url',\n'includePaths' => 'include-path',\n);\n\n$data = array();\n$data['name'] = $package->getPrettyName();\n$data['version'] = $package->getPrettyVersion();\n$data['version_normalized'] = $package->getVersion();\n\nif ($package->getTargetDir()) {\n$data['target-dir'] = $package->getTargetDir();\n}\n\nif ($package->getSourceType()) {\n$data['source']['type'] = $package->getSourceType();\n$data['source']['url'] = $package->getSourceUrl();\n$data['source']['reference'] = $package->getSourceReference();\n}\n\nif ($package->getDistType()) {\n$data['dist']['type'] = $package->getDistType();\n$data['dist']['url'] = $package->getDistUrl();\n$data['dist']['reference'] = $package->getDistReference();\n$data['dist']['shasum'] = $package->getDistSha1Checksum();\n}\n\nif ($package->getArchiveExcludes()) {\n$data['archive']['exclude'] = $package->getArchiveExcludes();\n}\n\nforeach (BasePackage::$supportedLinkTypes as $type => $opts) {\nif ($links = $package->{'get'.ucfirst($opts['method'])}()) {\nforeach ($links as $link) {\n$data[$type][$link->getTarget()] = $link->getPrettyConstraint();\n}\nksort($data[$type]);\n}\n}\n\nif ($packages = $package->getSuggests()) {\nksort($packages);\n$data['suggest'] = $packages;\n}\n\nif ($package->getReleaseDate()) {\n$data['time'] = $package->getReleaseDate()->format('Y-m-d H:i:s');\n}\n\n$data = $this->dumpValues($package, $keys, $data);\n\nif ($package instanceof CompletePackageInterface) {\n$keys = array(\n'scripts',\n'license',\n'authors',\n'description',\n'homepage',\n'keywords',\n'repositories',\n'support',\n);\n\n$data = $this->dumpValues($package, $keys, $data);\n\nif (isset($data['keywords']) && is_array($data['keywords'])) {\nsort($data['keywords']);\n}\n}\n\nif ($package instanceof RootPackageInterface) {\n$minimumStability = $package->getMinimumStability();\nif ($minimumStability) {\n$data['minimum-stability'] = $minimumStability;\n}\n}\n\nreturn $data;\n}\n\nprivate function dumpValues(PackageInterface $package, array $keys, array $data)\n{\nforeach ($keys as $method => $key) {\nif (is_numeric($method)) {\n$method = $key;\n}\n\n$getter = 'get'.ucfirst($method);\n$value = $package->$getter();\n\nif (null !== $value && !(is_array($value) && 0 === count($value))) {\n$data[$key] = $value;\n}\n}\n\nreturn $data;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Package\\Loader;\n\n\n\n\nclass InvalidPackageException extends \\Exception\n{\nprivate $errors;\nprivate $warnings;\nprivate $data;\n\npublic function __construct(array $errors, array $warnings, array $data)\n{\n$this->errors = $errors;\n$this->warnings = $warnings;\n$this->data = $data;\nparent::__construct(\"Invalid package information: \\n\".implode(\"\\n\", array_merge($errors, $warnings)));\n}\n\npublic function getData()\n{\nreturn $this->data;\n}\n\npublic function getErrors()\n{\nreturn $this->errors;\n}\n\npublic function getWarnings()\n{\nreturn $this->warnings;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Package\\Loader;\n\nuse Composer\\Json\\JsonFile;\n\n\n\n\nclass JsonLoader\n{\nprivate $loader;\n\npublic function __construct(LoaderInterface $loader)\n{\n$this->loader = $loader;\n}\n\n\n\n\n\npublic function load($json)\n{\nif ($json instanceof JsonFile) {\n$config = $json->read();\n} elseif (file_exists($json)) {\n$config = JsonFile::parseJson(file_get_contents($json), $json);\n} elseif (is_string($json)) {\n$config = JsonFile::parseJson($json);\n}\n\nreturn $this->loader->load($config);\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Package\\Loader;\n\n\n\n\n\n\ninterface LoaderInterface\n{\n\n\n\n\n\n\n\npublic function load(array $package, $class = 'Composer\\Package\\CompletePackage');\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Package\\Loader;\n\nuse Composer\\Package;\nuse Composer\\Package\\AliasPackage;\nuse Composer\\Package\\RootAliasPackage;\nuse Composer\\Package\\RootPackageInterface;\nuse Composer\\Package\\Version\\VersionParser;\n\n\n\n\n\nclass ArrayLoader implements LoaderInterface\n{\nprotected $versionParser;\n\npublic function __construct(VersionParser $parser = null)\n{\nif (!$parser) {\n$parser = new VersionParser;\n}\n$this->versionParser = $parser;\n}\n\npublic function load(array $config, $class = 'Composer\\Package\\CompletePackage')\n{\nif (!isset($config['name'])) {\nthrow new \\UnexpectedValueException('Unknown package has no name defined ('.json_encode($config).').');\n}\nif (!isset($config['version'])) {\nthrow new \\UnexpectedValueException('Package '.$config['name'].' has no version defined.');\n}\n\n\n if (isset($config['version_normalized'])) {\n$version = $config['version_normalized'];\n} else {\n$version = $this->versionParser->normalize($config['version']);\n}\n$package = new $class($config['name'], $version, $config['version']);\n$package->setType(isset($config['type']) ? strtolower($config['type']) : 'library');\n\nif (isset($config['target-dir'])) {\n$package->setTargetDir($config['target-dir']);\n}\n\nif (isset($config['extra']) && is_array($config['extra'])) {\n$package->setExtra($config['extra']);\n}\n\nif (isset($config['bin'])) {\nif (!is_array($config['bin'])) {\nthrow new \\UnexpectedValueException('Package '.$config['name'].'\\'s bin key should be an array, '.gettype($config['bin']).' given.');\n}\nforeach ($config['bin'] as $key => $bin) {\n$config['bin'][$key]= ltrim($bin, '/');\n}\n$package->setBinaries($config['bin']);\n}\n\nif (isset($config['installation-source'])) {\n$package->setInstallationSource($config['installation-source']);\n}\n\nif (isset($config['source'])) {\nif (!isset($config['source']['type']) || !isset($config['source']['url']) || !isset($config['source']['reference'])) {\nthrow new \\UnexpectedValueException(sprintf(\n\"Package %s's source key should be specified as {\\\"type\\\": ..., \\\"url\\\": ..., \\\"reference\\\": ...},\\n%s given.\",\n$config['name'],\njson_encode($config['source'])\n));\n}\n$package->setSourceType($config['source']['type']);\n$package->setSourceUrl($config['source']['url']);\n$package->setSourceReference($config['source']['reference']);\n}\n\nif (isset($config['dist'])) {\nif (!isset($config['dist']['type'])\n|| !isset($config['dist']['url'])) {\nthrow new \\UnexpectedValueException(sprintf(\n\"Package %s's dist key should be specified as \".\n\"{\\\"type\\\": ..., \\\"url\\\": ..., \\\"reference\\\": ..., \\\"shasum\\\": ...},\\n%s given.\",\n$config['name'],\njson_encode($config['dist'])\n));\n}\n$package->setDistType($config['dist']['type']);\n$package->setDistUrl($config['dist']['url']);\n$package->setDistReference(isset($config['dist']['reference']) ? $config['dist']['reference'] : null);\n$package->setDistSha1Checksum(isset($config['dist']['shasum']) ? $config['dist']['shasum'] : null);\n}\n\nforeach (Package\\BasePackage::$supportedLinkTypes as $type => $opts) {\nif (isset($config[$type])) {\n$method = 'set'.ucfirst($opts['method']);\n$package->{$method}(\n$this->versionParser->parseLinks(\n$package->getName(),\n$package->getPrettyVersion(),\n$opts['description'],\n$config[$type]\n)\n);\n}\n}\n\nif (isset($config['suggest']) && is_array($config['suggest'])) {\nforeach ($config['suggest'] as $target => $reason) {\nif ('self.version' === trim($reason)) {\n$config['suggest'][$target] = $package->getPrettyVersion();\n}\n}\n$package->setSuggests($config['suggest']);\n}\n\nif (isset($config['autoload'])) {\n$package->setAutoload($config['autoload']);\n}\n\nif (isset($config['include-path'])) {\n$package->setIncludePaths($config['include-path']);\n}\n\nif (!empty($config['time'])) {\n$time = ctype_digit($config['time']) ? '@'.$config['time'] : $config['time'];\n\ntry {\n$date = new \\DateTime($time, new \\DateTimeZone('UTC'));\n$package->setReleaseDate($date);\n} catch (\\Exception $e) {\n}\n}\n\nif (!empty($config['notification-url'])) {\n$package->setNotificationUrl($config['notification-url']);\n}\n\nif (!empty($config['archive']['exclude'])) {\n$package->setArchiveExcludes($config['archive']['exclude']);\n}\n\nif ($package instanceof Package\\CompletePackageInterface) {\nif (isset($config['scripts']) && is_array($config['scripts'])) {\nforeach ($config['scripts'] as $event => $listeners) {\n$config['scripts'][$event] = (array) $listeners;\n}\n$package->setScripts($config['scripts']);\n}\n\nif (!empty($config['description']) && is_string($config['description'])) {\n$package->setDescription($config['description']);\n}\n\nif (!empty($config['homepage']) && is_string($config['homepage'])) {\n$package->setHomepage($config['homepage']);\n}\n\nif (!empty($config['keywords']) && is_array($config['keywords'])) {\n$package->setKeywords($config['keywords']);\n}\n\nif (!empty($config['license'])) {\n$package->setLicense(is_array($config['license']) ? $config['license'] : array($config['license']));\n}\n\nif (!empty($config['authors']) && is_array($config['authors'])) {\n$package->setAuthors($config['authors']);\n}\n\nif (isset($config['support'])) {\n$package->setSupport($config['support']);\n}\n}\n\nif ($aliasNormalized = $this->getBranchAlias($config)) {\nif ($package instanceof RootPackageInterface) {\n$package = new RootAliasPackage($package, $aliasNormalized, preg_replace('{(\\.9{7})+}', '.x', $aliasNormalized));\n} else {\n$package = new AliasPackage($package, $aliasNormalized, preg_replace('{(\\.9{7})+}', '.x', $aliasNormalized));\n}\n}\n\nreturn $package;\n}\n\n\n\n\n\n\n\npublic function getBranchAlias(array $config)\n{\nif ('dev-' !== substr($config['version'], 0, 4)\n|| !isset($config['extra']['branch-alias'])\n|| !is_array($config['extra']['branch-alias'])\n) {\nreturn;\n}\n\nforeach ($config['extra']['branch-alias'] as $sourceBranch => $targetBranch) {\n\n if ('-dev' !== substr($targetBranch, -4)) {\ncontinue;\n}\n\n\n $validatedTargetBranch = $this->versionParser->normalizeBranch(substr($targetBranch, 0, -4));\nif ('-dev' !== substr($validatedTargetBranch, -4)) {\ncontinue;\n}\n\n\n if (strtolower($config['version']) !== strtolower($sourceBranch)) {\ncontinue;\n}\n\nreturn $validatedTargetBranch;\n}\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Package\\Loader;\n\nuse Composer\\Package;\nuse Composer\\Package\\BasePackage;\nuse Composer\\Package\\Version\\VersionParser;\n\n\n\n\nclass ValidatingArrayLoader implements LoaderInterface\n{\nprivate $loader;\nprivate $versionParser;\nprivate $errors;\nprivate $warnings;\nprivate $config;\nprivate $strictName;\n\npublic function __construct(LoaderInterface $loader, $strictName = true, VersionParser $parser = null)\n{\n$this->loader = $loader;\n$this->versionParser = $parser ?: new VersionParser();\n$this->strictName = $strictName;\n}\n\npublic function load(array $config, $class = 'Composer\\Package\\CompletePackage')\n{\n$this->errors = array();\n$this->warnings = array();\n$this->config = $config;\n\nif ($this->strictName) {\n$this->validateRegex('name', '[A-Za-z0-9][A-Za-z0-9_.-]*/[A-Za-z0-9][A-Za-z0-9_.-]*', true);\n} else {\n$this->validateString('name', true);\n}\n\nif (!empty($this->config['version'])) {\ntry {\n$this->versionParser->normalize($this->config['version']);\n} catch (\\Exception $e) {\nunset($this->config['version']);\n$this->errors[] = 'version : invalid value ('.$this->config['version'].'): '.$e->getMessage();\n}\n}\n\n$this->validateRegex('type', '[A-Za-z0-9-]+');\n$this->validateString('target-dir');\n$this->validateArray('extra');\n$this->validateFlatArray('bin');\n$this->validateArray('scripts'); \n $this->validateString('description');\n$this->validateUrl('homepage');\n$this->validateFlatArray('keywords', '[A-Za-z0-9 ._-]+');\n\nif (isset($this->config['license'])) {\nif (is_string($this->config['license'])) {\n$this->validateRegex('license', '[A-Za-z0-9+. ()-]+');\n} else {\n$this->validateFlatArray('license', '[A-Za-z0-9+. ()-]+');\n}\n}\n\n$this->validateString('time');\nif (!empty($this->config['time'])) {\ntry {\n$date = new \\DateTime($this->config['time'], new \\DateTimeZone('UTC'));\n} catch (\\Exception $e) {\n$this->errors[] = 'time : invalid value ('.$this->config['time'].'): '.$e->getMessage();\nunset($this->config['time']);\n}\n}\n\nif ($this->validateArray('authors') && !empty($this->config['authors'])) {\nforeach ($this->config['authors'] as $key => $author) {\nif (!is_array($author)) {\n$this->errors[] = 'authors.'.$key.' : should be an array, '.gettype($author).' given';\nunset($this->config['authors'][$key]);\ncontinue;\n}\nforeach (array('homepage', 'email', 'name', 'role') as $authorData) {\nif (isset($author[$authorData]) && !is_string($author[$authorData])) {\n$this->errors[] = 'authors.'.$key.'.'.$authorData.' : invalid value, must be a string';\nunset($this->config['authors'][$key][$authorData]);\n}\n}\nif (isset($author['homepage']) && !$this->filterUrl($author['homepage'])) {\n$this->warnings[] = 'authors.'.$key.'.homepage : invalid value ('.$author['homepage'].'), must be an http/https URL';\nunset($this->config['authors'][$key]['homepage']);\n}\nif (isset($author['email']) && !filter_var($author['email'], FILTER_VALIDATE_EMAIL)) {\n$this->warnings[] = 'authors.'.$key.'.email : invalid value ('.$author['email'].'), must be a valid email address';\nunset($this->config['authors'][$key]['email']);\n}\nif (empty($this->config['authors'][$key])) {\nunset($this->config['authors'][$key]);\n}\n}\nif (empty($this->config['authors'])) {\nunset($this->config['authors']);\n}\n}\n\nif ($this->validateArray('support') && !empty($this->config['support'])) {\nforeach (array('issues', 'forum', 'wiki', 'source', 'email', 'irc') as $key) {\nif (isset($this->config['support'][$key]) && !is_string($this->config['support'][$key])) {\n$this->errors[] = 'support.'.$key.' : invalid value, must be a string';\nunset($this->config['support'][$key]);\n}\n}\n\nif (isset($this->config['support']['email']) && !filter_var($this->config['support']['email'], FILTER_VALIDATE_EMAIL)) {\n$this->warnings[] = 'support.email : invalid value ('.$this->config['support']['email'].'), must be a valid email address';\nunset($this->config['support']['email']);\n}\n\nif (isset($this->config['support']['irc']) && !$this->filterUrl($this->config['support']['irc'], array('irc'))) {\n$this->warnings[] = 'support.irc : invalid value ('.$this->config['support']['irc'].'), must be a irc://<server>/<channel> URL';\nunset($this->config['support']['irc']);\n}\n\nforeach (array('issues', 'forum', 'wiki', 'source') as $key) {\nif (isset($this->config['support'][$key]) && !$this->filterUrl($this->config['support'][$key])) {\n$this->warnings[] = 'support.'.$key.' : invalid value ('.$this->config['support'][$key].'), must be an http/https URL';\nunset($this->config['support'][$key]);\n}\n}\nif (empty($this->config['support'])) {\nunset($this->config['support']);\n}\n}\n\nforeach (array_keys(BasePackage::$supportedLinkTypes) as $linkType) {\nif ($this->validateArray($linkType) && isset($this->config[$linkType])) {\nforeach ($this->config[$linkType] as $package => $constraint) {\nif (!preg_match('{^[A-Za-z0-9_./-]+$}', $package)) {\n$this->warnings[] = $linkType.'.'.$package.' : invalid key, package names must be strings containing only [A-Za-z0-9_./-]';\n}\nif (!is_string($constraint)) {\n$this->errors[] = $linkType.'.'.$package.' : invalid value, must be a string containing a version constraint';\nunset($this->config[$linkType][$package]);\n} elseif ('self.version' !== $constraint) {\ntry {\n$this->versionParser->parseConstraints($constraint);\n} catch (\\Exception $e) {\n$this->errors[] = $linkType.'.'.$package.' : invalid version constraint ('.$e->getMessage().')';\nunset($this->config[$linkType][$package]);\n}\n}\n}\n}\n}\n\nif ($this->validateArray('suggest') && !empty($this->config['suggest'])) {\nforeach ($this->config['suggest'] as $package => $description) {\nif (!is_string($description)) {\n$this->errors[] = 'suggest.'.$package.' : invalid value, must be a string describing why the package is suggested';\nunset($this->config['suggest'][$package]);\n}\n}\n}\n\nif ($this->validateString('minimum-stability') && !empty($this->config['minimum-stability'])) {\nif (!isset(BasePackage::$stabilities[$this->config['minimum-stability']])) {\n$this->errors[] = 'minimum-stability : invalid value ('.$this->config['minimum-stability'].'), must be one of '.implode(', ', array_keys(BasePackage::$stabilities));\nunset($this->config['minimum-stability']);\n}\n}\n\nif ($this->validateArray('autoload') && !empty($this->config['autoload'])) {\n$types = array('psr-0', 'classmap', 'files');\nforeach ($this->config['autoload'] as $type => $typeConfig) {\nif (!in_array($type, $types)) {\n$this->errors[] = 'autoload : invalid value ('.$type.'), must be one of '.implode(', ', $types);\nunset($this->config['autoload'][$type]);\n}\n}\n}\n\n\n \n\n\n \n\n$this->validateFlatArray('include-path');\n\n\n if (isset($this->config['extra']['branch-alias'])) {\nif (!is_array($this->config['extra']['branch-alias'])) {\n$this->errors[] = 'extra.branch-alias : must be an array of versions => aliases';\n} else {\nforeach ($this->config['extra']['branch-alias'] as $sourceBranch => $targetBranch) {\n\n if ('-dev' !== substr($targetBranch, -4)) {\n$this->warnings[] = 'extra.branch-alias.'.$sourceBranch.' : the target branch ('.$targetBranch.') must end in -dev';\nunset($this->config['extra']['branch-alias'][$sourceBranch]);\n\ncontinue;\n}\n\n\n $validatedTargetBranch = $this->versionParser->normalizeBranch(substr($targetBranch, 0, -4));\nif ('-dev' !== substr($validatedTargetBranch, -4)) {\n$this->warnings[] = 'extra.branch-alias.'.$sourceBranch.' : the target branch ('.$targetBranch.') must be a parseable number like 2.0-dev';\nunset($this->config['extra']['branch-alias'][$sourceBranch]);\n}\n}\n}\n}\n\nif ($this->errors) {\nthrow new InvalidPackageException($this->errors, $this->warnings, $config);\n}\n\n$package = $this->loader->load($this->config, $class);\n$this->config = null;\n\nreturn $package;\n}\n\npublic function getWarnings()\n{\nreturn $this->warnings;\n}\n\npublic function getErrors()\n{\nreturn $this->errors;\n}\n\nprivate function validateRegex($property, $regex, $mandatory = false)\n{\nif (!$this->validateString($property, $mandatory)) {\nreturn false;\n}\n\nif (!preg_match('{^'.$regex.'$}u', $this->config[$property])) {\n$message = $property.' : invalid value ('.$this->config[$property].'), must match '.$regex;\nif ($mandatory) {\n$this->errors[] = $message;\n} else {\n$this->warnings[] = $message;\n}\nunset($this->config[$property]);\n\nreturn false;\n}\n\nreturn true;\n}\n\nprivate function validateString($property, $mandatory = false)\n{\nif (isset($this->config[$property]) && !is_string($this->config[$property])) {\n$this->errors[] = $property.' : should be a string, '.gettype($this->config[$property]).' given';\nunset($this->config[$property]);\n\nreturn false;\n}\n\nif (!isset($this->config[$property]) || trim($this->config[$property]) === '') {\nif ($mandatory) {\n$this->errors[] = $property.' : must be present';\n}\nunset($this->config[$property]);\n\nreturn false;\n}\n\nreturn true;\n}\n\nprivate function validateArray($property, $mandatory = false)\n{\nif (isset($this->config[$property]) && !is_array($this->config[$property])) {\n$this->errors[] = $property.' : should be an array, '.gettype($this->config[$property]).' given';\nunset($this->config[$property]);\n\nreturn false;\n}\n\nif (!isset($this->config[$property]) || !count($this->config[$property])) {\nif ($mandatory) {\n$this->errors[] = $property.' : must be present and contain at least one element';\n}\nunset($this->config[$property]);\n\nreturn false;\n}\n\nreturn true;\n}\n\nprivate function validateFlatArray($property, $regex = null, $mandatory = false)\n{\nif (!$this->validateArray($property, $mandatory)) {\nreturn false;\n}\n\n$pass = true;\nforeach ($this->config[$property] as $key => $value) {\nif (!is_string($value) && !is_numeric($value)) {\n$this->errors[] = $property.'.'.$key.' : must be a string or int, '.gettype($value).' given';\nunset($this->config[$property][$key]);\n$pass = false;\n\ncontinue;\n}\n\nif ($regex && !preg_match('{^'.$regex.'$}u', $value)) {\n$this->warnings[] = $property.'.'.$key.' : invalid value ('.$value.'), must match '.$regex;\nunset($this->config[$property][$key]);\n$pass = false;\n}\n}\n\nreturn $pass;\n}\n\nprivate function validateUrl($property, $mandatory = false)\n{\nif (!$this->validateString($property, $mandatory)) {\nreturn false;\n}\n\nif (!$this->filterUrl($this->config[$property])) {\n$this->warnings[] = $property.' : invalid value ('.$this->config[$property].'), must be an http/https URL';\nunset($this->config[$property]);\n\nreturn false;\n}\n\nreturn true;\n}\n\nprivate function filterUrl($value, array $schemes = array('http', 'https'))\n{\nif ($value === '') {\nreturn true;\n}\n\n$bits = parse_url($value);\nif (empty($bits['scheme']) || empty($bits['host'])) {\nreturn false;\n}\n\nif (!in_array($bits['scheme'], $schemes, true)) {\nreturn false;\n}\n\nreturn true;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Package\\Loader;\n\nuse Composer\\Package\\BasePackage;\nuse Composer\\Package\\AliasPackage;\nuse Composer\\Config;\nuse Composer\\Factory;\nuse Composer\\Package\\Version\\VersionParser;\nuse Composer\\Repository\\RepositoryManager;\nuse Composer\\Repository\\Vcs\\HgDriver;\nuse Composer\\IO\\NullIO;\nuse Composer\\Util\\ProcessExecutor;\nuse Composer\\Util\\Git as GitUtil;\n\n\n\n\n\n\n\n\nclass RootPackageLoader extends ArrayLoader\n{\nprivate $manager;\nprivate $config;\nprivate $process;\n\npublic function __construct(RepositoryManager $manager, Config $config, VersionParser $parser = null, ProcessExecutor $process = null)\n{\n$this->manager = $manager;\n$this->config = $config;\n$this->process = $process ?: new ProcessExecutor();\nparent::__construct($parser);\n}\n\npublic function load(array $config, $class = 'Composer\\Package\\RootPackage')\n{\nif (!isset($config['name'])) {\n$config['name'] = '__root__';\n}\nif (!isset($config['version'])) {\n\n if (getenv('COMPOSER_ROOT_VERSION')) {\n$version = getenv('COMPOSER_ROOT_VERSION');\n} else {\n$version = $this->guessVersion($config);\n}\n\nif (!$version) {\n$version = '1.0.0';\n}\n\n$config['version'] = $version;\n}\n\n$realPackage = $package = parent::load($config, $class);\n\nif ($realPackage instanceof AliasPackage) {\n$realPackage = $package->getAliasOf();\n}\n\n$aliases = array();\n$stabilityFlags = array();\n$references = array();\nforeach (array('require', 'require-dev') as $linkType) {\nif (isset($config[$linkType])) {\n$linkInfo = BasePackage::$supportedLinkTypes[$linkType];\n$method = 'get'.ucfirst($linkInfo['method']);\n$links = array();\nforeach ($realPackage->$method() as $link) {\n$links[$link->getTarget()] = $link->getConstraint()->getPrettyString();\n}\n$aliases = $this->extractAliases($links, $aliases);\n$stabilityFlags = $this->extractStabilityFlags($links, $stabilityFlags);\n$references = $this->extractReferences($links, $references);\n}\n}\n\n$realPackage->setAliases($aliases);\n$realPackage->setStabilityFlags($stabilityFlags);\n$realPackage->setReferences($references);\n\nif (isset($config['minimum-stability'])) {\n$realPackage->setMinimumStability(VersionParser::normalizeStability($config['minimum-stability']));\n}\n\nif (isset($config['prefer-stable'])) {\n$realPackage->setPreferStable((bool) $config['prefer-stable']);\n}\n\n$repos = Factory::createDefaultRepositories(null, $this->config, $this->manager);\nforeach ($repos as $repo) {\n$this->manager->addRepository($repo);\n}\n$realPackage->setRepositories($this->config->getRepositories());\n\nreturn $package;\n}\n\nprivate function extractAliases(array $requires, array $aliases)\n{\nforeach ($requires as $reqName => $reqVersion) {\nif (preg_match('{^([^,\\s#]+)(?:#[^ ]+)? +as +([^,\\s]+)$}', $reqVersion, $match)) {\n$aliases[] = array(\n'package' => strtolower($reqName),\n'version' => $this->versionParser->normalize($match[1], $reqVersion),\n'alias' => $match[2],\n'alias_normalized' => $this->versionParser->normalize($match[2], $reqVersion),\n);\n}\n}\n\nreturn $aliases;\n}\n\nprivate function extractStabilityFlags(array $requires, array $stabilityFlags)\n{\n$stabilities = BasePackage::$stabilities;\nforeach ($requires as $reqName => $reqVersion) {\n\n if (preg_match('{^[^,\\s]*?@('.implode('|', array_keys($stabilities)).')$}i', $reqVersion, $match)) {\n$name = strtolower($reqName);\n$stability = $stabilities[VersionParser::normalizeStability($match[1])];\n\nif (isset($stabilityFlags[$name]) && $stabilityFlags[$name] > $stability) {\ncontinue;\n}\n$stabilityFlags[$name] = $stability;\n\ncontinue;\n}\n\n\n $reqVersion = preg_replace('{^([^,\\s@]+) as .+$}', '$1', $reqVersion);\nif (preg_match('{^[^,\\s@]+$}', $reqVersion) && 'stable' !== ($stabilityName = VersionParser::parseStability($reqVersion))) {\n$name = strtolower($reqName);\n$stability = $stabilities[$stabilityName];\nif (isset($stabilityFlags[$name]) && $stabilityFlags[$name] > $stability) {\ncontinue;\n}\n$stabilityFlags[$name] = $stability;\n}\n}\n\nreturn $stabilityFlags;\n}\n\nprivate function extractReferences(array $requires, array $references)\n{\nforeach ($requires as $reqName => $reqVersion) {\n$reqVersion = preg_replace('{^([^,\\s@]+) as .+$}', '$1', $reqVersion);\nif (preg_match('{^[^,\\s@]+?#([a-f0-9]+)$}', $reqVersion, $match) && 'dev' === ($stabilityName = VersionParser::parseStability($reqVersion))) {\n$name = strtolower($reqName);\n$references[$name] = $match[1];\n}\n}\n\nreturn $references;\n}\n\nprivate function guessVersion(array $config)\n{\nif (function_exists('proc_open')) {\n$version = $this->guessGitVersion($config);\nif (null !== $version) {\nreturn $version;\n}\n\nreturn $this->guessHgVersion($config);\n}\n}\n\nprivate function guessGitVersion(array $config)\n{\n$util = new GitUtil;\n$util->cleanEnv();\n\n\n if (0 === $this->process->execute('git branch --no-color --no-abbrev -v', $output)) {\n$branches = array();\n$isFeatureBranch = false;\n$version = null;\n\n\n foreach ($this->process->splitLines($output) as $branch) {\nif ($branch && preg_match('{^(?:\\* ) *(\\S+|\\(no branch\\)) *([a-f0-9]+) .*$}', $branch, $match)) {\nif ($match[1] === '(no branch)') {\n$version = 'dev-'.$match[2];\n$isFeatureBranch = true;\n} else {\n$version = $this->versionParser->normalizeBranch($match[1]);\n$isFeatureBranch = 0 === strpos($version, 'dev-');\nif ('9999999-dev' === $version) {\n$version = 'dev-'.$match[1];\n}\n}\n}\n\nif ($branch && !preg_match('{^ *[^/]+/HEAD }', $branch)) {\nif (preg_match('{^(?:\\* )? *(\\S+) *([a-f0-9]+) .*$}', $branch, $match)) {\n$branches[] = $match[1];\n}\n}\n}\n\nif (!$isFeatureBranch) {\nreturn $version;\n}\n\n\n $version = $this->guessFeatureVersion($config, $version, $branches, 'git rev-list %candidate%..%branch%');\n\nreturn $version;\n}\n}\n\nprivate function guessHgVersion(array $config)\n{\n\n if (0 === $this->process->execute('hg branch', $output)) {\n$branch = trim($output);\n$version = $this->versionParser->normalizeBranch($branch);\n$isFeatureBranch = 0 === strpos($version, 'dev-');\n\nif ('9999999-dev' === $version) {\n$version = 'dev-'.$branch;\n}\n\nif (!$isFeatureBranch) {\nreturn $version;\n}\n\n\n $config = array('url' => getcwd());\n$driver = new HgDriver($config, new NullIO(), $this->config, $this->process);\n$branches = array_keys($driver->getBranches());\n\n\n $version = $this->guessFeatureVersion($config, $version, $branches, 'hg log -r \"not ancestors(\\'%candidate%\\') and ancestors(\\'%branch%\\')\" --template \"{node}\\\\n\"');\n\nreturn $version;\n}\n}\n\nprivate function guessFeatureVersion(array $config, $version, array $branches, $scmCmdline)\n{\n\n \n if ((isset($config['extra']['branch-alias']) && !isset($config['extra']['branch-alias'][$version]))\n|| strpos(json_encode($config), '\"self.version\"')\n) {\n$branch = preg_replace('{^dev-}', '', $version);\n$length = PHP_INT_MAX;\nforeach ($branches as $candidate) {\n\n if ($candidate === $branch || !preg_match('{^(master|trunk|default|develop|\\d+\\..+)$}', $candidate, $match)) {\ncontinue;\n}\n\n$cmdLine = str_replace(array('%candidate%', '%branch%'), array($candidate, $branch), $scmCmdline);\nif (0 !== $this->process->execute($cmdLine, $output)) {\ncontinue;\n}\n\nif (strlen($output) < $length) {\n$length = strlen($output);\n$version = $this->versionParser->normalizeBranch($candidate);\nif ('9999999-dev' === $version) {\n$version = 'dev-'.$match[1];\n}\n}\n}\n}\n\nreturn $version;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Package;\n\nuse Composer\\Json\\JsonFile;\nuse Composer\\Installer\\InstallationManager;\nuse Composer\\Repository\\RepositoryManager;\nuse Composer\\Util\\ProcessExecutor;\nuse Composer\\Package\\AliasPackage;\nuse Composer\\Repository\\ArrayRepository;\nuse Composer\\Package\\Dumper\\ArrayDumper;\nuse Composer\\Package\\Loader\\ArrayLoader;\nuse Composer\\Package\\Version\\VersionParser;\nuse Composer\\Util\\Git as GitUtil;\n\n\n\n\n\n\n\nclass Locker\n{\nprivate $lockFile;\nprivate $repositoryManager;\nprivate $installationManager;\nprivate $hash;\nprivate $loader;\nprivate $dumper;\nprivate $lockDataCache;\n\n\n\n\n\n\n\n\n\npublic function __construct(JsonFile $lockFile, RepositoryManager $repositoryManager, InstallationManager $installationManager, $hash)\n{\n$this->lockFile = $lockFile;\n$this->repositoryManager = $repositoryManager;\n$this->installationManager = $installationManager;\n$this->hash = $hash;\n$this->loader = new ArrayLoader();\n$this->dumper = new ArrayDumper();\n}\n\n\n\n\n\n\npublic function isLocked()\n{\nif (!$this->lockFile->exists()) {\nreturn false;\n}\n\n$data = $this->getLockData();\n\nreturn isset($data['packages']);\n}\n\n\n\n\n\n\npublic function isFresh()\n{\n$lock = $this->lockFile->read();\n\nreturn $this->hash === $lock['hash'];\n}\n\n\n\n\n\n\n\n\npublic function getLockedRepository($withDevReqs = false)\n{\n$lockData = $this->getLockData();\n$packages = new ArrayRepository();\n\n$lockedPackages = $lockData['packages'];\nif ($withDevReqs) {\nif (isset($lockData['packages-dev'])) {\n$lockedPackages = array_merge($lockedPackages, $lockData['packages-dev']);\n} else {\nthrow new \\RuntimeException('The lock file does not contain require-dev information, run install with the --no-dev option or run update to install those packages.');\n}\n}\n\nif (empty($lockedPackages)) {\nreturn $packages;\n}\n\nif (isset($lockedPackages[0]['name'])) {\nforeach ($lockedPackages as $info) {\n$packages->addPackage($this->loader->load($info));\n}\n\nreturn $packages;\n}\n\nthrow new \\RuntimeException('Your composer.lock was created before 2012-09-15, and is not supported anymore. Run \"composer update\" to generate a new one.');\n}\n\n\n\n\n\n\n\npublic function getPlatformRequirements($withDevReqs = false)\n{\n$lockData = $this->getLockData();\n$versionParser = new VersionParser();\n$requirements = array();\n\nif (!empty($lockData['platform'])) {\n$requirements = $versionParser->parseLinks(\n'__ROOT__',\n'1.0.0',\n'requires',\nisset($lockData['platform']) ? $lockData['platform'] : array()\n);\n}\n\nif ($withDevReqs && !empty($lockData['platform-dev'])) {\n$devRequirements = $versionParser->parseLinks(\n'__ROOT__',\n'1.0.0',\n'requires',\nisset($lockData['platform-dev']) ? $lockData['platform-dev'] : array()\n);\n\n$requirements = array_merge($requirements, $devRequirements);\n}\n\nreturn $requirements;\n}\n\npublic function getMinimumStability()\n{\n$lockData = $this->getLockData();\n\nreturn isset($lockData['minimum-stability']) ? $lockData['minimum-stability'] : 'stable';\n}\n\npublic function getStabilityFlags()\n{\n$lockData = $this->getLockData();\n\nreturn isset($lockData['stability-flags']) ? $lockData['stability-flags'] : array();\n}\n\npublic function getAliases()\n{\n$lockData = $this->getLockData();\n\nreturn isset($lockData['aliases']) ? $lockData['aliases'] : array();\n}\n\npublic function getLockData()\n{\nif (null !== $this->lockDataCache) {\nreturn $this->lockDataCache;\n}\n\nif (!$this->lockFile->exists()) {\nthrow new \\LogicException('No lockfile found. Unable to read locked packages');\n}\n\nreturn $this->lockDataCache = $this->lockFile->read();\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npublic function setLockData(array $packages, $devPackages, array $platformReqs, $platformDevReqs, array $aliases, $minimumStability, array $stabilityFlags)\n{\n$lock = array(\n'_readme' => array('This file locks the dependencies of your project to a known state', 'Read more about it at http://getcomposer.org/doc/01-basic-usage.md#composer-lock-the-lock-file'),\n'hash' => $this->hash,\n'packages' => null,\n'packages-dev' => null,\n'aliases' => array(),\n'minimum-stability' => $minimumStability,\n'stability-flags' => $stabilityFlags,\n);\n\nforeach ($aliases as $package => $versions) {\nforeach ($versions as $version => $alias) {\n$lock['aliases'][] = array(\n'alias' => $alias['alias'],\n'alias_normalized' => $alias['alias_normalized'],\n'version' => $version,\n'package' => $package,\n);\n}\n}\n\n$lock['packages'] = $this->lockPackages($packages);\nif (null !== $devPackages) {\n$lock['packages-dev'] = $this->lockPackages($devPackages);\n}\n\nif (empty($lock['packages']) && empty($lock['packages-dev'])) {\nif ($this->lockFile->exists()) {\nunlink($this->lockFile->getPath());\n}\n\nreturn false;\n}\n\n$lock['platform'] = $platformReqs;\n$lock['platform-dev'] = $platformDevReqs;\n\nif (!$this->isLocked() || $lock !== $this->getLockData()) {\n$this->lockFile->write($lock);\n$this->lockDataCache = null;\n\nreturn true;\n}\n\nreturn false;\n}\n\nprivate function lockPackages(array $packages)\n{\n$locked = array();\n\nforeach ($packages as $package) {\nif ($package instanceof AliasPackage) {\ncontinue;\n}\n\n$name = $package->getPrettyName();\n$version = $package->getPrettyVersion();\n\nif (!$name || !$version) {\nthrow new \\LogicException(sprintf(\n'Package \"%s\" has no version or name and can not be locked', $package\n));\n}\n\n$spec = $this->dumper->dump($package);\nunset($spec['version_normalized']);\n\n\n $time = isset($spec['time']) ? $spec['time'] : null;\nunset($spec['time']);\nif ($package->isDev()) {\n\n $time = $this->getPackageTime($package) ?: $time;\n}\nif (null !== $time) {\n$spec['time'] = $time;\n}\n\nunset($spec['installation-source']);\n\n$locked[] = $spec;\n}\n\nusort($locked, function ($a, $b) {\n$comparison = strcmp($a['name'], $b['name']);\n\nif (0 !== $comparison) {\nreturn $comparison;\n}\n\n\n return strcmp($a['version'], $b['version']);\n});\n\nreturn $locked;\n}\n\n\n\n\n\n\n\nprivate function getPackageTime(PackageInterface $package)\n{\nif (!function_exists('proc_open')) {\nreturn null;\n}\n\n$path = $this->installationManager->getInstallPath($package);\n$sourceType = $package->getSourceType();\n$datetime = null;\n\nif ($path && in_array($sourceType, array('git', 'hg'))) {\n$sourceRef = $package->getSourceReference() ?: $package->getDistReference();\n$process = new ProcessExecutor();\n\nswitch ($sourceType) {\ncase 'git':\n$util = new GitUtil;\n$util->cleanEnv();\n\nif (0 === $process->execute('git log -n1 --pretty=%ct '.escapeshellarg($sourceRef), $output, $path) && preg_match('{^\\s*\\d+\\s*$}', $output)) {\n$datetime = new \\DateTime('@'.trim($output), new \\DateTimeZone('UTC'));\n}\nbreak;\n\ncase 'hg':\nif (0 === $process->execute('hg log --template \"{date|hgdate}\" -r '.escapeshellarg($sourceRef), $output, $path) && preg_match('{^\\s*(\\d+)\\s*}', $output, $match)) {\n$datetime = new \\DateTime('@'.$match[1], new \\DateTimeZone('UTC'));\n}\nbreak;\n}\n}\n\nreturn $datetime ? $datetime->format('Y-m-d H:i:s') : null;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Package;\n\nuse Composer\\Repository\\RepositoryInterface;\n\n\n\n\n\n\ninterface PackageInterface\n{\n\n\n\n\n\npublic function getName();\n\n\n\n\n\n\npublic function getPrettyName();\n\n\n\n\n\n\n\n\n\npublic function getNames();\n\n\n\n\n\n\npublic function setId($id);\n\n\n\n\n\n\npublic function getId();\n\n\n\n\n\n\npublic function isDev();\n\n\n\n\n\n\npublic function getType();\n\n\n\n\n\n\npublic function getTargetDir();\n\n\n\n\n\n\npublic function getExtra();\n\n\n\n\n\n\npublic function setInstallationSource($type);\n\n\n\n\n\n\npublic function getInstallationSource();\n\n\n\n\n\n\npublic function getSourceType();\n\n\n\n\n\n\npublic function getSourceUrl();\n\n\n\n\n\n\npublic function getSourceReference();\n\n\n\n\n\n\npublic function getDistType();\n\n\n\n\n\n\npublic function getDistUrl();\n\n\n\n\n\n\npublic function getDistReference();\n\n\n\n\n\n\npublic function getDistSha1Checksum();\n\n\n\n\n\n\npublic function getVersion();\n\n\n\n\n\n\npublic function getPrettyVersion();\n\n\n\n\n\n\npublic function getReleaseDate();\n\n\n\n\n\n\npublic function getStability();\n\n\n\n\n\n\n\npublic function getRequires();\n\n\n\n\n\n\n\npublic function getConflicts();\n\n\n\n\n\n\n\npublic function getProvides();\n\n\n\n\n\n\n\npublic function getReplaces();\n\n\n\n\n\n\n\npublic function getDevRequires();\n\n\n\n\n\n\n\npublic function getSuggests();\n\n\n\n\n\n\n\n\n\n\n\npublic function getAutoload();\n\n\n\n\n\n\n\npublic function getIncludePaths();\n\n\n\n\n\n\npublic function setRepository(RepositoryInterface $repository);\n\n\n\n\n\n\npublic function getRepository();\n\n\n\n\n\n\npublic function getBinaries();\n\n\n\n\n\n\npublic function getUniqueName();\n\n\n\n\n\n\npublic function getNotificationUrl();\n\n\n\n\n\n\npublic function __toString();\n\n\n\n\n\n\npublic function getPrettyString();\n\n\n\n\n\n\npublic function getArchiveExcludes();\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Package;\n\nuse Composer\\Repository\\RepositoryInterface;\nuse Composer\\Repository\\PlatformRepository;\n\n\n\n\n\n\nabstract class BasePackage implements PackageInterface\n{\npublic static $supportedLinkTypes = array(\n'require' => array('description' => 'requires', 'method' => 'requires'),\n'conflict' => array('description' => 'conflicts', 'method' => 'conflicts'),\n'provide' => array('description' => 'provides', 'method' => 'provides'),\n'replace' => array('description' => 'replaces', 'method' => 'replaces'),\n'require-dev' => array('description' => 'requires (for development)', 'method' => 'devRequires'),\n);\n\nconst STABILITY_STABLE = 0;\nconst STABILITY_RC = 5;\nconst STABILITY_BETA = 10;\nconst STABILITY_ALPHA = 15;\nconst STABILITY_DEV = 20;\n\npublic static $stabilities = array(\n'stable' => self::STABILITY_STABLE,\n'RC' => self::STABILITY_RC,\n'beta' => self::STABILITY_BETA,\n'alpha' => self::STABILITY_ALPHA,\n'dev' => self::STABILITY_DEV,\n);\n\nprotected $name;\nprotected $prettyName;\n\nprotected $repository;\nprotected $id;\n\n\n\n\n\n\npublic function __construct($name)\n{\n$this->prettyName = $name;\n$this->name = strtolower($name);\n$this->id = -1;\n}\n\n\n\n\npublic function getName()\n{\nreturn $this->name;\n}\n\n\n\n\npublic function getPrettyName()\n{\nreturn $this->prettyName;\n}\n\n\n\n\npublic function getNames()\n{\n$names = array(\n$this->getName() => true,\n);\n\nforeach ($this->getProvides() as $link) {\n$names[$link->getTarget()] = true;\n}\n\nforeach ($this->getReplaces() as $link) {\n$names[$link->getTarget()] = true;\n}\n\nreturn array_keys($names);\n}\n\n\n\n\npublic function setId($id)\n{\n$this->id = $id;\n}\n\n\n\n\npublic function getId()\n{\nreturn $this->id;\n}\n\n\n\n\npublic function setRepository(RepositoryInterface $repository)\n{\nif ($this->repository && $repository !== $this->repository) {\nthrow new \\LogicException('A package can only be added to one repository');\n}\n$this->repository = $repository;\n}\n\n\n\n\npublic function getRepository()\n{\nreturn $this->repository;\n}\n\n\n\n\n\n\npublic function isPlatform()\n{\nreturn $this->getRepository() instanceof PlatformRepository;\n}\n\n\n\n\n\n\npublic function getUniqueName()\n{\nreturn $this->getName().'-'.$this->getVersion();\n}\n\npublic function equals(PackageInterface $package)\n{\n$self = $this;\nif ($this instanceof AliasPackage) {\n$self = $this->getAliasOf();\n}\nif ($package instanceof AliasPackage) {\n$package = $package->getAliasOf();\n}\n\nreturn $package === $self;\n}\n\n\n\n\n\n\npublic function __toString()\n{\nreturn $this->getUniqueName();\n}\n\npublic function getPrettyString()\n{\nreturn $this->getPrettyName().' '.$this->getPrettyVersion();\n}\n\npublic function __clone()\n{\n$this->repository = null;\n$this->id = -1;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Package\\Version;\n\nuse Composer\\Package\\BasePackage;\nuse Composer\\Package\\PackageInterface;\nuse Composer\\Package\\Link;\nuse Composer\\Package\\LinkConstraint\\EmptyConstraint;\nuse Composer\\Package\\LinkConstraint\\MultiConstraint;\nuse Composer\\Package\\LinkConstraint\\VersionConstraint;\n\n\n\n\n\n\nclass VersionParser\n{\nprivate static $modifierRegex = '[._-]?(?:(stable|beta|b|RC|alpha|a|patch|pl|p)(?:[.-]?(\\d+))?)?([.-]?dev)?';\n\n\n\n\n\n\n\npublic static function parseStability($version)\n{\n$version = preg_replace('{#.+$}i', '', $version);\n\nif ('dev-' === substr($version, 0, 4) || '-dev' === substr($version, -4)) {\nreturn 'dev';\n}\n\npreg_match('{'.self::$modifierRegex.'$}i', strtolower($version), $match);\nif (!empty($match[3])) {\nreturn 'dev';\n}\n\nif (!empty($match[1])) {\nif ('beta' === $match[1] || 'b' === $match[1]) {\nreturn 'beta';\n}\nif ('alpha' === $match[1] || 'a' === $match[1]) {\nreturn 'alpha';\n}\nif ('rc' === $match[1]) {\nreturn 'RC';\n}\n}\n\nreturn 'stable';\n}\n\npublic static function normalizeStability($stability)\n{\n$stability = strtolower($stability);\n\nreturn $stability === 'rc' ? 'RC' : $stability;\n}\n\npublic static function formatVersion(PackageInterface $package, $truncate = true)\n{\nif (!$package->isDev() || !in_array($package->getSourceType(), array('hg', 'git'))) {\nreturn $package->getPrettyVersion();\n}\n\n\n if ($truncate && strlen($package->getSourceReference()) === 40) {\nreturn $package->getPrettyVersion() . ' ' . substr($package->getSourceReference(), 0, 7);\n}\n\nreturn $package->getPrettyVersion() . ' ' . $package->getSourceReference();\n}\n\n\n\n\n\n\n\n\n\npublic function normalize($version, $fullVersion = null)\n{\n$version = trim($version);\nif (null === $fullVersion) {\n$fullVersion = $version;\n}\n\n\n if (preg_match('{^([^,\\s]+) +as +([^,\\s]+)$}', $version, $match)) {\n$version = $match[1];\n}\n\n\n if (preg_match('{^(?:dev-)?(?:master|trunk|default)$}i', $version)) {\nreturn '9999999-dev';\n}\n\nif ('dev-' === strtolower(substr($version, 0, 4))) {\nreturn 'dev-'.substr($version, 4);\n}\n\n\n if (preg_match('{^v?(\\d{1,3})(\\.\\d+)?(\\.\\d+)?(\\.\\d+)?'.self::$modifierRegex.'$}i', $version, $matches)) {\n$version = $matches[1]\n.(!empty($matches[2]) ? $matches[2] : '.0')\n.(!empty($matches[3]) ? $matches[3] : '.0')\n.(!empty($matches[4]) ? $matches[4] : '.0');\n$index = 5;\n} elseif (preg_match('{^v?(\\d{4}(?:[.:-]?\\d{2}){1,6}(?:[.:-]?\\d{1,3})?)'.self::$modifierRegex.'$}i', $version, $matches)) { \n $version = preg_replace('{\\D}', '-', $matches[1]);\n$index = 2;\n}\n\n\n if (isset($index)) {\nif (!empty($matches[$index])) {\nif ('stable' === $matches[$index]) {\nreturn $version;\n}\n$version .= '-' . $this->expandStability($matches[$index]) . (!empty($matches[$index+1]) ? $matches[$index+1] : '');\n}\n\nif (!empty($matches[$index+2])) {\n$version .= '-dev';\n}\n\nreturn $version;\n}\n\n\n if (preg_match('{(.*?)[.-]?dev$}i', $version, $match)) {\ntry {\nreturn $this->normalizeBranch($match[1]);\n} catch (\\Exception $e) {}\n}\n\n$extraMessage = '';\nif (preg_match('{ +as +'.preg_quote($version).'$}', $fullVersion)) {\n$extraMessage = ' in \"'.$fullVersion.'\", the alias must be an exact version';\n} elseif (preg_match('{^'.preg_quote($version).' +as +}', $fullVersion)) {\n$extraMessage = ' in \"'.$fullVersion.'\", the alias source must be an exact version, if it is a branch name you should prefix it with dev-';\n}\n\nthrow new \\UnexpectedValueException('Invalid version string \"'.$version.'\"'.$extraMessage);\n}\n\n\n\n\n\n\n\npublic function normalizeBranch($name)\n{\n$name = trim($name);\n\nif (in_array($name, array('master', 'trunk', 'default'))) {\nreturn $this->normalize($name);\n}\n\nif (preg_match('#^v?(\\d+)(\\.(?:\\d+|[x*]))?(\\.(?:\\d+|[x*]))?(\\.(?:\\d+|[x*]))?$#i', $name, $matches)) {\n$version = '';\nfor ($i = 1; $i < 5; $i++) {\n$version .= isset($matches[$i]) ? str_replace('*', 'x', $matches[$i]) : '.x';\n}\n\nreturn str_replace('x', '9999999', $version).'-dev';\n}\n\nreturn 'dev-'.$name;\n}\n\n\n\n\n\n\n\n\npublic function parseLinks($source, $sourceVersion, $description, $links)\n{\n$res = array();\nforeach ($links as $target => $constraint) {\nif ('self.version' === $constraint) {\n$parsedConstraint = $this->parseConstraints($sourceVersion);\n} else {\n$parsedConstraint = $this->parseConstraints($constraint);\n}\n$res[strtolower($target)] = new Link($source, $target, $parsedConstraint, $description, $constraint);\n}\n\nreturn $res;\n}\n\n\n\n\n\n\n\npublic function parseConstraints($constraints)\n{\n$prettyConstraint = $constraints;\n\nif (preg_match('{^([^,\\s]*?)@('.implode('|', array_keys(BasePackage::$stabilities)).')$}i', $constraints, $match)) {\n$constraints = empty($match[1]) ? '*' : $match[1];\n}\n\nif (preg_match('{^(dev-[^,\\s@]+?|[^,\\s@]+?\\.x-dev)#.+$}i', $constraints, $match)) {\n$constraints = $match[1];\n}\n\n$orConstraints = preg_split('{\\s*\\|\\s*}', trim($constraints));\n$orGroups = array();\nforeach ($orConstraints as $constraints) {\n$andConstraints = preg_split('{\\s*,\\s*}', $constraints);\n\nif (count($andConstraints) > 1) {\n$constraintObjects = array();\nforeach ($andConstraints as $constraint) {\n$constraintObjects = array_merge($constraintObjects, $this->parseConstraint($constraint));\n}\n} else {\n$constraintObjects = $this->parseConstraint($andConstraints[0]);\n}\n\nif (1 === count($constraintObjects)) {\n$constraint = $constraintObjects[0];\n} else {\n$constraint = new MultiConstraint($constraintObjects);\n}\n\n$orGroups[] = $constraint;\n}\n\nif (1 === count($orGroups)) {\n$constraint = $orGroups[0];\n} else {\n$constraint = new MultiConstraint($orGroups, false);\n}\n\n$constraint->setPrettyString($prettyConstraint);\n\nreturn $constraint;\n}\n\nprivate function parseConstraint($constraint)\n{\nif (preg_match('{^([^,\\s]+?)@('.implode('|', array_keys(BasePackage::$stabilities)).')$}i', $constraint, $match)) {\n$constraint = $match[1];\nif ($match[2] !== 'stable') {\n$stabilityModifier = $match[2];\n}\n}\n\nif (preg_match('{^[x*](\\.[x*])*$}i', $constraint)) {\nreturn array(new EmptyConstraint);\n}\n\nif (preg_match('{^~(\\d+)(?:\\.(\\d+))?(?:\\.(\\d+))?(?:\\.(\\d+))?'.self::$modifierRegex.'?$}i', $constraint, $matches)) {\nif (isset($matches[4]) && '' !== $matches[4]) {\n$highVersion = $matches[1] . '.' . $matches[2] . '.' . ($matches[3] + 1) . '.0-dev';\n$lowVersion = $matches[1] . '.' . $matches[2] . '.' . $matches[3]. '.' . $matches[4];\n} elseif (isset($matches[3]) && '' !== $matches[3]) {\n$highVersion = $matches[1] . '.' . ($matches[2] + 1) . '.0.0-dev';\n$lowVersion = $matches[1] . '.' . $matches[2] . '.' . $matches[3]. '.0';\n} else {\n$highVersion = ($matches[1] + 1) . '.0.0.0-dev';\nif (isset($matches[2]) && '' !== $matches[2]) {\n$lowVersion = $matches[1] . '.' . $matches[2] . '.0.0';\n} else {\n$lowVersion = $matches[1] . '.0.0.0';\n}\n}\n\nif (!empty($matches[5])) {\n$lowVersion .= '-' . $this->expandStability($matches[5]) . (!empty($matches[6]) ? $matches[6] : '');\n}\n\nif (!empty($matches[7])) {\n$lowVersion .= '-dev';\n}\n\nreturn array(\nnew VersionConstraint('>=', $lowVersion),\nnew VersionConstraint('<', $highVersion),\n);\n}\n\n\n if (preg_match('{^(\\d+)(?:\\.(\\d+))?(?:\\.(\\d+))?\\.[x*]$}', $constraint, $matches)) {\nif (isset($matches[3])) {\n$highVersion = $matches[1] . '.' . $matches[2] . '.' . $matches[3] . '.9999999';\nif ($matches[3] === '0') {\n$lowVersion = $matches[1] . '.' . ($matches[2] - 1) . '.9999999.9999999';\n} else {\n$lowVersion = $matches[1] . '.' . $matches[2] . '.' . ($matches[3] - 1). '.9999999';\n}\n} elseif (isset($matches[2])) {\n$highVersion = $matches[1] . '.' . $matches[2] . '.9999999.9999999';\nif ($matches[2] === '0') {\n$lowVersion = ($matches[1] - 1) . '.9999999.9999999.9999999';\n} else {\n$lowVersion = $matches[1] . '.' . ($matches[2] - 1) . '.9999999.9999999';\n}\n} else {\n$highVersion = $matches[1] . '.9999999.9999999.9999999';\nif ($matches[1] === '0') {\nreturn array(new VersionConstraint('<', $highVersion));\n} else {\n$lowVersion = ($matches[1] - 1) . '.9999999.9999999.9999999';\n}\n}\n\nreturn array(\nnew VersionConstraint('>', $lowVersion),\nnew VersionConstraint('<', $highVersion),\n);\n}\n\n\n if (preg_match('{^(<>|!=|>=?|<=?|==?)?\\s*(.*)}', $constraint, $matches)) {\ntry {\n$version = $this->normalize($matches[2]);\n\nif (!empty($stabilityModifier) && $this->parseStability($version) === 'stable') {\n$version .= '-' . $stabilityModifier;\n} elseif ('<' === $matches[1]) {\nif (!preg_match('/-stable$/', strtolower($matches[2]))) {\n$version .= '-dev';\n}\n}\n\nreturn array(new VersionConstraint($matches[1] ?: '=', $version));\n} catch (\\Exception $e) { }\n}\n\n$message = 'Could not parse version constraint '.$constraint;\nif (isset($e)) {\n$message .= ': '.$e->getMessage();\n}\n\nthrow new \\UnexpectedValueException($message);\n}\n\nprivate function expandStability($stability)\n{\n$stability = strtolower($stability);\n\nswitch ($stability) {\ncase 'a':\nreturn 'alpha';\ncase 'b':\nreturn 'beta';\ncase 'p':\ncase 'pl':\nreturn 'patch';\ncase 'rc':\nreturn 'RC';\ndefault:\nreturn $stability;\n}\n}\n\n\n\n\n\n\n\npublic function parseNameVersionPairs(array $pairs)\n{\n$pairs = array_values($pairs);\n$result = array();\n\nfor ($i = 0, $count = count($pairs); $i < $count; $i++) {\n$pair = preg_replace('{^([^=: ]+)[=: ](.*)$}', '$1 $2', trim($pairs[$i]));\nif (false === strpos($pair, ' ') && isset($pairs[$i+1]) && false === strpos($pairs[$i+1], '/')) {\n$pair .= ' '.$pairs[$i+1];\n$i++;\n}\n\nif (strpos($pair, ' ')) {\nlist($name, $version) = explode(\" \", $pair, 2);\n$result[] = array('name' => $name, 'version' => $version);\n} else {\n$result[] = array('name' => $pair);\n}\n}\n\nreturn $result;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Package;\n\n\n\n\n\n\ninterface CompletePackageInterface extends PackageInterface\n{\n\n\n\n\n\npublic function getScripts();\n\n\n\n\n\n\n\n\npublic function getRepositories();\n\n\n\n\n\n\npublic function getLicense();\n\n\n\n\n\n\npublic function getKeywords();\n\n\n\n\n\n\npublic function getDescription();\n\n\n\n\n\n\npublic function getHomepage();\n\n\n\n\n\n\n\n\npublic function getAuthors();\n\n\n\n\n\n\npublic function getSupport();\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Package;\n\n\n\n\n\n\ninterface RootPackageInterface extends CompletePackageInterface\n{\n\n\n\n\n\npublic function getAliases();\n\n\n\n\n\n\npublic function getMinimumStability();\n\n\n\n\n\n\n\n\npublic function getStabilityFlags();\n\n\n\n\n\n\n\n\npublic function getReferences();\n\n\n\n\n\n\npublic function getPreferStable();\n\n\n\n\n\n\npublic function setRequires(array $requires);\n\n\n\n\n\n\npublic function setDevRequires(array $devRequires);\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Package;\n\n\n\n\n\n\nclass RootPackage extends CompletePackage implements RootPackageInterface\n{\nprotected $minimumStability = 'stable';\nprotected $preferStable = false;\nprotected $stabilityFlags = array();\nprotected $references = array();\nprotected $aliases = array();\n\n\n\n\n\n\npublic function setMinimumStability($minimumStability)\n{\n$this->minimumStability = $minimumStability;\n}\n\n\n\n\npublic function getMinimumStability()\n{\nreturn $this->minimumStability;\n}\n\n\n\n\n\n\npublic function setStabilityFlags(array $stabilityFlags)\n{\n$this->stabilityFlags = $stabilityFlags;\n}\n\n\n\n\npublic function getStabilityFlags()\n{\nreturn $this->stabilityFlags;\n}\n\n\n\n\n\n\npublic function setPreferStable($preferStable)\n{\n$this->preferStable = $preferStable;\n}\n\n\n\n\npublic function getPreferStable()\n{\nreturn $this->preferStable;\n}\n\n\n\n\n\n\npublic function setReferences(array $references)\n{\n$this->references = $references;\n}\n\n\n\n\npublic function getReferences()\n{\nreturn $this->references;\n}\n\n\n\n\n\n\npublic function setAliases(array $aliases)\n{\n$this->aliases = $aliases;\n}\n\n\n\n\npublic function getAliases()\n{\nreturn $this->aliases;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Package\\Archiver;\n\n\n\n\n\n\ninterface ArchiverInterface\n{\n\n\n\n\n\n\n\n\n\n\npublic function archive($sources, $target, $format, array $excludes = array());\n\n\n\n\n\n\n\n\n\npublic function supports($format, $sourceType);\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Package\\Archiver;\n\n\n\n\n\n\nclass ComposerExcludeFilter extends BaseExcludeFilter\n{\n\n\n\n\npublic function __construct($sourcePath, array $excludeRules)\n{\nparent::__construct($sourcePath);\n$this->excludePatterns = $this->generatePatterns($excludeRules);\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Package\\Archiver;\n\n\n\n\n\n\nclass PharArchiver implements ArchiverInterface\n{\nprotected static $formats = array(\n'zip' => \\Phar::ZIP,\n'tar' => \\Phar::TAR,\n);\n\n\n\n\npublic function archive($sources, $target, $format, array $excludes = array())\n{\n$sources = realpath($sources);\n\n\n if (file_exists($target)) {\nunlink($target);\n}\n\ntry {\n$phar = new \\PharData($target, null, null, static::$formats[$format]);\n$files = new ArchivableFilesFinder($sources, $excludes);\n$phar->buildFromIterator($files, $sources);\n\nreturn $target;\n} catch (\\UnexpectedValueException $e) {\n$message = sprintf(\"Could not create archive '%s' from '%s': %s\",\n$target,\n$sources,\n$e->getMessage()\n);\n\nthrow new \\RuntimeException($message, $e->getCode(), $e);\n}\n}\n\n\n\n\npublic function supports($format, $sourceType)\n{\nreturn isset(static::$formats[$format]);\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Package\\Archiver;\n\nuse Symfony\\Component\\Finder;\n\n\n\n\nabstract class BaseExcludeFilter\n{\n\n\n\nprotected $sourcePath;\n\n\n\n\nprotected $excludePatterns;\n\n\n\n\npublic function __construct($sourcePath)\n{\n$this->sourcePath = $sourcePath;\n$this->excludePatterns = array();\n}\n\n\n\n\n\n\n\n\n\n\n\npublic function filter($relativePath, $exclude)\n{\nforeach ($this->excludePatterns as $patternData) {\nlist($pattern, $negate, $stripLeadingSlash) = $patternData;\n\nif ($stripLeadingSlash) {\n$path = substr($relativePath, 1);\n} else {\n$path = $relativePath;\n}\n\nif (preg_match($pattern, $path)) {\n$exclude = !$negate;\n}\n}\n\nreturn $exclude;\n}\n\n\n\n\n\n\n\n\n\nprotected function parseLines(array $lines, $lineParser)\n{\nreturn array_filter(\narray_map(\nfunction ($line) use ($lineParser) {\n$line = trim($line);\n\n$commentHash = strpos($line, '#');\nif ($commentHash !== false) {\n$line = substr($line, 0, $commentHash);\n}\n\nif ($line) {\nreturn call_user_func($lineParser, $line);\n}\n\nreturn null;\n}, $lines),\nfunction ($pattern) {\nreturn $pattern !== null;\n}\n);\n}\n\n\n\n\n\n\n\n\nprotected function generatePatterns($rules)\n{\n$patterns = array();\nforeach ($rules as $rule) {\n$patterns[] = $this->generatePattern($rule);\n}\n\nreturn $patterns;\n}\n\n\n\n\n\n\n\n\nprotected function generatePattern($rule)\n{\n$negate = false;\n$pattern = '#';\n\nif (strlen($rule) && $rule[0] === '!') {\n$negate = true;\n$rule = substr($rule, 1);\n}\n\nif (strlen($rule) && $rule[0] === '/') {\n$pattern .= '^/';\n$rule = substr($rule, 1);\n} elseif (false === strpos($rule, '/') || strlen($rule) - 1 === strpos($rule, '/')) {\n$pattern .= '/';\n}\n\n$pattern .= substr(Finder\\Glob::toRegex($rule), 2, -2);\n\nreturn array($pattern . '#', $negate, false);\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Package\\Archiver;\n\n\n\n\n\n\n\n\nclass GitExcludeFilter extends BaseExcludeFilter\n{\n\n\n\n\n\npublic function __construct($sourcePath)\n{\nparent::__construct($sourcePath);\n\nif (file_exists($sourcePath.'/.gitignore')) {\n$this->excludePatterns = $this->parseLines(\nfile($sourcePath.'/.gitignore'),\narray($this, 'parseGitIgnoreLine')\n);\n}\nif (file_exists($sourcePath.'/.gitattributes')) {\n$this->excludePatterns = array_merge(\n$this->excludePatterns,\n$this->parseLines(\nfile($sourcePath.'/.gitattributes'),\narray($this, 'parseGitAttributesLine')\n));\n}\n}\n\n\n\n\n\n\n\n\npublic function parseGitIgnoreLine($line)\n{\nreturn $this->generatePattern($line);\n}\n\n\n\n\n\n\n\n\npublic function parseGitAttributesLine($line)\n{\n$parts = preg_split('#\\s+#', $line);\n\nif (count($parts) != 2) {\nreturn null;\n}\n\nif ($parts[1] === 'export-ignore') {\nreturn $this->generatePattern($parts[0]);\n}\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Package\\Archiver;\n\nuse Composer\\Util\\Filesystem;\n\nuse Symfony\\Component\\Finder;\n\n\n\n\n\n\n\n\n\nclass ArchivableFilesFinder extends \\FilterIterator\n{\n\n\n\nprotected $finder;\n\n\n\n\n\n\n\npublic function __construct($sources, array $excludes)\n{\n$fs = new Filesystem();\n\n$sources = $fs->normalizePath($sources);\n\n$filters = array(\nnew HgExcludeFilter($sources),\nnew GitExcludeFilter($sources),\nnew ComposerExcludeFilter($sources, $excludes),\n);\n\n$this->finder = new Finder\\Finder();\n\n$filter = function (\\SplFileInfo $file) use ($sources, $filters, $fs) {\n$relativePath = preg_replace(\n'#^'.preg_quote($sources, '#').'#',\n'',\n$fs->normalizePath($file->getRealPath())\n);\n\n$exclude = false;\nforeach ($filters as $filter) {\n$exclude = $filter->filter($relativePath, $exclude);\n}\n\nreturn !$exclude;\n};\n\nif (method_exists($filter, 'bindTo')) {\n$filter = $filter->bindTo(null);\n}\n\n$this->finder\n->in($sources)\n->filter($filter)\n->ignoreVCS(true)\n->ignoreDotFiles(false);\n\nparent::__construct($this->finder->getIterator());\n}\n\npublic function accept()\n{\nreturn !$this->getInnerIterator()->current()->isDir();\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Package\\Archiver;\n\nuse Composer\\Downloader\\DownloadManager;\nuse Composer\\Package\\PackageInterface;\nuse Composer\\Package\\RootPackage;\nuse Composer\\Util\\Filesystem;\n\n\n\n\n\nclass ArchiveManager\n{\nprotected $downloadManager;\n\nprotected $archivers = array();\n\n\n\n\nprotected $overwriteFiles = true;\n\n\n\n\npublic function __construct(DownloadManager $downloadManager)\n{\n$this->downloadManager = $downloadManager;\n}\n\n\n\n\npublic function addArchiver(ArchiverInterface $archiver)\n{\n$this->archivers[] = $archiver;\n}\n\n\n\n\n\n\n\n\npublic function setOverwriteFiles($overwriteFiles)\n{\n$this->overwriteFiles = $overwriteFiles;\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\npublic function getPackageFilename(PackageInterface $package)\n{\n$nameParts = array(preg_replace('#[^a-z0-9-_.]#i', '-', $package->getName()));\n\nif (preg_match('{^[a-f0-9]{40}$}', $package->getDistReference())) {\n$nameParts = array_merge($nameParts, array($package->getDistReference(), $package->getDistType()));\n} else {\n$nameParts = array_merge($nameParts, array($package->getPrettyVersion(), $package->getDistReference()));\n}\n\nif ($package->getSourceReference()) {\n$nameParts[] = substr(sha1($package->getSourceReference()), 0, 6);\n}\n\nreturn implode('-', array_filter($nameParts, function ($p) {\nreturn !empty($p);\n}));\n}\n\n\n\n\n\n\n\n\n\n\n\npublic function archive(PackageInterface $package, $format, $targetDir)\n{\nif (empty($format)) {\nthrow new \\InvalidArgumentException('Format must be specified');\n}\n\n\n $usableArchiver = null;\nforeach ($this->archivers as $archiver) {\nif ($archiver->supports($format, $package->getSourceType())) {\n$usableArchiver = $archiver;\nbreak;\n}\n}\n\n\n if (null === $usableArchiver) {\nthrow new \\RuntimeException(sprintf('No archiver found to support %s format', $format));\n}\n\n$filesystem = new Filesystem();\n$packageName = $this->getPackageFilename($package);\n\n\n $filesystem->ensureDirectoryExists($targetDir);\n$target = realpath($targetDir).'/'.$packageName.'.'.$format;\n$filesystem->ensureDirectoryExists(dirname($target));\n\nif (!$this->overwriteFiles && file_exists($target)) {\nreturn $target;\n}\n\nif ($package instanceof RootPackage) {\n$sourcePath = realpath('.');\n} else {\n\n $sourcePath = sys_get_temp_dir().'/composer_archiver/'.$packageName;\n$filesystem->ensureDirectoryExists($sourcePath);\n\n\n $this->downloadManager->download($package, $sourcePath, true);\n}\n\n\n return $usableArchiver->archive($sourcePath, $target, $format, $package->getArchiveExcludes());\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Package\\Archiver;\n\nuse Symfony\\Component\\Finder;\n\n\n\n\n\n\nclass HgExcludeFilter extends BaseExcludeFilter\n{\nconst HG_IGNORE_REGEX = 1;\nconst HG_IGNORE_GLOB = 2;\n\n\n\n\n\nprotected $patternMode;\n\n\n\n\n\n\npublic function __construct($sourcePath)\n{\nparent::__construct($sourcePath);\n\n$this->patternMode = self::HG_IGNORE_REGEX;\n\nif (file_exists($sourcePath.'/.hgignore')) {\n$this->excludePatterns = $this->parseLines(\nfile($sourcePath.'/.hgignore'),\narray($this, 'parseHgIgnoreLine')\n);\n}\n}\n\n\n\n\n\n\n\n\npublic function parseHgIgnoreLine($line)\n{\nif (preg_match('#^syntax\\s*:\\s*(glob|regexp)$#', $line, $matches)) {\nif ($matches[1] === 'glob') {\n$this->patternMode = self::HG_IGNORE_GLOB;\n} else {\n$this->patternMode = self::HG_IGNORE_REGEX;\n}\n\nreturn null;\n}\n\nif ($this->patternMode == self::HG_IGNORE_GLOB) {\nreturn $this->patternFromGlob($line);\n} else {\nreturn $this->patternFromRegex($line);\n}\n}\n\n\n\n\n\n\n\n\nprotected function patternFromGlob($line)\n{\n$pattern = '#'.substr(Finder\\Glob::toRegex($line), 2, -1).'#';\n$pattern = str_replace('[^/]*', '.*', $pattern);\n\nreturn array($pattern, false, true);\n}\n\n\n\n\n\n\n\n\npublic function patternFromRegex($line)\n{\n\n $pattern = '#'.preg_replace('/((?:\\\\\\\\\\\\\\\\)*)(\\\\\\\\?)#/', '\\1\\2\\2\\\\#', $line).'#';\n\nreturn array($pattern, false, true);\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Package;\n\n\n\n\nclass RootAliasPackage extends AliasPackage implements RootPackageInterface\n{\npublic function __construct(RootPackageInterface $aliasOf, $version, $prettyVersion)\n{\nparent::__construct($aliasOf, $version, $prettyVersion);\n}\n\n\n\n\npublic function getAliases()\n{\nreturn $this->aliasOf->getAliases();\n}\n\n\n\n\npublic function getMinimumStability()\n{\nreturn $this->aliasOf->getMinimumStability();\n}\n\n\n\n\npublic function getStabilityFlags()\n{\nreturn $this->aliasOf->getStabilityFlags();\n}\n\n\n\n\npublic function getReferences()\n{\nreturn $this->aliasOf->getReferences();\n}\n\n\n\n\npublic function getPreferStable()\n{\nreturn $this->aliasOf->getPreferStable();\n}\n\n\n\n\npublic function setRequires(array $require)\n{\nreturn $this->aliasOf->setRequires($require);\n}\n\n\n\n\npublic function setDevRequires(array $devRequire)\n{\nreturn $this->aliasOf->setDevRequires($devRequire);\n}\n\npublic function __clone()\n{\nparent::__clone();\n$this->aliasOf = clone $this->aliasOf;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Package;\n\nuse Composer\\Package\\Version\\VersionParser;\n\n\n\n\n\n\nclass Package extends BasePackage\n{\nprotected $type;\nprotected $targetDir;\nprotected $installationSource;\nprotected $sourceType;\nprotected $sourceUrl;\nprotected $sourceReference;\nprotected $distType;\nprotected $distUrl;\nprotected $distReference;\nprotected $distSha1Checksum;\nprotected $version;\nprotected $prettyVersion;\nprotected $releaseDate;\nprotected $extra = array();\nprotected $binaries = array();\nprotected $dev;\nprotected $stability;\nprotected $notificationUrl;\n\nprotected $requires = array();\nprotected $conflicts = array();\nprotected $provides = array();\nprotected $replaces = array();\nprotected $devRequires = array();\nprotected $suggests = array();\nprotected $autoload = array();\nprotected $includePaths = array();\nprotected $archiveExcludes = array();\n\n\n\n\n\n\n\n\npublic function __construct($name, $version, $prettyVersion)\n{\nparent::__construct($name);\n\n$this->version = $version;\n$this->prettyVersion = $prettyVersion;\n\n$this->stability = VersionParser::parseStability($version);\n$this->dev = $this->stability === 'dev';\n}\n\n\n\n\npublic function isDev()\n{\nreturn $this->dev;\n}\n\n\n\n\npublic function setType($type)\n{\n$this->type = $type;\n}\n\n\n\n\npublic function getType()\n{\nreturn $this->type ?: 'library';\n}\n\n\n\n\npublic function getStability()\n{\nreturn $this->stability;\n}\n\n\n\n\npublic function setTargetDir($targetDir)\n{\n$this->targetDir = $targetDir;\n}\n\n\n\n\npublic function getTargetDir()\n{\nif (null === $this->targetDir) {\nreturn;\n}\n\nreturn ltrim(preg_replace('{ (?:^|[\\\\\\\\/]+) \\.\\.? (?:[\\\\\\\\/]+|$) (?:\\.\\.? (?:[\\\\\\\\/]+|$) )*}x', '/', $this->targetDir), '/');\n}\n\n\n\n\npublic function setExtra(array $extra)\n{\n$this->extra = $extra;\n}\n\n\n\n\npublic function getExtra()\n{\nreturn $this->extra;\n}\n\n\n\n\npublic function setBinaries(array $binaries)\n{\n$this->binaries = $binaries;\n}\n\n\n\n\npublic function getBinaries()\n{\nreturn $this->binaries;\n}\n\n\n\n\npublic function setInstallationSource($type)\n{\n$this->installationSource = $type;\n}\n\n\n\n\npublic function getInstallationSource()\n{\nreturn $this->installationSource;\n}\n\n\n\n\npublic function setSourceType($type)\n{\n$this->sourceType = $type;\n}\n\n\n\n\npublic function getSourceType()\n{\nreturn $this->sourceType;\n}\n\n\n\n\npublic function setSourceUrl($url)\n{\n$this->sourceUrl = $url;\n}\n\n\n\n\npublic function getSourceUrl()\n{\nreturn $this->sourceUrl;\n}\n\n\n\n\npublic function setSourceReference($reference)\n{\n$this->sourceReference = $reference;\n}\n\n\n\n\npublic function getSourceReference()\n{\nreturn $this->sourceReference;\n}\n\n\n\n\npublic function setDistType($type)\n{\n$this->distType = $type;\n}\n\n\n\n\npublic function getDistType()\n{\nreturn $this->distType;\n}\n\n\n\n\npublic function setDistUrl($url)\n{\n$this->distUrl = $url;\n}\n\n\n\n\npublic function getDistUrl()\n{\nreturn $this->distUrl;\n}\n\n\n\n\npublic function setDistReference($reference)\n{\n$this->distReference = $reference;\n}\n\n\n\n\npublic function getDistReference()\n{\nreturn $this->distReference;\n}\n\n\n\n\npublic function setDistSha1Checksum($sha1checksum)\n{\n$this->distSha1Checksum = $sha1checksum;\n}\n\n\n\n\npublic function getDistSha1Checksum()\n{\nreturn $this->distSha1Checksum;\n}\n\n\n\n\npublic function getVersion()\n{\nreturn $this->version;\n}\n\n\n\n\npublic function getPrettyVersion()\n{\nreturn $this->prettyVersion;\n}\n\n\n\n\n\n\npublic function setReleaseDate(\\DateTime $releaseDate)\n{\n$this->releaseDate = $releaseDate;\n}\n\n\n\n\npublic function getReleaseDate()\n{\nreturn $this->releaseDate;\n}\n\n\n\n\n\n\npublic function setRequires(array $requires)\n{\n$this->requires = $requires;\n}\n\n\n\n\npublic function getRequires()\n{\nreturn $this->requires;\n}\n\n\n\n\n\n\npublic function setConflicts(array $conflicts)\n{\n$this->conflicts = $conflicts;\n}\n\n\n\n\npublic function getConflicts()\n{\nreturn $this->conflicts;\n}\n\n\n\n\n\n\npublic function setProvides(array $provides)\n{\n$this->provides = $provides;\n}\n\n\n\n\npublic function getProvides()\n{\nreturn $this->provides;\n}\n\n\n\n\n\n\npublic function setReplaces(array $replaces)\n{\n$this->replaces = $replaces;\n}\n\n\n\n\npublic function getReplaces()\n{\nreturn $this->replaces;\n}\n\n\n\n\n\n\npublic function setDevRequires(array $devRequires)\n{\n$this->devRequires = $devRequires;\n}\n\n\n\n\npublic function getDevRequires()\n{\nreturn $this->devRequires;\n}\n\n\n\n\n\n\npublic function setSuggests(array $suggests)\n{\n$this->suggests = $suggests;\n}\n\n\n\n\npublic function getSuggests()\n{\nreturn $this->suggests;\n}\n\n\n\n\n\n\npublic function setAutoload(array $autoload)\n{\n$this->autoload = $autoload;\n}\n\n\n\n\npublic function getAutoload()\n{\nreturn $this->autoload;\n}\n\n\n\n\n\n\npublic function setIncludePaths(array $includePaths)\n{\n$this->includePaths = $includePaths;\n}\n\n\n\n\npublic function getIncludePaths()\n{\nreturn $this->includePaths;\n}\n\n\n\n\n\n\npublic function setNotificationUrl($notificationUrl)\n{\n$this->notificationUrl = $notificationUrl;\n}\n\n\n\n\npublic function getNotificationUrl()\n{\nreturn $this->notificationUrl;\n}\n\n\n\n\n\n\npublic function setArchiveExcludes(array $excludes)\n{\n$this->archiveExcludes = $excludes;\n}\n\n\n\n\npublic function getArchiveExcludes()\n{\nreturn $this->archiveExcludes;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Package;\n\nuse Composer\\Package\\LinkConstraint\\VersionConstraint;\nuse Composer\\Package\\Version\\VersionParser;\n\n\n\n\nclass AliasPackage extends BasePackage implements CompletePackageInterface\n{\nprotected $version;\nprotected $prettyVersion;\nprotected $dev;\nprotected $aliasOf;\nprotected $rootPackageAlias = false;\nprotected $stability;\n\nprotected $requires;\nprotected $conflicts;\nprotected $provides;\nprotected $replaces;\nprotected $recommends;\nprotected $suggests;\n\n\n\n\n\n\n\n\npublic function __construct(PackageInterface $aliasOf, $version, $prettyVersion)\n{\nparent::__construct($aliasOf->getName());\n\n$this->version = $version;\n$this->prettyVersion = $prettyVersion;\n$this->aliasOf = $aliasOf;\n$this->stability = VersionParser::parseStability($version);\n$this->dev = $this->stability === 'dev';\n\n\n foreach (array('requires', 'devRequires') as $type) {\n$links = $aliasOf->{'get'.ucfirst($type)}();\nforeach ($links as $index => $link) {\n\n if ('self.version' === $link->getPrettyConstraint()) {\n$links[$index] = new Link($link->getSource(), $link->getTarget(), new VersionConstraint('=', $this->version), $type, $prettyVersion);\n}\n}\n$this->$type = $links;\n}\n\n\n foreach (array('conflicts', 'provides', 'replaces') as $type) {\n$links = $aliasOf->{'get'.ucfirst($type)}();\n$newLinks = array();\nforeach ($links as $link) {\n\n if ('self.version' === $link->getPrettyConstraint()) {\n$newLinks[] = new Link($link->getSource(), $link->getTarget(), new VersionConstraint('=', $this->version), $type, $prettyVersion);\n}\n}\n$this->$type = array_merge($links, $newLinks);\n}\n}\n\npublic function getAliasOf()\n{\nreturn $this->aliasOf;\n}\n\n\n\n\npublic function getVersion()\n{\nreturn $this->version;\n}\n\n\n\n\npublic function getStability()\n{\nreturn $this->stability;\n}\n\n\n\n\npublic function getPrettyVersion()\n{\nreturn $this->prettyVersion;\n}\n\n\n\n\npublic function isDev()\n{\nreturn $this->dev;\n}\n\n\n\n\npublic function getRequires()\n{\nreturn $this->requires;\n}\n\n\n\n\npublic function getConflicts()\n{\nreturn $this->conflicts;\n}\n\n\n\n\npublic function getProvides()\n{\nreturn $this->provides;\n}\n\n\n\n\npublic function getReplaces()\n{\nreturn $this->replaces;\n}\n\n\n\n\npublic function getDevRequires()\n{\nreturn $this->devRequires;\n}\n\n\n\n\n\n\n\n\n\n\npublic function setRootPackageAlias($value)\n{\nreturn $this->rootPackageAlias = $value;\n}\n\n\n\n\n\npublic function isRootPackageAlias()\n{\nreturn $this->rootPackageAlias;\n}\n\n\n\n\n\npublic function getType()\n{\nreturn $this->aliasOf->getType();\n}\npublic function getTargetDir()\n{\nreturn $this->aliasOf->getTargetDir();\n}\npublic function getExtra()\n{\nreturn $this->aliasOf->getExtra();\n}\npublic function setInstallationSource($type)\n{\n$this->aliasOf->setInstallationSource($type);\n}\npublic function getInstallationSource()\n{\nreturn $this->aliasOf->getInstallationSource();\n}\npublic function getSourceType()\n{\nreturn $this->aliasOf->getSourceType();\n}\npublic function getSourceUrl()\n{\nreturn $this->aliasOf->getSourceUrl();\n}\npublic function getSourceReference()\n{\nreturn $this->aliasOf->getSourceReference();\n}\npublic function setSourceReference($reference)\n{\nreturn $this->aliasOf->setSourceReference($reference);\n}\npublic function getDistType()\n{\nreturn $this->aliasOf->getDistType();\n}\npublic function getDistUrl()\n{\nreturn $this->aliasOf->getDistUrl();\n}\npublic function getDistReference()\n{\nreturn $this->aliasOf->getDistReference();\n}\npublic function getDistSha1Checksum()\n{\nreturn $this->aliasOf->getDistSha1Checksum();\n}\npublic function getScripts()\n{\nreturn $this->aliasOf->getScripts();\n}\npublic function getLicense()\n{\nreturn $this->aliasOf->getLicense();\n}\npublic function getAutoload()\n{\nreturn $this->aliasOf->getAutoload();\n}\npublic function getIncludePaths()\n{\nreturn $this->aliasOf->getIncludePaths();\n}\npublic function getRepositories()\n{\nreturn $this->aliasOf->getRepositories();\n}\npublic function getReleaseDate()\n{\nreturn $this->aliasOf->getReleaseDate();\n}\npublic function getBinaries()\n{\nreturn $this->aliasOf->getBinaries();\n}\npublic function getKeywords()\n{\nreturn $this->aliasOf->getKeywords();\n}\npublic function getDescription()\n{\nreturn $this->aliasOf->getDescription();\n}\npublic function getHomepage()\n{\nreturn $this->aliasOf->getHomepage();\n}\npublic function getSuggests()\n{\nreturn $this->aliasOf->getSuggests();\n}\npublic function getAuthors()\n{\nreturn $this->aliasOf->getAuthors();\n}\npublic function getSupport()\n{\nreturn $this->aliasOf->getSupport();\n}\npublic function getNotificationUrl()\n{\nreturn $this->aliasOf->getNotificationUrl();\n}\npublic function getArchiveExcludes()\n{\nreturn $this->aliasOf->getArchiveExcludes();\n}\npublic function __toString()\n{\nreturn parent::__toString().' (alias of '.$this->aliasOf->getVersion().')';\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Package;\n\nuse Composer\\Package\\LinkConstraint\\LinkConstraintInterface;\nuse Composer\\Package\\PackageInterface;\n\n\n\n\n\n\nclass Link\n{\nprotected $source;\nprotected $target;\nprotected $constraint;\nprotected $description;\nprotected $prettyConstraint;\n\n\n\n\n\n\n\n\n\n\npublic function __construct($source, $target, LinkConstraintInterface $constraint = null, $description = 'relates to', $prettyConstraint = null)\n{\n$this->source = strtolower($source);\n$this->target = strtolower($target);\n$this->constraint = $constraint;\n$this->description = $description;\n$this->prettyConstraint = $prettyConstraint;\n}\n\npublic function getSource()\n{\nreturn $this->source;\n}\n\npublic function getTarget()\n{\nreturn $this->target;\n}\n\npublic function getConstraint()\n{\nreturn $this->constraint;\n}\n\npublic function getPrettyConstraint()\n{\nif (null === $this->prettyConstraint) {\nthrow new \\UnexpectedValueException(sprintf('Link %s has been misconfigured and had no prettyConstraint given.', $this));\n}\n\nreturn $this->prettyConstraint;\n}\n\npublic function __toString()\n{\nreturn $this->source.' '.$this->description.' '.$this->target.' ('.$this->constraint.')';\n}\n\npublic function getPrettyString(PackageInterface $sourcePackage)\n{\nreturn $sourcePackage->getPrettyString().' '.$this->description.' '.$this->target.' '.$this->constraint->getPrettyString().'';\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Package\\LinkConstraint;\n\n\n\n\n\n\nclass EmptyConstraint implements LinkConstraintInterface\n{\nprotected $prettyString;\n\npublic function matches(LinkConstraintInterface $provider)\n{\nreturn true;\n}\n\npublic function setPrettyString($prettyString)\n{\n$this->prettyString = $prettyString;\n}\n\npublic function getPrettyString()\n{\nif ($this->prettyString) {\nreturn $this->prettyString;\n}\n\nreturn $this->__toString();\n}\n\npublic function __toString()\n{\nreturn '[]';\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Package\\LinkConstraint;\n\n\n\n\n\n\n\nclass MultiConstraint implements LinkConstraintInterface\n{\nprotected $constraints;\nprotected $prettyString;\nprotected $conjunctive;\n\n\n\n\n\n\n\npublic function __construct(array $constraints, $conjunctive = true)\n{\n$this->constraints = $constraints;\n$this->conjunctive = $conjunctive;\n}\n\npublic function matches(LinkConstraintInterface $provider)\n{\nif (false === $this->conjunctive) {\nforeach ($this->constraints as $constraint) {\nif ($constraint->matches($provider)) {\nreturn true;\n}\n}\n\nreturn false;\n}\n\nforeach ($this->constraints as $constraint) {\nif (!$constraint->matches($provider)) {\nreturn false;\n}\n}\n\nreturn true;\n}\n\npublic function setPrettyString($prettyString)\n{\n$this->prettyString = $prettyString;\n}\n\npublic function getPrettyString()\n{\nif ($this->prettyString) {\nreturn $this->prettyString;\n}\n\nreturn $this->__toString();\n}\n\npublic function __toString()\n{\n$constraints = array();\nforeach ($this->constraints as $constraint) {\n$constraints[] = $constraint->__toString();\n}\n\nreturn '['.implode($this->conjunctive ? ', ' : ' | ', $constraints).']';\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Package\\LinkConstraint;\n\n\n\n\n\n\n\n\nclass VersionConstraint extends SpecificConstraint\n{\nprivate $operator;\nprivate $version;\n\n\n\n\n\n\n\npublic function __construct($operator, $version)\n{\nif ('=' === $operator) {\n$operator = '==';\n}\n\nif ('<>' === $operator) {\n$operator = '!=';\n}\n\n$this->operator = $operator;\n$this->version = $version;\n}\n\npublic function versionCompare($a, $b, $operator, $compareBranches = false)\n{\n$aIsBranch = 'dev-' === substr($a, 0, 4);\n$bIsBranch = 'dev-' === substr($b, 0, 4);\nif ($aIsBranch && $bIsBranch) {\nreturn $operator == '==' && $a === $b;\n}\n\n\n if (!$compareBranches && ($aIsBranch || $bIsBranch)) {\nreturn false;\n}\n\nreturn version_compare($a, $b, $operator);\n}\n\n\n\n\n\n\npublic function matchSpecific(VersionConstraint $provider, $compareBranches = false)\n{\n$noEqualOp = str_replace('=', '', $this->operator);\n$providerNoEqualOp = str_replace('=', '', $provider->operator);\n\n$isEqualOp = '==' === $this->operator;\n$isNonEqualOp = '!=' === $this->operator;\n$isProviderEqualOp = '==' === $provider->operator;\n$isProviderNonEqualOp = '!=' === $provider->operator;\n\n\n \n if ($isNonEqualOp || $isProviderNonEqualOp) {\nreturn !$isEqualOp && !$isProviderEqualOp\n|| $this->versionCompare($provider->version, $this->version, '!=', $compareBranches);\n}\n\n\n \n if ($this->operator != '==' && $noEqualOp == $providerNoEqualOp) {\nreturn true;\n}\n\nif ($this->versionCompare($provider->version, $this->version, $this->operator, $compareBranches)) {\n\n \n if ($provider->version == $this->version && $provider->operator == $providerNoEqualOp && $this->operator != $noEqualOp) {\nreturn false;\n}\n\nreturn true;\n}\n\nreturn false;\n}\n\npublic function __toString()\n{\nreturn $this->operator.' '.$this->version;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Package\\LinkConstraint;\n\n\n\n\n\n\nabstract class SpecificConstraint implements LinkConstraintInterface\n{\nprotected $prettyString;\n\npublic function matches(LinkConstraintInterface $provider)\n{\nif ($provider instanceof MultiConstraint) {\n\n return $provider->matches($this);\n} elseif ($provider instanceof $this) {\nreturn $this->matchSpecific($provider);\n}\n\nreturn true;\n}\n\npublic function setPrettyString($prettyString)\n{\n$this->prettyString = $prettyString;\n}\n\npublic function getPrettyString()\n{\nif ($this->prettyString) {\nreturn $this->prettyString;\n}\n\nreturn $this->__toString();\n}\n\n\n \n \n\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Package\\LinkConstraint;\n\n\n\n\n\n\ninterface LinkConstraintInterface\n{\npublic function matches(LinkConstraintInterface $provider);\npublic function setPrettyString($prettyString);\npublic function getPrettyString();\npublic function __toString();\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer;\n\nuse Composer\\IO\\IOInterface;\nuse Composer\\Util\\Filesystem;\nuse Symfony\\Component\\Finder\\Finder;\n\n\n\n\n\n\nclass Cache\n{\nprivate $io;\nprivate $root;\nprivate $enabled = true;\nprivate $whitelist;\nprivate $filesystem;\n\n\n\n\n\n\n\npublic function __construct(IOInterface $io, $cacheDir, $whitelist = 'a-z0-9.', Filesystem $filesystem = null)\n{\n$this->io = $io;\n$this->root = rtrim($cacheDir, '/\\\\') . '/';\n$this->whitelist = $whitelist;\n$this->filesystem = $filesystem ?: new Filesystem();\n\nif (!is_dir($this->root)) {\nif (!@mkdir($this->root, 0777, true)) {\n$this->enabled = false;\n}\n}\n}\n\npublic function isEnabled()\n{\nreturn $this->enabled;\n}\n\npublic function getRoot()\n{\nreturn $this->root;\n}\n\npublic function read($file)\n{\n$file = preg_replace('{[^'.$this->whitelist.']}i', '-', $file);\nif ($this->enabled && file_exists($this->root . $file)) {\nif ($this->io->isDebug()) {\n$this->io->write('Reading '.$this->root . $file.' from cache');\n}\n\nreturn file_get_contents($this->root . $file);\n}\n\nreturn false;\n}\n\npublic function write($file, $contents)\n{\nif ($this->enabled) {\n$file = preg_replace('{[^'.$this->whitelist.']}i', '-', $file);\n\nif ($this->io->isDebug()) {\n$this->io->write('Writing '.$this->root . $file.' into cache');\n}\n\nreturn file_put_contents($this->root . $file, $contents);\n}\n\nreturn false;\n}\n\n\n\n\npublic function copyFrom($file, $source)\n{\nif ($this->enabled) {\n$file = preg_replace('{[^'.$this->whitelist.']}i', '-', $file);\n$this->filesystem->ensureDirectoryExists(dirname($this->root . $file));\n\nif ($this->io->isDebug()) {\n$this->io->write('Writing '.$this->root . $file.' into cache');\n}\n\nreturn copy($source, $this->root . $file);\n}\n\nreturn false;\n}\n\n\n\n\npublic function copyTo($file, $target)\n{\n$file = preg_replace('{[^'.$this->whitelist.']}i', '-', $file);\nif ($this->enabled && file_exists($this->root . $file)) {\ntouch($this->root . $file);\n\nif ($this->io->isDebug()) {\n$this->io->write('Reading '.$this->root . $file.' from cache');\n}\n\nreturn copy($this->root . $file, $target);\n}\n\nreturn false;\n}\n\npublic function remove($file)\n{\n$file = preg_replace('{[^'.$this->whitelist.']}i', '-', $file);\nif ($this->enabled && file_exists($this->root . $file)) {\nreturn unlink($this->root . $file);\n}\n\nreturn false;\n}\n\npublic function gc($ttl, $maxSize)\n{\n$expire = new \\DateTime();\n$expire->modify('-'.$ttl.' seconds');\n\n$finder = $this->getFinder()->date('until '.$expire->format('Y-m-d H:i:s'));\nforeach ($finder as $file) {\nunlink($file->getRealPath());\n}\n\n$totalSize = $this->filesystem->size($this->root);\nif ($totalSize > $maxSize) {\n$iterator = $this->getFinder()->sortByAccessedTime()->getIterator();\nwhile ($totalSize > $maxSize && $iterator->valid()) {\n$filepath = $iterator->current()->getRealPath();\n$totalSize -= $this->filesystem->size($filepath);\nunlink($filepath);\n$iterator->next();\n}\n}\n\nreturn true;\n}\n\npublic function sha1($file)\n{\n$file = preg_replace('{[^'.$this->whitelist.']}i', '-', $file);\nif ($this->enabled && file_exists($this->root . $file)) {\nreturn sha1_file($this->root . $file);\n}\n\nreturn false;\n}\n\npublic function sha256($file)\n{\n$file = preg_replace('{[^'.$this->whitelist.']}i', '-', $file);\nif ($this->enabled && file_exists($this->root . $file)) {\nreturn hash_file('sha256', $this->root . $file);\n}\n\nreturn false;\n}\n\nprotected function getFinder()\n{\nreturn Finder::create()->in($this->root)->files();\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\DependencyResolver;\n\nuse Composer\\Package\\PackageInterface;\n\n\n\n\ninterface PolicyInterface\n{\npublic function versionCompare(PackageInterface $a, PackageInterface $b, $operator);\npublic function findUpdatePackages(Pool $pool, array $installedMap, PackageInterface $package);\npublic function selectPreferedPackages(Pool $pool, array $installedMap, array $literals);\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\DependencyResolver;\n\n\n\n\nclass RuleSet implements \\IteratorAggregate, \\Countable\n{\n\n const TYPE_PACKAGE = 0;\nconst TYPE_JOB = 1;\nconst TYPE_LEARNED = 4;\n\nprotected static $types = array(\n-1 => 'UNKNOWN',\nself::TYPE_PACKAGE => 'PACKAGE',\nself::TYPE_JOB => 'JOB',\nself::TYPE_LEARNED => 'LEARNED',\n);\n\nprotected $rules;\nprotected $ruleById;\nprotected $nextRuleId;\n\nprotected $rulesByHash;\n\npublic function __construct()\n{\n$this->nextRuleId = 0;\n\nforeach ($this->getTypes() as $type) {\n$this->rules[$type] = array();\n}\n\n$this->rulesByHash = array();\n}\n\npublic function add(Rule $rule, $type)\n{\nif (!isset(self::$types[$type])) {\nthrow new \\OutOfBoundsException('Unknown rule type: ' . $type);\n}\n\nif (!isset($this->rules[$type])) {\n$this->rules[$type] = array();\n}\n\n$this->rules[$type][] = $rule;\n$this->ruleById[$this->nextRuleId] = $rule;\n$rule->setType($type);\n\n$rule->setId($this->nextRuleId);\n$this->nextRuleId++;\n\n$hash = $rule->getHash();\nif (!isset($this->rulesByHash[$hash])) {\n$this->rulesByHash[$hash] = array($rule);\n} else {\n$this->rulesByHash[$hash][] = $rule;\n}\n}\n\npublic function count()\n{\nreturn $this->nextRuleId;\n}\n\npublic function ruleById($id)\n{\nreturn $this->ruleById[$id];\n}\n\npublic function getRules()\n{\nreturn $this->rules;\n}\n\npublic function getIterator()\n{\nreturn new RuleSetIterator($this->getRules());\n}\n\npublic function getIteratorFor($types)\n{\nif (!is_array($types)) {\n$types = array($types);\n}\n\n$allRules = $this->getRules();\n$rules = array();\n\nforeach ($types as $type) {\n$rules[$type] = $allRules[$type];\n}\n\nreturn new RuleSetIterator($rules);\n}\n\npublic function getIteratorWithout($types)\n{\nif (!is_array($types)) {\n$types = array($types);\n}\n\n$rules = $this->getRules();\n\nforeach ($types as $type) {\nunset($rules[$type]);\n}\n\nreturn new RuleSetIterator($rules);\n}\n\npublic function getTypes()\n{\n$types = self::$types;\nunset($types[-1]);\n\nreturn array_keys($types);\n}\n\npublic function containsEqual($rule)\n{\nif (isset($this->rulesByHash[$rule->getHash()])) {\n$potentialDuplicates = $this->rulesByHash[$rule->getHash()];\nforeach ($potentialDuplicates as $potentialDuplicate) {\nif ($rule->equals($potentialDuplicate)) {\nreturn true;\n}\n}\n}\n\nreturn false;\n}\n\npublic function __toString()\n{\n$string = \"\\n\";\nforeach ($this->rules as $type => $rules) {\n$string .= str_pad(self::$types[$type], 8, ' ') . \": \";\nforeach ($rules as $rule) {\n$string .= $rule.\"\\n\";\n}\n$string .= \"\\n\\n\";\n}\n\nreturn $string;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\DependencyResolver;\n\n\n\n\nclass SolverBugException extends \\RuntimeException\n{\npublic function __construct($message)\n{\nparent::__construct(\n$message.\"\\nThis exception was most likely caused by a bug in Composer.\\n\".\n\"Please report the command you ran, the exact error you received, and your composer.json on https://github.com/composer/composer/issues - thank you!\\n\");\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\DependencyResolver;\n\nuse Composer\\Package\\PackageInterface;\nuse Composer\\Package\\AliasPackage;\nuse Composer\\Package\\BasePackage;\nuse Composer\\Package\\LinkConstraint\\VersionConstraint;\n\n\n\n\n\nclass DefaultPolicy implements PolicyInterface\n{\nprivate $preferStable;\n\npublic function __construct($preferStable = false)\n{\n$this->preferStable = $preferStable;\n}\n\npublic function versionCompare(PackageInterface $a, PackageInterface $b, $operator)\n{\nif ($this->preferStable && ($stabA = $a->getStability()) !== ($stabB = $b->getStability())) {\nreturn BasePackage::$stabilities[$stabA] < BasePackage::$stabilities[$stabB];\n}\n\n$constraint = new VersionConstraint($operator, $b->getVersion());\n$version = new VersionConstraint('==', $a->getVersion());\n\nreturn $constraint->matchSpecific($version, true);\n}\n\npublic function findUpdatePackages(Pool $pool, array $installedMap, PackageInterface $package)\n{\n$packages = array();\n\nforeach ($pool->whatProvides($package->getName()) as $candidate) {\nif ($candidate !== $package) {\n$packages[] = $candidate;\n}\n}\n\nreturn $packages;\n}\n\npublic function getPriority(Pool $pool, PackageInterface $package)\n{\nreturn $pool->getPriority($package->getRepository());\n}\n\npublic function selectPreferedPackages(Pool $pool, array $installedMap, array $literals, $requiredPackage = null)\n{\n$packages = $this->groupLiteralsByNamePreferInstalled($pool, $installedMap, $literals);\n\nforeach ($packages as &$literals) {\n$policy = $this;\nusort($literals, function ($a, $b) use ($policy, $pool, $installedMap, $requiredPackage) {\nreturn $policy->compareByPriorityPreferInstalled($pool, $installedMap, $pool->literalToPackage($a), $pool->literalToPackage($b), $requiredPackage, true);\n});\n}\n\nforeach ($packages as &$literals) {\n$literals = $this->pruneToBestVersion($pool, $literals);\n\n$literals = $this->pruneToHighestPriorityOrInstalled($pool, $installedMap, $literals);\n\n$literals = $this->pruneRemoteAliases($pool, $literals);\n}\n\n$selected = call_user_func_array('array_merge', $packages);\n\n\n usort($selected, function ($a, $b) use ($policy, $pool, $installedMap, $requiredPackage) {\nreturn $policy->compareByPriorityPreferInstalled($pool, $installedMap, $pool->literalToPackage($a), $pool->literalToPackage($b), $requiredPackage);\n});\n\nreturn $selected;\n}\n\nprotected function groupLiteralsByNamePreferInstalled(Pool $pool, array $installedMap, $literals)\n{\n$packages = array();\nforeach ($literals as $literal) {\n$packageName = $pool->literalToPackage($literal)->getName();\n\nif (!isset($packages[$packageName])) {\n$packages[$packageName] = array();\n}\n\nif (isset($installedMap[abs($literal)])) {\narray_unshift($packages[$packageName], $literal);\n} else {\n$packages[$packageName][] = $literal;\n}\n}\n\nreturn $packages;\n}\n\n\n\n\npublic function compareByPriorityPreferInstalled(Pool $pool, array $installedMap, PackageInterface $a, PackageInterface $b, $requiredPackage = null, $ignoreReplace = false)\n{\nif ($a->getRepository() === $b->getRepository()) {\n\n if ($a->getName() === $b->getName()) {\n$aAliased = $a instanceof AliasPackage;\n$bAliased = $b instanceof AliasPackage;\nif ($aAliased && !$bAliased) {\nreturn -1; \n }\nif (!$aAliased && $bAliased) {\nreturn 1; \n }\n}\n\nif (!$ignoreReplace) {\n\n if ($this->replaces($a, $b)) {\nreturn 1; \n }\nif ($this->replaces($b, $a)) {\nreturn -1; \n }\n\n\n \n if ($requiredPackage && false !== ($pos = strpos($requiredPackage, '/'))) {\n$requiredVendor = substr($requiredPackage, 0, $pos);\n\n$aIsSameVendor = substr($a->getName(), 0, $pos) === $requiredVendor;\n$bIsSameVendor = substr($b->getName(), 0, $pos) === $requiredVendor;\n\nif ($bIsSameVendor !== $aIsSameVendor) {\nreturn $aIsSameVendor ? -1 : 1;\n}\n}\n}\n\n\n if ($a->getId() === $b->getId()) {\nreturn 0;\n}\n\nreturn ($a->getId() < $b->getId()) ? -1 : 1;\n}\n\nif (isset($installedMap[$a->getId()])) {\nreturn -1;\n}\n\nif (isset($installedMap[$b->getId()])) {\nreturn 1;\n}\n\nreturn ($this->getPriority($pool, $a) > $this->getPriority($pool, $b)) ? -1 : 1;\n}\n\n\n\n\n\n\n\n\n\n\n\nprotected function replaces(PackageInterface $source, PackageInterface $target)\n{\nforeach ($source->getReplaces() as $link) {\nif ($link->getTarget() === $target->getName()\n\n\n ) {\nreturn true;\n}\n}\n\nreturn false;\n}\n\nprotected function pruneToBestVersion(Pool $pool, $literals)\n{\n$bestLiterals = array($literals[0]);\n$bestPackage = $pool->literalToPackage($literals[0]);\nforeach ($literals as $i => $literal) {\nif (0 === $i) {\ncontinue;\n}\n\n$package = $pool->literalToPackage($literal);\n\nif ($this->versionCompare($package, $bestPackage, '>')) {\n$bestPackage = $package;\n$bestLiterals = array($literal);\n} elseif ($this->versionCompare($package, $bestPackage, '==')) {\n$bestLiterals[] = $literal;\n}\n}\n\nreturn $bestLiterals;\n}\n\nprotected function selectNewestPackages(array $installedMap, array $literals)\n{\n$maxLiterals = array($literals[0]);\n$maxPackage = $literals[0]->getPackage();\nforeach ($literals as $i => $literal) {\nif (0 === $i) {\ncontinue;\n}\n\nif ($this->versionCompare($literal->getPackage(), $maxPackage, '>')) {\n$maxPackage = $literal->getPackage();\n$maxLiterals = array($literal);\n} elseif ($this->versionCompare($literal->getPackage(), $maxPackage, '==')) {\n$maxLiterals[] = $literal;\n}\n}\n\nreturn $maxLiterals;\n}\n\n\n\n\nprotected function pruneToHighestPriorityOrInstalled(Pool $pool, array $installedMap, array $literals)\n{\n$selected = array();\n\n$priority = null;\n\nforeach ($literals as $literal) {\n$package = $pool->literalToPackage($literal);\n\nif (isset($installedMap[$package->getId()])) {\n$selected[] = $literal;\ncontinue;\n}\n\nif (null === $priority) {\n$priority = $this->getPriority($pool, $package);\n}\n\nif ($this->getPriority($pool, $package) != $priority) {\nbreak;\n}\n\n$selected[] = $literal;\n}\n\nreturn $selected;\n}\n\n\n\n\n\n\nprotected function pruneRemoteAliases(Pool $pool, array $literals)\n{\n$hasLocalAlias = false;\n\nforeach ($literals as $literal) {\n$package = $pool->literalToPackage($literal);\n\nif ($package instanceof AliasPackage && $package->isRootPackageAlias()) {\n$hasLocalAlias = true;\nbreak;\n}\n}\n\nif (!$hasLocalAlias) {\nreturn $literals;\n}\n\n$selected = array();\nforeach ($literals as $literal) {\n$package = $pool->literalToPackage($literal);\n\nif ($package instanceof AliasPackage && $package->isRootPackageAlias()) {\n$selected[] = $literal;\n}\n}\n\nreturn $selected;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\DependencyResolver;\n\n\n\n\n\n\nclass Decisions implements \\Iterator, \\Countable\n{\nconst DECISION_LITERAL = 0;\nconst DECISION_REASON = 1;\n\nprotected $pool;\nprotected $decisionMap;\nprotected $decisionQueue = array();\n\npublic function __construct($pool)\n{\n$this->pool = $pool;\n$this->decisionMap = array();\n}\n\npublic function decide($literal, $level, $why)\n{\n$this->addDecision($literal, $level);\n$this->decisionQueue[] = array(\nself::DECISION_LITERAL => $literal,\nself::DECISION_REASON => $why,\n);\n}\n\npublic function satisfy($literal)\n{\n$packageId = abs($literal);\n\nreturn (\n$literal > 0 && isset($this->decisionMap[$packageId]) && $this->decisionMap[$packageId] > 0 ||\n$literal < 0 && isset($this->decisionMap[$packageId]) && $this->decisionMap[$packageId] < 0\n);\n}\n\npublic function conflict($literal)\n{\n$packageId = abs($literal);\n\nreturn (\n(isset($this->decisionMap[$packageId]) && $this->decisionMap[$packageId] > 0 && $literal < 0) ||\n(isset($this->decisionMap[$packageId]) && $this->decisionMap[$packageId] < 0 && $literal > 0)\n);\n}\n\npublic function decided($literalOrPackageId)\n{\nreturn !empty($this->decisionMap[abs($literalOrPackageId)]);\n}\n\npublic function undecided($literalOrPackageId)\n{\nreturn empty($this->decisionMap[abs($literalOrPackageId)]);\n}\n\npublic function decidedInstall($literalOrPackageId)\n{\n$packageId = abs($literalOrPackageId);\n\nreturn isset($this->decisionMap[$packageId]) && $this->decisionMap[$packageId] > 0;\n}\n\npublic function decisionLevel($literalOrPackageId)\n{\n$packageId = abs($literalOrPackageId);\nif (isset($this->decisionMap[$packageId])) {\nreturn abs($this->decisionMap[$packageId]);\n}\n\nreturn 0;\n}\n\npublic function decisionRule($literalOrPackageId)\n{\n$packageId = abs($literalOrPackageId);\n\nforeach ($this->decisionQueue as $i => $decision) {\nif ($packageId === abs($decision[self::DECISION_LITERAL])) {\nreturn $decision[self::DECISION_REASON];\n}\n}\n\nreturn null;\n}\n\npublic function atOffset($queueOffset)\n{\nreturn $this->decisionQueue[$queueOffset];\n}\n\npublic function validOffset($queueOffset)\n{\nreturn $queueOffset >= 0 && $queueOffset < count($this->decisionQueue);\n}\n\npublic function lastReason()\n{\nreturn $this->decisionQueue[count($this->decisionQueue) - 1][self::DECISION_REASON];\n}\n\npublic function lastLiteral()\n{\nreturn $this->decisionQueue[count($this->decisionQueue) - 1][self::DECISION_LITERAL];\n}\n\npublic function reset()\n{\nwhile ($decision = array_pop($this->decisionQueue)) {\n$this->decisionMap[abs($decision[self::DECISION_LITERAL])] = 0;\n}\n}\n\npublic function resetToOffset($offset)\n{\nwhile (count($this->decisionQueue) > $offset + 1) {\n$decision = array_pop($this->decisionQueue);\n$this->decisionMap[abs($decision[self::DECISION_LITERAL])] = 0;\n}\n}\n\npublic function revertLast()\n{\n$this->decisionMap[abs($this->lastLiteral())] = 0;\narray_pop($this->decisionQueue);\n}\n\npublic function count()\n{\nreturn count($this->decisionQueue);\n}\n\npublic function rewind()\n{\nend($this->decisionQueue);\n}\n\npublic function current()\n{\nreturn current($this->decisionQueue);\n}\n\npublic function key()\n{\nreturn key($this->decisionQueue);\n}\n\npublic function next()\n{\nreturn prev($this->decisionQueue);\n}\n\npublic function valid()\n{\nreturn false !== current($this->decisionQueue);\n}\n\npublic function isEmpty()\n{\nreturn count($this->decisionQueue) === 0;\n}\n\nprotected function addDecision($literal, $level)\n{\n$packageId = abs($literal);\n\n$previousDecision = isset($this->decisionMap[$packageId]) ? $this->decisionMap[$packageId] : null;\nif ($previousDecision != 0) {\n$literalString = $this->pool->literalToString($literal);\n$package = $this->pool->literalToPackage($literal);\nthrow new SolverBugException(\n\"Trying to decide $literalString on level $level, even though $package was previously decided as \".(int) $previousDecision.\".\"\n);\n}\n\nif ($literal > 0) {\n$this->decisionMap[$packageId] = $level;\n} else {\n$this->decisionMap[$packageId] = -$level;\n}\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\DependencyResolver;\n\n\n\n\n\n\n\n\nclass RuleWatchNode\n{\npublic $watch1;\npublic $watch2;\n\nprotected $rule;\n\n\n\n\n\n\npublic function __construct($rule)\n{\n$this->rule = $rule;\n\n$literals = $rule->getLiterals();\n\n$this->watch1 = count($literals) > 0 ? $literals[0] : 0;\n$this->watch2 = count($literals) > 1 ? $literals[1] : 0;\n}\n\n\n\n\n\n\n\n\n\npublic function watch2OnHighest(Decisions $decisions)\n{\n$literals = $this->rule->getLiterals();\n\n\n if ($literals < 3) {\nreturn;\n}\n\n$watchLevel = 0;\n\nforeach ($literals as $literal) {\n$level = $decisions->decisionLevel($literal);\n\nif ($level > $watchLevel) {\n$this->rule->watch2 = $literal;\n$watchLevel = $level;\n}\n}\n}\n\n\n\n\n\n\npublic function getRule()\n{\nreturn $this->rule;\n}\n\n\n\n\n\n\n\npublic function getOtherWatch($literal)\n{\nif ($this->watch1 == $literal) {\nreturn $this->watch2;\n} else {\nreturn $this->watch1;\n}\n}\n\n\n\n\n\n\n\npublic function moveWatch($from, $to)\n{\nif ($this->watch1 == $from) {\n$this->watch1 = $to;\n} else {\n$this->watch2 = $to;\n}\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\DependencyResolver;\n\n\n\n\nclass SolverProblemsException extends \\RuntimeException\n{\nprotected $problems;\nprotected $installedMap;\n\npublic function __construct(array $problems, array $installedMap)\n{\n$this->problems = $problems;\n$this->installedMap = $installedMap;\n\nparent::__construct($this->createMessage(), 2);\n}\n\nprotected function createMessage()\n{\n$text = \"\\n\";\nforeach ($this->problems as $i => $problem) {\n$text .= \"  Problem \".($i+1).$problem->getPrettyString($this->installedMap).\"\\n\";\n}\n\nif (strpos($text, 'could not be found') || strpos($text, 'no matching package found')) {\n$text .= \"\\nPotential causes:\\n - A typo in the package name\\n - The package is not available in a stable-enough version according to your minimum-stability setting\\n   see <https://groups.google.com/d/topic/composer-dev/_g3ASeIFlrc/discussion> for more details.\\n\\nRead <http://getcomposer.org/doc/articles/troubleshooting.md> for further common problems.\";\n}\n\nreturn $text;\n}\n\npublic function getProblems()\n{\nreturn $this->problems;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\DependencyResolver;\n\nuse Composer\\Package\\AliasPackage;\nuse Composer\\DependencyResolver\\Operation;\n\n\n\n\nclass Transaction\n{\nprotected $policy;\nprotected $pool;\nprotected $installedMap;\nprotected $decisions;\nprotected $transaction;\n\npublic function __construct($policy, $pool, $installedMap, $decisions)\n{\n$this->policy = $policy;\n$this->pool = $pool;\n$this->installedMap = $installedMap;\n$this->decisions = $decisions;\n$this->transaction = array();\n}\n\npublic function getOperations()\n{\n$installMeansUpdateMap = $this->findUpdates();\n\n$updateMap = array();\n$installMap = array();\n$uninstallMap = array();\n\nforeach ($this->decisions as $i => $decision) {\n$literal = $decision[Decisions::DECISION_LITERAL];\n$reason = $decision[Decisions::DECISION_REASON];\n\n$package = $this->pool->literalToPackage($literal);\n\n\n if (($literal > 0) == (isset($this->installedMap[$package->getId()]))) {\ncontinue;\n}\n\nif ($literal > 0) {\nif (isset($installMeansUpdateMap[abs($literal)]) && !$package instanceof AliasPackage) {\n\n$source = $installMeansUpdateMap[abs($literal)];\n\n$updateMap[$package->getId()] = array(\n'package' => $package,\n'source' => $source,\n'reason' => $reason,\n);\n\n\n unset($installMeansUpdateMap[abs($literal)]);\n$ignoreRemove[$source->getId()] = true;\n} else {\n$installMap[$package->getId()] = array(\n'package' => $package,\n'reason' => $reason,\n);\n}\n}\n}\n\nforeach ($this->decisions as $i => $decision) {\n$literal = $decision[Decisions::DECISION_LITERAL];\n$package = $this->pool->literalToPackage($literal);\n\nif ($literal <= 0 &&\nisset($this->installedMap[$package->getId()]) &&\n!isset($ignoreRemove[$package->getId()])) {\n$uninstallMap[$package->getId()] = array(\n'package' => $package,\n'reason' => $reason,\n);\n\n}\n}\n\n$this->transactionFromMaps($installMap, $updateMap, $uninstallMap);\n\nreturn $this->transaction;\n}\n\nprotected function transactionFromMaps($installMap, $updateMap, $uninstallMap)\n{\n$queue = array_map(function ($operation) {\nreturn $operation['package'];\n},\n$this->findRootPackages($installMap, $updateMap)\n);\n\n$visited = array();\n\nwhile (!empty($queue)) {\n$package = array_pop($queue);\n$packageId = $package->getId();\n\nif (!isset($visited[$packageId])) {\narray_push($queue, $package);\n\nif ($package instanceof AliasPackage) {\narray_push($queue, $package->getAliasOf());\n} else {\nforeach ($package->getRequires() as $link) {\n$possibleRequires = $this->pool->whatProvides($link->getTarget(), $link->getConstraint());\n\nforeach ($possibleRequires as $require) {\narray_push($queue, $require);\n}\n}\n}\n\n$visited[$package->getId()] = true;\n} else {\nif (isset($installMap[$packageId])) {\n$this->install(\n$installMap[$packageId]['package'],\n$installMap[$packageId]['reason']\n);\nunset($installMap[$packageId]);\n}\nif (isset($updateMap[$packageId])) {\n$this->update(\n$updateMap[$packageId]['source'],\n$updateMap[$packageId]['package'],\n$updateMap[$packageId]['reason']\n);\nunset($updateMap[$packageId]);\n}\n}\n}\n\nforeach ($uninstallMap as $uninstall) {\n$this->uninstall($uninstall['package'], $uninstall['reason']);\n}\n}\n\nprotected function findRootPackages($installMap, $updateMap)\n{\n$packages = $installMap + $updateMap;\n$roots = $packages;\n\nforeach ($packages as $packageId => $operation) {\n$package = $operation['package'];\n\nif (!isset($roots[$packageId])) {\ncontinue;\n}\n\nforeach ($package->getRequires() as $link) {\n$possibleRequires = $this->pool->whatProvides($link->getTarget(), $link->getConstraint());\n\nforeach ($possibleRequires as $require) {\nunset($roots[$require->getId()]);\n}\n}\n}\n\nreturn $roots;\n}\n\nprotected function findUpdates()\n{\n$installMeansUpdateMap = array();\n\nforeach ($this->decisions as $i => $decision) {\n$literal = $decision[Decisions::DECISION_LITERAL];\n$package = $this->pool->literalToPackage($literal);\n\nif ($package instanceof AliasPackage) {\ncontinue;\n}\n\n\n if ($literal <= 0 && isset($this->installedMap[$package->getId()])) {\n$updates = $this->policy->findUpdatePackages($this->pool, $this->installedMap, $package);\n\n$literals = array($package->getId());\n\nforeach ($updates as $update) {\n$literals[] = $update->getId();\n}\n\nforeach ($literals as $updateLiteral) {\nif ($updateLiteral !== $literal) {\n$installMeansUpdateMap[abs($updateLiteral)] = $package;\n}\n}\n}\n}\n\nreturn $installMeansUpdateMap;\n}\n\nprotected function install($package, $reason)\n{\nif ($package instanceof AliasPackage) {\nreturn $this->markAliasInstalled($package, $reason);\n}\n\n$this->transaction[] = new Operation\\InstallOperation($package, $reason);\n}\n\nprotected function update($from, $to, $reason)\n{\n$this->transaction[] = new Operation\\UpdateOperation($from, $to, $reason);\n}\n\nprotected function uninstall($package, $reason)\n{\nif ($package instanceof AliasPackage) {\nreturn $this->markAliasUninstalled($package, $reason);\n}\n\n$this->transaction[] = new Operation\\UninstallOperation($package, $reason);\n}\n\nprotected function markAliasInstalled($package, $reason)\n{\n$this->transaction[] = new Operation\\MarkAliasInstalledOperation($package, $reason);\n}\n\nprotected function markAliasUninstalled($package, $reason)\n{\n$this->transaction[] = new Operation\\MarkAliasUninstalledOperation($package, $reason);\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\DependencyResolver\\Operation;\n\nuse Composer\\Package\\PackageInterface;\n\n\n\n\n\n\nclass UninstallOperation extends SolverOperation\n{\nprotected $package;\n\n\n\n\n\n\n\npublic function __construct(PackageInterface $package, $reason = null)\n{\nparent::__construct($reason);\n\n$this->package = $package;\n}\n\n\n\n\n\n\npublic function getPackage()\n{\nreturn $this->package;\n}\n\n\n\n\n\n\npublic function getJobType()\n{\nreturn 'uninstall';\n}\n\n\n\n\npublic function __toString()\n{\nreturn 'Uninstalling '.$this->package->getPrettyName().' ('.$this->formatVersion($this->package).')';\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\DependencyResolver\\Operation;\n\nuse Composer\\Package\\PackageInterface;\n\n\n\n\n\n\nclass UpdateOperation extends SolverOperation\n{\nprotected $initialPackage;\nprotected $targetPackage;\n\n\n\n\n\n\n\n\npublic function __construct(PackageInterface $initial, PackageInterface $target, $reason = null)\n{\nparent::__construct($reason);\n\n$this->initialPackage = $initial;\n$this->targetPackage = $target;\n}\n\n\n\n\n\n\npublic function getInitialPackage()\n{\nreturn $this->initialPackage;\n}\n\n\n\n\n\n\npublic function getTargetPackage()\n{\nreturn $this->targetPackage;\n}\n\n\n\n\n\n\npublic function getJobType()\n{\nreturn 'update';\n}\n\n\n\n\npublic function __toString()\n{\nreturn 'Updating '.$this->initialPackage->getPrettyName().' ('.$this->formatVersion($this->initialPackage).') to '.\n$this->targetPackage->getPrettyName(). ' ('.$this->formatVersion($this->targetPackage).')';\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\DependencyResolver\\Operation;\n\nuse Composer\\Package\\AliasPackage;\n\n\n\n\n\n\nclass MarkAliasInstalledOperation extends SolverOperation\n{\nprotected $package;\n\n\n\n\n\n\n\npublic function __construct(AliasPackage $package, $reason = null)\n{\nparent::__construct($reason);\n\n$this->package = $package;\n}\n\n\n\n\n\n\npublic function getPackage()\n{\nreturn $this->package;\n}\n\n\n\n\n\n\npublic function getJobType()\n{\nreturn 'markAliasInstalled';\n}\n\n\n\n\npublic function __toString()\n{\nreturn 'Marking '.$this->package->getPrettyName().' ('.$this->formatVersion($this->package).') as installed, alias of '.$this->package->getAliasOf()->getPrettyName().' ('.$this->formatVersion($this->package->getAliasOf()).')';\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\DependencyResolver\\Operation;\n\nuse Composer\\Package\\PackageInterface;\n\n\n\n\n\n\nclass InstallOperation extends SolverOperation\n{\nprotected $package;\n\n\n\n\n\n\n\npublic function __construct(PackageInterface $package, $reason = null)\n{\nparent::__construct($reason);\n\n$this->package = $package;\n}\n\n\n\n\n\n\npublic function getPackage()\n{\nreturn $this->package;\n}\n\n\n\n\n\n\npublic function getJobType()\n{\nreturn 'install';\n}\n\n\n\n\npublic function __toString()\n{\nreturn 'Installing '.$this->package->getPrettyName().' ('.$this->formatVersion($this->package).')';\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\DependencyResolver\\Operation;\n\nuse Composer\\Package\\Version\\VersionParser;\nuse Composer\\Package\\PackageInterface;\n\n\n\n\n\n\nabstract class SolverOperation implements OperationInterface\n{\nprotected $reason;\n\n\n\n\n\n\npublic function __construct($reason = null)\n{\n$this->reason = $reason;\n}\n\n\n\n\n\n\npublic function getReason()\n{\nreturn $this->reason;\n}\n\nprotected function formatVersion(PackageInterface $package)\n{\nreturn VersionParser::formatVersion($package);\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\DependencyResolver\\Operation;\n\nuse Composer\\Package\\AliasPackage;\n\n\n\n\n\n\nclass MarkAliasUninstalledOperation extends SolverOperation\n{\nprotected $package;\n\n\n\n\n\n\n\npublic function __construct(AliasPackage $package, $reason = null)\n{\nparent::__construct($reason);\n\n$this->package = $package;\n}\n\n\n\n\n\n\npublic function getPackage()\n{\nreturn $this->package;\n}\n\n\n\n\n\n\npublic function getJobType()\n{\nreturn 'markAliasUninstalled';\n}\n\n\n\n\npublic function __toString()\n{\nreturn 'Marking '.$this->package->getPrettyName().' ('.$this->formatVersion($this->package).') as uninstalled, alias of '.$this->package->getAliasOf()->getPrettyName().' ('.$this->formatVersion($this->package->getAliasOf()).')';\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\DependencyResolver\\Operation;\n\n\n\n\n\n\ninterface OperationInterface\n{\n\n\n\n\n\npublic function getJobType();\n\n\n\n\n\n\npublic function getReason();\n\n\n\n\n\n\npublic function __toString();\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\DependencyResolver;\n\nuse Composer\\Package\\BasePackage;\nuse Composer\\Package\\AliasPackage;\nuse Composer\\Package\\Version\\VersionParser;\nuse Composer\\Package\\Link;\nuse Composer\\Package\\LinkConstraint\\LinkConstraintInterface;\nuse Composer\\Package\\LinkConstraint\\VersionConstraint;\nuse Composer\\Repository\\RepositoryInterface;\nuse Composer\\Repository\\CompositeRepository;\nuse Composer\\Repository\\ComposerRepository;\nuse Composer\\Repository\\InstalledRepositoryInterface;\nuse Composer\\Repository\\StreamableRepositoryInterface;\nuse Composer\\Repository\\PlatformRepository;\n\n\n\n\n\n\n\nclass Pool\n{\nconst MATCH_NAME = -1;\nconst MATCH_NONE = 0;\nconst MATCH = 1;\nconst MATCH_PROVIDE = 2;\nconst MATCH_REPLACE = 3;\n\nprotected $repositories = array();\nprotected $providerRepos = array();\nprotected $packages = array();\nprotected $packageByName = array();\nprotected $acceptableStabilities;\nprotected $stabilityFlags;\nprotected $versionParser;\nprotected $providerCache = array();\nprotected $id = 1;\n\npublic function __construct($minimumStability = 'stable', array $stabilityFlags = array())\n{\n$stabilities = BasePackage::$stabilities;\n$this->versionParser = new VersionParser;\n$this->acceptableStabilities = array();\nforeach (BasePackage::$stabilities as $stability => $value) {\nif ($value <= BasePackage::$stabilities[$minimumStability]) {\n$this->acceptableStabilities[$stability] = $value;\n}\n}\n$this->stabilityFlags = $stabilityFlags;\n}\n\n\n\n\n\n\n\npublic function addRepository(RepositoryInterface $repo, $rootAliases = array())\n{\nif ($repo instanceof CompositeRepository) {\n$repos = $repo->getRepositories();\n} else {\n$repos = array($repo);\n}\n\nforeach ($repos as $repo) {\n$this->repositories[] = $repo;\n\n$exempt = $repo instanceof PlatformRepository || $repo instanceof InstalledRepositoryInterface;\n\nif ($repo instanceof ComposerRepository && $repo->hasProviders()) {\n$this->providerRepos[] = $repo;\n$repo->setRootAliases($rootAliases);\n$repo->resetPackageIds();\n} elseif ($repo instanceof StreamableRepositoryInterface) {\nforeach ($repo->getMinimalPackages() as $package) {\n$name = $package['name'];\n$version = $package['version'];\n$stability = VersionParser::parseStability($version);\n\n\n $names = array(\n$name => true,\n);\nif (isset($package['provide'])) {\nforeach ($package['provide'] as $target => $constraint) {\n$names[$target] = true;\n}\n}\nif (isset($package['replace'])) {\nforeach ($package['replace'] as $target => $constraint) {\n$names[$target] = true;\n}\n}\n$names = array_keys($names);\n\nif ($exempt || $this->isPackageAcceptable($names, $stability)) {\n$package['id'] = $this->id++;\n$this->packages[] = $package;\n\nforeach ($names as $provided) {\n$this->packageByName[$provided][$package['id']] = $this->packages[$this->id - 2];\n}\n\n\n unset($rootAliasData);\nif (isset($rootAliases[$name][$version])) {\n$rootAliasData = $rootAliases[$name][$version];\n} elseif (isset($package['alias_normalized']) && isset($rootAliases[$name][$package['alias_normalized']])) {\n$rootAliasData = $rootAliases[$name][$package['alias_normalized']];\n}\n\nif (isset($rootAliasData)) {\n$alias = $package;\nunset($alias['raw']);\n$alias['version'] = $rootAliasData['alias_normalized'];\n$alias['alias'] = $rootAliasData['alias'];\n$alias['alias_of'] = $package['id'];\n$alias['id'] = $this->id++;\n$alias['root_alias'] = true;\n$this->packages[] = $alias;\n\nforeach ($names as $provided) {\n$this->packageByName[$provided][$alias['id']] = $this->packages[$this->id - 2];\n}\n}\n\n\n if (isset($package['alias'])) {\n$alias = $package;\nunset($alias['raw']);\n$alias['version'] = $package['alias_normalized'];\n$alias['alias'] = $package['alias'];\n$alias['alias_of'] = $package['id'];\n$alias['id'] = $this->id++;\n$this->packages[] = $alias;\n\nforeach ($names as $provided) {\n$this->packageByName[$provided][$alias['id']] = $this->packages[$this->id - 2];\n}\n}\n}\n}\n} else {\nforeach ($repo->getPackages() as $package) {\n$names = $package->getNames();\n$stability = $package->getStability();\nif ($exempt || $this->isPackageAcceptable($names, $stability)) {\n$package->setId($this->id++);\n$this->packages[] = $package;\n\nforeach ($names as $provided) {\n$this->packageByName[$provided][] = $package;\n}\n\n\n $name = $package->getName();\nif (isset($rootAliases[$name][$package->getVersion()])) {\n$alias = $rootAliases[$name][$package->getVersion()];\nif ($package instanceof AliasPackage) {\n$package = $package->getAliasOf();\n}\n$aliasPackage = new AliasPackage($package, $alias['alias_normalized'], $alias['alias']);\n$aliasPackage->setRootPackageAlias(true);\n$aliasPackage->setId($this->id++);\n\n$package->getRepository()->addPackage($aliasPackage);\n$this->packages[] = $aliasPackage;\n\nforeach ($aliasPackage->getNames() as $name) {\n$this->packageByName[$name][] = $aliasPackage;\n}\n}\n}\n}\n}\n}\n}\n\npublic function getPriority(RepositoryInterface $repo)\n{\n$priority = array_search($repo, $this->repositories, true);\n\nif (false === $priority) {\nthrow new \\RuntimeException(\"Could not determine repository priority. The repository was not registered in the pool.\");\n}\n\nreturn -$priority;\n}\n\n\n\n\n\n\n\npublic function packageById($id)\n{\nreturn $this->ensurePackageIsLoaded($this->packages[$id - 1]);\n}\n\n\n\n\n\n\n\n\n\npublic function whatProvides($name, LinkConstraintInterface $constraint = null)\n{\nif (isset($this->providerCache[$name][(string) $constraint])) {\nreturn $this->providerCache[$name][(string) $constraint];\n}\n\nreturn $this->providerCache[$name][(string) $constraint] = $this->computeWhatProvides($name, $constraint);\n}\n\n\n\n\nprivate function computeWhatProvides($name, $constraint)\n{\n$candidates = array();\n\nforeach ($this->providerRepos as $repo) {\nforeach ($repo->whatProvides($this, $name) as $candidate) {\n$candidates[] = $candidate;\nif ($candidate->getId() < 1) {\n$candidate->setId($this->id++);\n$this->packages[$this->id - 2] = $candidate;\n}\n}\n}\n\nif (isset($this->packageByName[$name])) {\n$candidates = array_merge($candidates, $this->packageByName[$name]);\n}\n\nif (null === $constraint) {\nforeach ($candidates as $key => $candidate) {\n$candidates[$key] = $this->ensurePackageIsLoaded($candidate);\n}\n\nreturn $candidates;\n}\n\n$matches = $provideMatches = array();\n$nameMatch = false;\n\nforeach ($candidates as $candidate) {\nswitch ($this->match($candidate, $name, $constraint)) {\ncase self::MATCH_NONE:\nbreak;\n\ncase self::MATCH_NAME:\n$nameMatch = true;\nbreak;\n\ncase self::MATCH:\n$nameMatch = true;\n$matches[] = $this->ensurePackageIsLoaded($candidate);\nbreak;\n\ncase self::MATCH_PROVIDE:\n$provideMatches[] = $this->ensurePackageIsLoaded($candidate);\nbreak;\n\ncase self::MATCH_REPLACE:\n$matches[] = $this->ensurePackageIsLoaded($candidate);\nbreak;\n\ndefault:\nthrow new \\UnexpectedValueException('Unexpected match type');\n}\n}\n\n\n if ($nameMatch) {\nreturn $matches;\n}\n\nreturn array_merge($matches, $provideMatches);\n}\n\npublic function literalToPackage($literal)\n{\n$packageId = abs($literal);\n\nreturn $this->packageById($packageId);\n}\n\npublic function literalToString($literal)\n{\nreturn ($literal > 0 ? '+' : '-') . $this->literalToPackage($literal);\n}\n\npublic function literalToPrettyString($literal, $installedMap)\n{\n$package = $this->literalToPackage($literal);\n\nif (isset($installedMap[$package->getId()])) {\n$prefix = ($literal > 0 ? 'keep' : 'remove');\n} else {\n$prefix = ($literal > 0 ? 'install' : 'don\\'t install');\n}\n\nreturn $prefix.' '.$package->getPrettyString();\n}\n\npublic function isPackageAcceptable($name, $stability)\n{\nforeach ((array) $name as $n) {\n\n if (!isset($this->stabilityFlags[$n]) && isset($this->acceptableStabilities[$stability])) {\nreturn true;\n}\n\n\n if (isset($this->stabilityFlags[$n]) && BasePackage::$stabilities[$stability] <= $this->stabilityFlags[$n]) {\nreturn true;\n}\n}\n\nreturn false;\n}\n\nprivate function ensurePackageIsLoaded($data)\n{\nif (is_array($data)) {\nif (isset($data['alias_of'])) {\n$aliasOf = $this->packageById($data['alias_of']);\n$package = $this->packages[$data['id'] - 1] = $data['repo']->loadAliasPackage($data, $aliasOf);\n$package->setRootPackageAlias(!empty($data['root_alias']));\n} else {\n$package = $this->packages[$data['id'] - 1] = $data['repo']->loadPackage($data);\n}\n\nforeach ($package->getNames() as $name) {\n$this->packageByName[$name][$data['id']] = $package;\n}\n$package->setId($data['id']);\n\nreturn $package;\n}\n\nreturn $data;\n}\n\n\n\n\n\n\n\n\n\n\nprivate function match($candidate, $name, LinkConstraintInterface $constraint)\n{\n\n if (is_array($candidate)) {\n$candidateName = $candidate['name'];\n$candidateVersion = $candidate['version'];\n} else {\n\n $candidateName = $candidate->getName();\n$candidateVersion = $candidate->getVersion();\n}\n\nif ($candidateName === $name) {\nreturn $constraint->matches(new VersionConstraint('==', $candidateVersion)) ? self::MATCH : self::MATCH_NAME;\n}\n\nif (is_array($candidate)) {\n$provides = isset($candidate['provide'])\n? $this->versionParser->parseLinks($candidateName, $candidateVersion, 'provides', $candidate['provide'])\n: array();\n$replaces = isset($candidate['replace'])\n? $this->versionParser->parseLinks($candidateName, $candidateVersion, 'replaces', $candidate['replace'])\n: array();\n} else {\n$provides = $candidate->getProvides();\n$replaces = $candidate->getReplaces();\n}\n\n\n if (isset($replaces[0]) || isset($provides[0])) {\nforeach ($provides as $link) {\nif ($link->getTarget() === $name && $constraint->matches($link->getConstraint())) {\nreturn self::MATCH_PROVIDE;\n}\n}\n\nforeach ($replaces as $link) {\nif ($link->getTarget() === $name && $constraint->matches($link->getConstraint())) {\nreturn self::MATCH_REPLACE;\n}\n}\n\nreturn self::MATCH_NONE;\n}\n\nif (isset($provides[$name]) && $constraint->matches($provides[$name]->getConstraint())) {\nreturn self::MATCH_PROVIDE;\n}\n\nif (isset($replaces[$name]) && $constraint->matches($replaces[$name]->getConstraint())) {\nreturn self::MATCH_REPLACE;\n}\n\nreturn self::MATCH_NONE;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\DependencyResolver;\n\n\n\n\nclass Rule\n{\nconst RULE_INTERNAL_ALLOW_UPDATE = 1;\nconst RULE_JOB_INSTALL = 2;\nconst RULE_JOB_REMOVE = 3;\nconst RULE_PACKAGE_CONFLICT = 6;\nconst RULE_PACKAGE_REQUIRES = 7;\nconst RULE_PACKAGE_OBSOLETES = 8;\nconst RULE_INSTALLED_PACKAGE_OBSOLETES = 9;\nconst RULE_PACKAGE_SAME_NAME = 10;\nconst RULE_PACKAGE_IMPLICIT_OBSOLETES = 11;\nconst RULE_LEARNED = 12;\nconst RULE_PACKAGE_ALIAS = 13;\n\nprotected $pool;\n\nprotected $disabled;\nprotected $literals;\nprotected $type;\nprotected $id;\nprotected $reason;\nprotected $reasonData;\n\nprotected $job;\n\nprotected $ruleHash;\n\npublic function __construct(Pool $pool, array $literals, $reason, $reasonData, $job = null)\n{\n$this->pool = $pool;\n\n\n sort($literals);\n\n$this->literals = $literals;\n$this->reason = $reason;\n$this->reasonData = $reasonData;\n\n$this->disabled = false;\n\n$this->job = $job;\n\n$this->type = -1;\n\n$this->ruleHash = substr(md5(implode(',', $this->literals)), 0, 5);\n}\n\npublic function getHash()\n{\nreturn $this->ruleHash;\n}\n\npublic function setId($id)\n{\n$this->id = $id;\n}\n\npublic function getId()\n{\nreturn $this->id;\n}\n\npublic function getJob()\n{\nreturn $this->job;\n}\n\npublic function getReason()\n{\nreturn $this->reason;\n}\n\npublic function getReasonData()\n{\nreturn $this->reasonData;\n}\n\npublic function getRequiredPackage()\n{\nif ($this->reason === self::RULE_JOB_INSTALL) {\nreturn $this->reasonData;\n}\n\nif ($this->reason === self::RULE_PACKAGE_REQUIRES) {\nreturn $this->reasonData->getTarget();\n}\n}\n\n\n\n\n\n\n\n\n\npublic function equals(Rule $rule)\n{\nif ($this->ruleHash !== $rule->ruleHash) {\nreturn false;\n}\n\nif (count($this->literals) != count($rule->literals)) {\nreturn false;\n}\n\nfor ($i = 0, $n = count($this->literals); $i < $n; $i++) {\nif ($this->literals[$i] !== $rule->literals[$i]) {\nreturn false;\n}\n}\n\nreturn true;\n}\n\npublic function setType($type)\n{\n$this->type = $type;\n}\n\npublic function getType()\n{\nreturn $this->type;\n}\n\npublic function disable()\n{\n$this->disabled = true;\n}\n\npublic function enable()\n{\n$this->disabled = false;\n}\n\npublic function isDisabled()\n{\nreturn $this->disabled;\n}\n\npublic function isEnabled()\n{\nreturn !$this->disabled;\n}\n\npublic function getLiterals()\n{\nreturn $this->literals;\n}\n\npublic function isAssertion()\n{\nreturn 1 === count($this->literals);\n}\n\npublic function getPrettyString(array $installedMap = array())\n{\n$ruleText = '';\nforeach ($this->literals as $i => $literal) {\nif ($i != 0) {\n$ruleText .= '|';\n}\n$ruleText .= $this->pool->literalToPrettyString($literal, $installedMap);\n}\n\nswitch ($this->reason) {\ncase self::RULE_INTERNAL_ALLOW_UPDATE:\nreturn $ruleText;\n\ncase self::RULE_JOB_INSTALL:\nreturn \"Install command rule ($ruleText)\";\n\ncase self::RULE_JOB_REMOVE:\nreturn \"Remove command rule ($ruleText)\";\n\ncase self::RULE_PACKAGE_CONFLICT:\n$package1 = $this->pool->literalToPackage($this->literals[0]);\n$package2 = $this->pool->literalToPackage($this->literals[1]);\n\nreturn $package1->getPrettyString().' conflicts with '.$this->formatPackagesUnique(array($package2)).'.';\n\ncase self::RULE_PACKAGE_REQUIRES:\n$literals = $this->literals;\n$sourceLiteral = array_shift($literals);\n$sourcePackage = $this->pool->literalToPackage($sourceLiteral);\n\n$requires = array();\nforeach ($literals as $literal) {\n$requires[] = $this->pool->literalToPackage($literal);\n}\n\n$text = $this->reasonData->getPrettyString($sourcePackage);\nif ($requires) {\n$text .= ' -> satisfiable by ' . $this->formatPackagesUnique($requires) . '.';\n} else {\n$targetName = $this->reasonData->getTarget();\n\n\n if (0 === strpos($targetName, 'ext-')) {\n$ext = substr($targetName, 4);\n$error = extension_loaded($ext) ? 'has the wrong version ('.phpversion($ext).') installed' : 'is missing from your system';\n\n$text .= ' -> the requested PHP extension '.$ext.' '.$error.'.';\n} elseif (0 === strpos($targetName, 'lib-')) {\n\n $lib = substr($targetName, 4);\n\n$text .= ' -> the requested linked library '.$lib.' has the wrong version installed or is missing from your system, make sure to have the extension providing it.';\n} else {\n$text .= ' -> no matching package found.';\n}\n}\n\nreturn $text;\n\ncase self::RULE_PACKAGE_OBSOLETES:\nreturn $ruleText;\ncase self::RULE_INSTALLED_PACKAGE_OBSOLETES:\nreturn $ruleText;\ncase self::RULE_PACKAGE_SAME_NAME:\nreturn 'Can only install one of: ' . $this->formatPackagesUnique($this->literals) . '.';\ncase self::RULE_PACKAGE_IMPLICIT_OBSOLETES:\nreturn $ruleText;\ncase self::RULE_LEARNED:\nreturn 'Conclusion: '.$ruleText;\ncase self::RULE_PACKAGE_ALIAS:\nreturn $ruleText;\n}\n}\n\nprotected function formatPackagesUnique(array $packages)\n{\n$prepared = array();\nforeach ($packages as $package) {\nif (!is_object($package)) {\n$package = $this->pool->literalToPackage($package);\n}\n$prepared[$package->getName()]['name'] = $package->getPrettyName();\n$prepared[$package->getName()]['versions'][$package->getVersion()] = $package->getPrettyVersion();\n}\nforeach ($prepared as $name => $package) {\n$prepared[$name] = $package['name'].'['.implode(', ', $package['versions']).']';\n}\n\nreturn implode(', ', $prepared);\n}\n\n\n\n\n\n\npublic function __toString()\n{\n$result = ($this->isDisabled()) ? 'disabled(' : '(';\n\nforeach ($this->literals as $i => $literal) {\nif ($i != 0) {\n$result .= '|';\n}\n$result .= $this->pool->literalToString($literal);\n}\n\n$result .= ')';\n\nreturn $result;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\DependencyResolver;\n\nuse Composer\\Package\\PackageInterface;\nuse Composer\\Package\\AliasPackage;\n\n\n\n\nclass RuleSetGenerator\n{\nprotected $policy;\nprotected $pool;\nprotected $rules;\nprotected $jobs;\nprotected $installedMap;\n\npublic function __construct(PolicyInterface $policy, Pool $pool)\n{\n$this->policy = $policy;\n$this->pool = $pool;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nprotected function createRequireRule(PackageInterface $package, array $providers, $reason, $reasonData = null)\n{\n$literals = array(-$package->getId());\n\nforeach ($providers as $provider) {\n\n if ($provider === $package) {\nreturn null;\n}\n$literals[] = $provider->getId();\n}\n\nreturn new Rule($this->pool, $literals, $reason, $reasonData);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nprotected function createInstallOneOfRule(array $packages, $reason, $job)\n{\n$literals = array();\nforeach ($packages as $package) {\n$literals[] = $package->getId();\n}\n\nreturn new Rule($this->pool, $literals, $reason, $job['packageName'], $job);\n}\n\n\n\n\n\n\n\n\n\n\n\n\nprotected function createRemoveRule(PackageInterface $package, $reason, $job)\n{\nreturn new Rule($this->pool, array(-$package->getId()), $reason, $job['packageName'], $job);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nprotected function createConflictRule(PackageInterface $issuer, PackageInterface $provider, $reason, $reasonData = null)\n{\n\n if ($issuer === $provider) {\nreturn null;\n}\n\nreturn new Rule($this->pool, array(-$issuer->getId(), -$provider->getId()), $reason, $reasonData);\n}\n\n\n\n\n\n\n\n\n\n\nprivate function addRule($type, Rule $newRule = null)\n{\nif (!$newRule || $this->rules->containsEqual($newRule)) {\nreturn;\n}\n\n$this->rules->add($newRule, $type);\n}\n\nprotected function addRulesForPackage(PackageInterface $package)\n{\n$workQueue = new \\SplQueue;\n$workQueue->enqueue($package);\n\nwhile (!$workQueue->isEmpty()) {\n$package = $workQueue->dequeue();\nif (isset($this->addedMap[$package->getId()])) {\ncontinue;\n}\n\n$this->addedMap[$package->getId()] = true;\n\nforeach ($package->getRequires() as $link) {\n$possibleRequires = $this->pool->whatProvides($link->getTarget(), $link->getConstraint());\n\n$this->addRule(RuleSet::TYPE_PACKAGE, $rule = $this->createRequireRule($package, $possibleRequires, Rule::RULE_PACKAGE_REQUIRES, $link));\n\nforeach ($possibleRequires as $require) {\n$workQueue->enqueue($require);\n}\n}\n\nforeach ($package->getConflicts() as $link) {\n$possibleConflicts = $this->pool->whatProvides($link->getTarget(), $link->getConstraint());\n\nforeach ($possibleConflicts as $conflict) {\n$this->addRule(RuleSet::TYPE_PACKAGE, $this->createConflictRule($package, $conflict, Rule::RULE_PACKAGE_CONFLICT, $link));\n}\n}\n\n\n $isInstalled = (isset($this->installedMap[$package->getId()]));\n\nforeach ($package->getReplaces() as $link) {\n$obsoleteProviders = $this->pool->whatProvides($link->getTarget(), $link->getConstraint());\n\nforeach ($obsoleteProviders as $provider) {\nif ($provider === $package) {\ncontinue;\n}\n\nif (!$this->obsoleteImpossibleForAlias($package, $provider)) {\n$reason = ($isInstalled) ? Rule::RULE_INSTALLED_PACKAGE_OBSOLETES : Rule::RULE_PACKAGE_OBSOLETES;\n$this->addRule(RuleSet::TYPE_PACKAGE, $this->createConflictRule($package, $provider, $reason, $link));\n}\n}\n}\n\n$obsoleteProviders = $this->pool->whatProvides($package->getName(), null);\n\nforeach ($obsoleteProviders as $provider) {\nif ($provider === $package) {\ncontinue;\n}\n\nif (($package instanceof AliasPackage) && $package->getAliasOf() === $provider) {\n$this->addRule(RuleSet::TYPE_PACKAGE, $rule = $this->createRequireRule($package, array($provider), Rule::RULE_PACKAGE_ALIAS, $package));\n} elseif (!$this->obsoleteImpossibleForAlias($package, $provider)) {\n$reason = ($package->getName() == $provider->getName()) ? Rule::RULE_PACKAGE_SAME_NAME : Rule::RULE_PACKAGE_IMPLICIT_OBSOLETES;\n$this->addRule(RuleSet::TYPE_PACKAGE, $rule = $this->createConflictRule($package, $provider, $reason, $package));\n}\n}\n}\n}\n\nprotected function obsoleteImpossibleForAlias($package, $provider)\n{\n$packageIsAlias = $package instanceof AliasPackage;\n$providerIsAlias = $provider instanceof AliasPackage;\n\n$impossible = (\n($packageIsAlias && $package->getAliasOf() === $provider) ||\n($providerIsAlias && $provider->getAliasOf() === $package) ||\n($packageIsAlias && $providerIsAlias && $provider->getAliasOf() === $package->getAliasOf())\n);\n\nreturn $impossible;\n}\n\n\n\n\n\n\n\nprivate function addRulesForUpdatePackages(PackageInterface $package)\n{\n$updates = $this->policy->findUpdatePackages($this->pool, $this->installedMap, $package);\n\nforeach ($updates as $update) {\n$this->addRulesForPackage($update);\n}\n}\n\nprotected function addRulesForJobs()\n{\nforeach ($this->jobs as $job) {\nswitch ($job['cmd']) {\ncase 'install':\nif ($job['packages']) {\nforeach ($job['packages'] as $package) {\nif (!isset($this->installedMap[$package->getId()])) {\n$this->addRulesForPackage($package);\n}\n}\n\n$rule = $this->createInstallOneOfRule($job['packages'], Rule::RULE_JOB_INSTALL, $job);\n$this->addRule(RuleSet::TYPE_JOB, $rule);\n}\nbreak;\ncase 'remove':\n\n \n foreach ($job['packages'] as $package) {\n$rule = $this->createRemoveRule($package, Rule::RULE_JOB_REMOVE, $job);\n$this->addRule(RuleSet::TYPE_JOB, $rule);\n}\nbreak;\n}\n}\n}\n\npublic function getRulesFor($jobs, $installedMap)\n{\n$this->jobs = $jobs;\n$this->rules = new RuleSet;\n$this->installedMap = $installedMap;\n\nforeach ($this->installedMap as $package) {\n$this->addRulesForPackage($package);\n$this->addRulesForUpdatePackages($package);\n}\n\n$this->addRulesForJobs();\n\nreturn $this->rules;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\DependencyResolver;\n\n\n\n\nclass DebugSolver extends Solver\n{\nprotected function printDecisionMap()\n{\necho \"\\nDecisionMap: \\n\";\nforeach ($this->decisionMap as $packageId => $level) {\nif ($packageId === 0) {\ncontinue;\n}\nif ($level > 0) {\necho '    +' . $this->pool->packageById($packageId).\"\\n\";\n} elseif ($level < 0) {\necho '    -' . $this->pool->packageById($packageId).\"\\n\";\n} else {\necho '    ?' . $this->pool->packageById($packageId).\"\\n\";\n}\n}\necho \"\\n\";\n}\n\nprotected function printDecisionQueue()\n{\necho \"DecisionQueue: \\n\";\nforeach ($this->decisionQueue as $i => $literal) {\necho '    ' . $this->pool->literalToString($literal) . ' ' . $this->decisionQueueWhy[$i].\" level \".$this->decisionMap[abs($literal)].\"\\n\";\n}\necho \"\\n\";\n}\n\nprotected function printWatches()\n{\necho \"\\nWatches:\\n\";\nforeach ($this->watches as $literalId => $watch) {\necho '  '.$this->literalFromId($literalId).\"\\n\";\n$queue = array(array('    ', $watch));\n\nwhile (!empty($queue)) {\nlist($indent, $watch) = array_pop($queue);\n\necho $indent.$watch;\n\nif ($watch) {\necho ' [id='.$watch->getId().',watch1='.$this->literalFromId($watch->watch1).',watch2='.$this->literalFromId($watch->watch2).\"]\";\n}\n\necho \"\\n\";\n\nif ($watch && ($watch->next1 == $watch || $watch->next2 == $watch)) {\nif ($watch->next1 == $watch) {\necho $indent.\"    1 *RECURSION*\";\n}\nif ($watch->next2 == $watch) {\necho $indent.\"    2 *RECURSION*\";\n}\n} elseif ($watch && ($watch->next1 || $watch->next2)) {\n$indent = str_replace(array('1', '2'), ' ', $indent);\n\narray_push($queue, array($indent.'    2 ', $watch->next2));\narray_push($queue, array($indent.'    1 ', $watch->next1));\n}\n}\n\necho \"\\n\";\n}\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\DependencyResolver;\n\n\n\n\nclass RuleSetIterator implements \\Iterator\n{\nprotected $rules;\nprotected $types;\n\nprotected $currentOffset;\nprotected $currentType;\nprotected $currentTypeOffset;\n\npublic function __construct(array $rules)\n{\n$this->rules = $rules;\n$this->types = array_keys($rules);\nsort($this->types);\n\n$this->rewind();\n}\n\npublic function current()\n{\nreturn $this->rules[$this->currentType][$this->currentOffset];\n}\n\npublic function key()\n{\nreturn $this->currentType;\n}\n\npublic function next()\n{\n$this->currentOffset++;\n\nif (!isset($this->rules[$this->currentType])) {\nreturn;\n}\n\nif ($this->currentOffset >= sizeof($this->rules[$this->currentType])) {\n$this->currentOffset = 0;\n\ndo {\n$this->currentTypeOffset++;\n\nif (!isset($this->types[$this->currentTypeOffset])) {\n$this->currentType = -1;\nbreak;\n}\n\n$this->currentType = $this->types[$this->currentTypeOffset];\n} while (isset($this->types[$this->currentTypeOffset]) && !sizeof($this->rules[$this->currentType]));\n}\n}\n\npublic function rewind()\n{\n$this->currentOffset = 0;\n\n$this->currentTypeOffset = -1;\n$this->currentType = -1;\n\ndo {\n$this->currentTypeOffset++;\n\nif (!isset($this->types[$this->currentTypeOffset])) {\n$this->currentType = -1;\nbreak;\n}\n\n$this->currentType = $this->types[$this->currentTypeOffset];\n} while (isset($this->types[$this->currentTypeOffset]) && !sizeof($this->rules[$this->currentType]));\n}\n\npublic function valid()\n{\nreturn isset($this->rules[$this->currentType])\n&& isset($this->rules[$this->currentType][$this->currentOffset]);\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\DependencyResolver;\n\n\n\n\n\n\n\n\n\nclass RuleWatchChain extends \\SplDoublyLinkedList\n{\nprotected $offset = 0;\n\n\n\n\n\n\npublic function seek($offset)\n{\n$this->rewind();\nfor ($i = 0; $i < $offset; $i++, $this->next());\n}\n\n\n\n\n\n\n\n\n\npublic function remove()\n{\n$offset = $this->key();\n$this->offsetUnset($offset);\n$this->seek($offset);\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\DependencyResolver;\n\nuse Composer\\Repository\\RepositoryInterface;\n\n\n\n\nclass Solver\n{\nconst BRANCH_LITERALS = 0;\nconst BRANCH_LEVEL = 1;\n\nprotected $policy;\nprotected $pool;\nprotected $installed;\nprotected $rules;\nprotected $ruleSetGenerator;\nprotected $updateAll;\n\nprotected $addedMap = array();\nprotected $updateMap = array();\nprotected $watchGraph;\nprotected $decisions;\nprotected $installedMap;\n\nprotected $propagateIndex;\nprotected $branches = array();\nprotected $problems = array();\nprotected $learnedPool = array();\n\npublic function __construct(PolicyInterface $policy, Pool $pool, RepositoryInterface $installed)\n{\n$this->policy = $policy;\n$this->pool = $pool;\n$this->installed = $installed;\n$this->ruleSetGenerator = new RuleSetGenerator($policy, $pool);\n}\n\n\n private function makeAssertionRuleDecisions()\n{\n$decisionStart = count($this->decisions) - 1;\n\n$rulesCount = count($this->rules);\nfor ($ruleIndex = 0; $ruleIndex < $rulesCount; $ruleIndex++) {\n$rule = $this->rules->ruleById($ruleIndex);\n\nif (!$rule->isAssertion() || $rule->isDisabled()) {\ncontinue;\n}\n\n$literals = $rule->getLiterals();\n$literal = $literals[0];\n\nif (!$this->decisions->decided(abs($literal))) {\n$this->decisions->decide($literal, 1, $rule);\ncontinue;\n}\n\nif ($this->decisions->satisfy($literal)) {\ncontinue;\n}\n\n\n if (RuleSet::TYPE_LEARNED === $rule->getType()) {\n$rule->disable();\ncontinue;\n}\n\n$conflict = $this->decisions->decisionRule($literal);\n\nif ($conflict && RuleSet::TYPE_PACKAGE === $conflict->getType()) {\n\n$problem = new Problem($this->pool);\n\n$problem->addRule($rule);\n$problem->addRule($conflict);\n$this->disableProblem($rule);\n$this->problems[] = $problem;\ncontinue;\n}\n\n\n $problem = new Problem($this->pool);\n$problem->addRule($rule);\n$problem->addRule($conflict);\n\n\n \n foreach ($this->rules->getIteratorFor(RuleSet::TYPE_JOB) as $assertRule) {\nif ($assertRule->isDisabled() || !$assertRule->isAssertion()) {\ncontinue;\n}\n\n$assertRuleLiterals = $assertRule->getLiterals();\n$assertRuleLiteral = $assertRuleLiterals[0];\n\nif (abs($literal) !== abs($assertRuleLiteral)) {\ncontinue;\n}\n\n$problem->addRule($assertRule);\n$this->disableProblem($assertRule);\n}\n$this->problems[] = $problem;\n\n$this->decisions->resetToOffset($decisionStart);\n$ruleIndex = -1;\n}\n}\n\nprotected function setupInstalledMap()\n{\n$this->installedMap = array();\nforeach ($this->installed->getPackages() as $package) {\n$this->installedMap[$package->getId()] = $package;\n}\n\nforeach ($this->jobs as $job) {\nswitch ($job['cmd']) {\ncase 'update':\nforeach ($job['packages'] as $package) {\nif (isset($this->installedMap[$package->getId()])) {\n$this->updateMap[$package->getId()] = true;\n}\n}\nbreak;\n\ncase 'update-all':\nforeach ($this->installedMap as $package) {\n$this->updateMap[$package->getId()] = true;\n}\nbreak;\n\ncase 'install':\nif (!$job['packages']) {\n$problem = new Problem($this->pool);\n$problem->addRule(new Rule($this->pool, array(), null, null, $job));\n$this->problems[] = $problem;\n}\nbreak;\n}\n}\n}\n\npublic function solve(Request $request)\n{\n$this->jobs = $request->getJobs();\n\n$this->setupInstalledMap();\n\n$this->decisions = new Decisions($this->pool);\n\n$this->rules = $this->ruleSetGenerator->getRulesFor($this->jobs, $this->installedMap);\n$this->watchGraph = new RuleWatchGraph;\n\nforeach ($this->rules as $rule) {\n$this->watchGraph->insert(new RuleWatchNode($rule));\n}\n\n\n$this->makeAssertionRuleDecisions();\n\n$this->runSat(true);\n\n\n foreach ($this->installedMap as $packageId => $void) {\nif ($this->decisions->undecided($packageId)) {\n$this->decisions->decide(-$packageId, 1, null);\n}\n}\n\nif ($this->problems) {\nthrow new SolverProblemsException($this->problems, $this->installedMap);\n}\n\n$transaction = new Transaction($this->policy, $this->pool, $this->installedMap, $this->decisions);\n\nreturn $transaction->getOperations();\n}\n\nprotected function literalFromId($id)\n{\n$package = $this->pool->packageById(abs($id));\n\nreturn new Literal($package, $id > 0);\n}\n\n\n\n\n\n\n\n\n\n\nprotected function propagate($level)\n{\nwhile ($this->decisions->validOffset($this->propagateIndex)) {\n$decision = $this->decisions->atOffset($this->propagateIndex);\n\n$conflict = $this->watchGraph->propagateLiteral(\n$decision[Decisions::DECISION_LITERAL],\n$level,\n$this->decisions\n);\n\n$this->propagateIndex++;\n\nif ($conflict) {\nreturn $conflict;\n}\n}\n\nreturn null;\n}\n\n\n\n\nprivate function revert($level)\n{\nwhile (!$this->decisions->isEmpty()) {\n$literal = $this->decisions->lastLiteral();\n\nif ($this->decisions->undecided($literal)) {\nbreak;\n}\n\n$decisionLevel = $this->decisions->decisionLevel($literal);\n\nif ($decisionLevel <= $level) {\nbreak;\n}\n\n$this->decisions->revertLast();\n$this->propagateIndex = count($this->decisions);\n}\n\nwhile (!empty($this->branches) && $this->branches[count($this->branches) - 1][self::BRANCH_LEVEL] >= $level) {\narray_pop($this->branches);\n}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nprivate function setPropagateLearn($level, $literal, $disableRules, Rule $rule)\n{\n$level++;\n\n$this->decisions->decide($literal, $level, $rule);\n\nwhile (true) {\n$rule = $this->propagate($level);\n\nif (!$rule) {\nbreak;\n}\n\nif ($level == 1) {\nreturn $this->analyzeUnsolvable($rule, $disableRules);\n}\n\n\n list($learnLiteral, $newLevel, $newRule, $why) = $this->analyze($level, $rule);\n\nif ($newLevel <= 0 || $newLevel >= $level) {\nthrow new SolverBugException(\n\"Trying to revert to invalid level \".(int) $newLevel.\" from level \".(int) $level.\".\"\n);\n} elseif (!$newRule) {\nthrow new SolverBugException(\n\"No rule was learned from analyzing $rule at level $level.\"\n);\n}\n\n$level = $newLevel;\n\n$this->revert($level);\n\n$this->rules->add($newRule, RuleSet::TYPE_LEARNED);\n\n$this->learnedWhy[$newRule->getId()] = $why;\n\n$ruleNode = new RuleWatchNode($newRule);\n$ruleNode->watch2OnHighest($this->decisions);\n$this->watchGraph->insert($ruleNode);\n\n$this->decisions->decide($learnLiteral, $level, $newRule);\n}\n\nreturn $level;\n}\n\nprivate function selectAndInstall($level, array $decisionQueue, $disableRules, Rule $rule)\n{\n\n $literals = $this->policy->selectPreferedPackages($this->pool, $this->installedMap, $decisionQueue, $rule->getRequiredPackage());\n\n$selectedLiteral = array_shift($literals);\n\n\n if (count($literals)) {\n$this->branches[] = array($literals, $level);\n}\n\nreturn $this->setPropagateLearn($level, $selectedLiteral, $disableRules, $rule);\n}\n\nprotected function analyze($level, $rule)\n{\n$analyzedRule = $rule;\n$ruleLevel = 1;\n$num = 0;\n$l1num = 0;\n$seen = array();\n$learnedLiterals = array(null);\n\n$decisionId = count($this->decisions);\n\n$this->learnedPool[] = array();\n\nwhile (true) {\n$this->learnedPool[count($this->learnedPool) - 1][] = $rule;\n\nforeach ($rule->getLiterals() as $literal) {\n\n if ($this->decisions->satisfy($literal)) {\ncontinue;\n}\n\nif (isset($seen[abs($literal)])) {\ncontinue;\n}\n$seen[abs($literal)] = true;\n\n$l = $this->decisions->decisionLevel($literal);\n\nif (1 === $l) {\n$l1num++;\n} elseif ($level === $l) {\n$num++;\n} else {\n\n $learnedLiterals[] = $literal;\n\nif ($l > $ruleLevel) {\n$ruleLevel = $l;\n}\n}\n}\n\n$l1retry = true;\nwhile ($l1retry) {\n$l1retry = false;\n\nif (!$num && !--$l1num) {\n\n break 2;\n}\n\nwhile (true) {\nif ($decisionId <= 0) {\nthrow new SolverBugException(\n\"Reached invalid decision id $decisionId while looking through $rule for a literal present in the analyzed rule $analyzedRule.\"\n);\n}\n\n$decisionId--;\n\n$decision = $this->decisions->atOffset($decisionId);\n$literal = $decision[Decisions::DECISION_LITERAL];\n\nif (isset($seen[abs($literal)])) {\nbreak;\n}\n}\n\nunset($seen[abs($literal)]);\n\nif ($num && 0 === --$num) {\n$learnedLiterals[0] = -abs($literal);\n\nif (!$l1num) {\nbreak 2;\n}\n\nforeach ($learnedLiterals as $i => $learnedLiteral) {\nif ($i !== 0) {\nunset($seen[abs($learnedLiteral)]);\n}\n}\n\n $l1num++;\n$l1retry = true;\n}\n}\n\n$decision = $this->decisions->atOffset($decisionId);\n$rule = $decision[Decisions::DECISION_REASON];\n}\n\n$why = count($this->learnedPool) - 1;\n\nif (!$learnedLiterals[0]) {\nthrow new SolverBugException(\n\"Did not find a learnable literal in analyzed rule $analyzedRule.\"\n);\n}\n\n$newRule = new Rule($this->pool, $learnedLiterals, Rule::RULE_LEARNED, $why);\n\nreturn array($learnedLiterals[0], $ruleLevel, $newRule, $why);\n}\n\nprivate function analyzeUnsolvableRule($problem, $conflictRule)\n{\n$why = $conflictRule->getId();\n\nif ($conflictRule->getType() == RuleSet::TYPE_LEARNED) {\n$learnedWhy = $this->learnedWhy[$why];\n$problemRules = $this->learnedPool[$learnedWhy];\n\nforeach ($problemRules as $problemRule) {\n$this->analyzeUnsolvableRule($problem, $problemRule);\n}\n\nreturn;\n}\n\nif ($conflictRule->getType() == RuleSet::TYPE_PACKAGE) {\n\n return;\n}\n\n$problem->nextSection();\n$problem->addRule($conflictRule);\n}\n\nprivate function analyzeUnsolvable($conflictRule, $disableRules)\n{\n$problem = new Problem($this->pool);\n$problem->addRule($conflictRule);\n\n$this->analyzeUnsolvableRule($problem, $conflictRule);\n\n$this->problems[] = $problem;\n\n$seen = array();\n$literals = $conflictRule->getLiterals();\n\nforeach ($literals as $literal) {\n\n if ($this->decisions->satisfy($literal)) {\ncontinue;\n}\n$seen[abs($literal)] = true;\n}\n\nforeach ($this->decisions as $decision) {\n$literal = $decision[Decisions::DECISION_LITERAL];\n\n\n if (!isset($seen[abs($literal)])) {\ncontinue;\n}\n\n$why = $decision[Decisions::DECISION_REASON];\n\n$problem->addRule($why);\n$this->analyzeUnsolvableRule($problem, $why);\n\n$literals = $why->getLiterals();\n\nforeach ($literals as $literal) {\n\n if ($this->decisions->satisfy($literal)) {\ncontinue;\n}\n$seen[abs($literal)] = true;\n}\n}\n\nif ($disableRules) {\nforeach ($this->problems[count($this->problems) - 1] as $reason) {\n$this->disableProblem($reason['rule']);\n}\n\n$this->resetSolver();\n\nreturn 1;\n}\n\nreturn 0;\n}\n\nprivate function disableProblem($why)\n{\n$job = $why->getJob();\n\nif (!$job) {\n$why->disable();\n\nreturn;\n}\n\n\n foreach ($this->rules as $rule) {\nif ($job === $rule->getJob()) {\n$rule->disable();\n}\n}\n}\n\nprivate function resetSolver()\n{\n$this->decisions->reset();\n\n$this->propagateIndex = 0;\n$this->branches = array();\n\n$this->enableDisableLearnedRules();\n$this->makeAssertionRuleDecisions();\n}\n\n\n\n\n\n\n\n\nprivate function enableDisableLearnedRules()\n{\nforeach ($this->rules->getIteratorFor(RuleSet::TYPE_LEARNED) as $rule) {\n$why = $this->learnedWhy[$rule->getId()];\n$problemRules = $this->learnedPool[$why];\n\n$foundDisabled = false;\nforeach ($problemRules as $problemRule) {\nif ($problemRule->isDisabled()) {\n$foundDisabled = true;\nbreak;\n}\n}\n\nif ($foundDisabled && $rule->isEnabled()) {\n$rule->disable();\n} elseif (!$foundDisabled && $rule->isDisabled()) {\n$rule->enable();\n}\n}\n}\n\nprivate function runSat($disableRules = true)\n{\n$this->propagateIndex = 0;\n\n\n \n \n \n \n \n \n \n \n\n$decisionQueue = array();\n$decisionSupplementQueue = array();\n$disableRules = array();\n\n$level = 1;\n$systemLevel = $level + 1;\n$installedPos = 0;\n\nwhile (true) {\n\nif (1 === $level) {\n$conflictRule = $this->propagate($level);\nif (null !== $conflictRule) {\nif ($this->analyzeUnsolvable($conflictRule, $disableRules)) {\ncontinue;\n}\n\nreturn;\n}\n}\n\n\n if ($level < $systemLevel) {\n$iterator = $this->rules->getIteratorFor(RuleSet::TYPE_JOB);\nforeach ($iterator as $rule) {\nif ($rule->isEnabled()) {\n$decisionQueue = array();\n$noneSatisfied = true;\n\nforeach ($rule->getLiterals() as $literal) {\nif ($this->decisions->satisfy($literal)) {\n$noneSatisfied = false;\nbreak;\n}\nif ($literal > 0 && $this->decisions->undecided($literal)) {\n$decisionQueue[] = $literal;\n}\n}\n\nif ($noneSatisfied && count($decisionQueue)) {\n\n \n if (count($this->installed) != count($this->updateMap)) {\n$prunedQueue = array();\nforeach ($decisionQueue as $literal) {\nif (isset($this->installedMap[abs($literal)])) {\n$prunedQueue[] = $literal;\nif (isset($this->updateMap[abs($literal)])) {\n$prunedQueue = $decisionQueue;\nbreak;\n}\n}\n}\n$decisionQueue = $prunedQueue;\n}\n}\n\nif ($noneSatisfied && count($decisionQueue)) {\n\n$oLevel = $level;\n$level = $this->selectAndInstall($level, $decisionQueue, $disableRules, $rule);\n\nif (0 === $level) {\nreturn;\n}\nif ($level <= $oLevel) {\nbreak;\n}\n}\n}\n}\n\n$systemLevel = $level + 1;\n\n\n $iterator->next();\nif ($iterator->valid()) {\ncontinue;\n}\n}\n\nif ($level < $systemLevel) {\n$systemLevel = $level;\n}\n\nfor ($i = 0, $n = 0; $n < count($this->rules); $i++, $n++) {\nif ($i == count($this->rules)) {\n$i = 0;\n}\n\n$rule = $this->rules->ruleById($i);\n$literals = $rule->getLiterals();\n\nif ($rule->isDisabled()) {\ncontinue;\n}\n\n$decisionQueue = array();\n\n\n \n \n \n \n \n foreach ($literals as $literal) {\nif ($literal <= 0) {\nif (!$this->decisions->decidedInstall(abs($literal))) {\ncontinue 2; \n }\n} else {\nif ($this->decisions->decidedInstall(abs($literal))) {\ncontinue 2; \n }\nif ($this->decisions->undecided(abs($literal))) {\n$decisionQueue[] = $literal;\n}\n}\n}\n\n\n if (count($decisionQueue) < 2) {\ncontinue;\n}\n\n$oLevel = $level;\n$level = $this->selectAndInstall($level, $decisionQueue, $disableRules, $rule);\n\nif (0 === $level) {\nreturn;\n}\n\n\n $n = -1;\n}\n\nif ($level < $systemLevel) {\ncontinue;\n}\n\n\n if (count($this->branches)) {\n\n$lastLiteral = null;\n$lastLevel = null;\n$lastBranchIndex = 0;\n$lastBranchOffset = 0;\n$l = 0;\n\nfor ($i = count($this->branches) - 1; $i >= 0; $i--) {\nlist($literals, $l) = $this->branches[$i];\n\nforeach ($literals as $offset => $literal) {\nif ($literal && $literal > 0 && $this->decisions->decisionLevel($literal) > $l + 1) {\n$lastLiteral = $literal;\n$lastBranchIndex = $i;\n$lastBranchOffset = $offset;\n$lastLevel = $l;\n}\n}\n}\n\nif ($lastLiteral) {\nunset($this->branches[$lastBranchIndex][self::BRANCH_LITERALS][$lastBranchOffset]);\narray_values($this->branches[$lastBranchIndex][self::BRANCH_LITERALS]);\n\n$level = $lastLevel;\n$this->revert($level);\n\n$why = $this->decisions->lastReason();\n\n$oLevel = $level;\n$level = $this->setPropagateLearn($level, $lastLiteral, $disableRules, $why);\n\nif ($level == 0) {\nreturn;\n}\n\ncontinue;\n}\n}\n\nbreak;\n}\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\DependencyResolver;\n\nuse Composer\\Package\\LinkConstraint\\LinkConstraintInterface;\n\n\n\n\nclass Request\n{\nprotected $jobs;\nprotected $pool;\n\npublic function __construct(Pool $pool)\n{\n$this->pool = $pool;\n$this->jobs = array();\n}\n\npublic function install($packageName, LinkConstraintInterface $constraint = null)\n{\n$this->addJob($packageName, 'install', $constraint);\n}\n\npublic function update($packageName, LinkConstraintInterface $constraint = null)\n{\n$this->addJob($packageName, 'update', $constraint);\n}\n\npublic function remove($packageName, LinkConstraintInterface $constraint = null)\n{\n$this->addJob($packageName, 'remove', $constraint);\n}\n\nprotected function addJob($packageName, $cmd, LinkConstraintInterface $constraint = null)\n{\n$packageName = strtolower($packageName);\n$packages = $this->pool->whatProvides($packageName, $constraint);\n\n$this->jobs[] = array(\n'packages' => $packages,\n'cmd' => $cmd,\n'packageName' => $packageName,\n'constraint' => $constraint,\n);\n}\n\npublic function updateAll()\n{\n$this->jobs[] = array('cmd' => 'update-all', 'packages' => array());\n}\n\npublic function getJobs()\n{\nreturn $this->jobs;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\DependencyResolver;\n\n\n\n\n\n\nclass Problem\n{\n\n\n\n\nprotected $reasonSeen;\n\n\n\n\n\nprotected $reasons = array();\n\nprotected $section = 0;\n\nprotected $pool;\n\npublic function __construct(Pool $pool)\n{\n$this->pool = $pool;\n}\n\n\n\n\n\n\npublic function addRule(Rule $rule)\n{\n$this->addReason($rule->getId(), array(\n'rule' => $rule,\n'job' => $rule->getJob(),\n));\n}\n\n\n\n\n\n\npublic function getReasons()\n{\nreturn $this->reasons;\n}\n\n\n\n\n\n\n\npublic function getPrettyString(array $installedMap = array())\n{\n$reasons = call_user_func_array('array_merge', array_reverse($this->reasons));\n\nif (count($reasons) === 1) {\nreset($reasons);\n$reason = current($reasons);\n\n$rule = $reason['rule'];\n$job = $reason['job'];\n\nif ($job && $job['cmd'] === 'install' && empty($job['packages'])) {\n\n if (0 === stripos($job['packageName'], 'ext-')) {\n$ext = substr($job['packageName'], 4);\n$error = extension_loaded($ext) ? 'has the wrong version ('.phpversion($ext).') installed' : 'is missing from your system';\n\nreturn \"\\n    - The requested PHP extension \".$job['packageName'].$this->constraintToText($job['constraint']).' '.$error.'.';\n}\n\n\n if (0 === stripos($job['packageName'], 'lib-')) {\nif (strtolower($job['packageName']) === 'lib-icu') {\n$error = extension_loaded('intl') ? 'has the wrong version installed, try upgrading the intl extension.' : 'is missing from your system, make sure the intl extension is loaded.';\n\nreturn \"\\n    - The requested linked library \".$job['packageName'].$this->constraintToText($job['constraint']).' '.$error;\n}\n\nreturn \"\\n    - The requested linked library \".$job['packageName'].$this->constraintToText($job['constraint']).' has the wrong version installed or is missing from your system, make sure to load the extension providing it.';\n}\n\nif (!preg_match('{^[A-Za-z0-9_./-]+$}', $job['packageName'])) {\n$illegalChars = preg_replace('{[A-Za-z0-9_./-]+}', '', $job['packageName']);\n\nreturn \"\\n    - The requested package \".$job['packageName'].' could not be found, it looks like its name is invalid, \"'.$illegalChars.'\" is not allowed in package names.';\n}\n\nif (!$this->pool->whatProvides($job['packageName'])) {\nreturn \"\\n    - The requested package \".$job['packageName'].' could not be found in any version, there may be a typo in the package name.';\n}\n\nreturn \"\\n    - The requested package \".$job['packageName'].$this->constraintToText($job['constraint']).' could not be found.';\n}\n}\n\n$messages = array();\n\nforeach ($reasons as $reason) {\n$rule = $reason['rule'];\n$job = $reason['job'];\n\nif ($job) {\n$messages[] = $this->jobToText($job);\n} elseif ($rule) {\nif ($rule instanceof Rule) {\n$messages[] = $rule->getPrettyString($installedMap);\n}\n}\n}\n\nreturn \"\\n    - \".implode(\"\\n    - \", $messages);\n}\n\n\n\n\n\n\n\nprotected function addReason($id, $reason)\n{\nif (!isset($this->reasonSeen[$id])) {\n$this->reasonSeen[$id] = true;\n$this->reasons[$this->section][] = $reason;\n}\n}\n\npublic function nextSection()\n{\n$this->section++;\n}\n\n\n\n\n\n\n\nprotected function jobToText($job)\n{\nswitch ($job['cmd']) {\ncase 'install':\nif (!$job['packages']) {\nreturn 'No package found to satisfy install request for '.$job['packageName'].$this->constraintToText($job['constraint']);\n}\n\nreturn 'Installation request for '.$job['packageName'].$this->constraintToText($job['constraint']).' -> satisfiable by '.$this->getPackageList($job['packages']).'.';\ncase 'update':\nreturn 'Update request for '.$job['packageName'].$this->constraintToText($job['constraint']).'.';\ncase 'remove':\nreturn 'Removal request for '.$job['packageName'].$this->constraintToText($job['constraint']).'';\n}\n\nreturn 'Job(cmd='.$job['cmd'].', target='.$job['packageName'].', packages=['.$this->getPackageList($job['packages']).'])';\n}\n\nprotected function getPackageList($packages)\n{\n$prepared = array();\nforeach ($packages as $package) {\n$prepared[$package->getName()]['name'] = $package->getPrettyName();\n$prepared[$package->getName()]['versions'][$package->getVersion()] = $package->getPrettyVersion();\n}\nforeach ($prepared as $name => $package) {\n$prepared[$name] = $package['name'].'['.implode(', ', $package['versions']).']';\n}\n\nreturn implode(', ', $prepared);\n}\n\n\n\n\n\n\n\nprotected function constraintToText($constraint)\n{\nreturn ($constraint) ? ' '.$constraint->getPrettyString() : '';\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\DependencyResolver;\n\n\n\n\n\n\n\n\n\n\n\nclass RuleWatchGraph\n{\nprotected $watchChains = array();\n\n\n\n\n\n\n\n\n\n\n\n\n\npublic function insert(RuleWatchNode $node)\n{\nif ($node->getRule()->isAssertion()) {\nreturn;\n}\n\nforeach (array($node->watch1, $node->watch2) as $literal) {\nif (!isset($this->watchChains[$literal])) {\n$this->watchChains[$literal] = new RuleWatchChain;\n}\n\n$this->watchChains[$literal]->unshift($node);\n}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npublic function propagateLiteral($decidedLiteral, $level, $decisions)\n{\n\n \n \n $literal = -$decidedLiteral;\n\nif (!isset($this->watchChains[$literal])) {\nreturn null;\n}\n\n$chain = $this->watchChains[$literal];\n\n$chain->rewind();\nwhile ($chain->valid()) {\n$node = $chain->current();\n$otherWatch = $node->getOtherWatch($literal);\n\nif (!$node->getRule()->isDisabled() && !$decisions->satisfy($otherWatch)) {\n$ruleLiterals = $node->getRule()->getLiterals();\n\n$alternativeLiterals = array_filter($ruleLiterals, function ($ruleLiteral) use ($literal, $otherWatch, $decisions) {\nreturn $literal !== $ruleLiteral &&\n$otherWatch !== $ruleLiteral &&\n!$decisions->conflict($ruleLiteral);\n});\n\nif ($alternativeLiterals) {\nreset($alternativeLiterals);\n$this->moveWatch($literal, current($alternativeLiterals), $node);\ncontinue;\n}\n\nif ($decisions->conflict($otherWatch)) {\nreturn $node->getRule();\n}\n\n$decisions->decide($otherWatch, $level, $node->getRule());\n}\n\n$chain->next();\n}\n\nreturn null;\n}\n\n\n\n\n\n\n\n\n\n\nprotected function moveWatch($fromLiteral, $toLiteral, $node)\n{\nif (!isset($this->watchChains[$toLiteral])) {\n$this->watchChains[$toLiteral] = new RuleWatchChain;\n}\n\n$node->moveWatch($fromLiteral, $toLiteral);\n$this->watchChains[$fromLiteral]->remove();\n$this->watchChains[$toLiteral]->unshift($node);\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Config;\n\n\n\n\n\n\n\ninterface ConfigSourceInterface\n{\n\n\n\n\n\n\npublic function addRepository($name, $config);\n\n\n\n\n\n\npublic function removeRepository($name);\n\n\n\n\n\n\n\npublic function addConfigSetting($name, $value);\n\n\n\n\n\n\npublic function removeConfigSetting($name);\n\n\n\n\n\n\n\n\npublic function addLink($type, $name, $value);\n\n\n\n\n\n\n\npublic function removeLink($type, $name);\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Config;\n\nuse Composer\\Json\\JsonFile;\nuse Composer\\Json\\JsonManipulator;\n\n\n\n\n\n\n\nclass JsonConfigSource implements ConfigSourceInterface\n{\nprivate $file;\nprivate $manipulator;\n\n\n\n\n\n\npublic function __construct(JsonFile $file)\n{\n$this->file = $file;\n}\n\n\n\n\npublic function addRepository($name, $config)\n{\n$this->manipulateJson('addRepository', $name, $config, function (&$config, $repo, $repoConfig) {\n$config['repositories'][$repo] = $repoConfig;\n});\n}\n\n\n\n\npublic function removeRepository($name)\n{\n$this->manipulateJson('removeRepository', $name, function (&$config, $repo) {\nunset($config['repositories'][$repo]);\n});\n}\n\n\n\n\npublic function addConfigSetting($name, $value)\n{\n$this->manipulateJson('addConfigSetting', $name, $value, function (&$config, $key, $val) {\n$config['config'][$key] = $val;\n});\n}\n\n\n\n\npublic function removeConfigSetting($name)\n{\n$this->manipulateJson('removeConfigSetting', $name, function (&$config, $key) {\nunset($config['config'][$key]);\n});\n}\n\n\n\n\npublic function addLink($type, $name, $value)\n{\n$this->manipulateJson('addLink', $type, $name, $value, function (&$config, $type, $name, $value) {\n$config[$type][$name] = $value;\n});\n}\n\n\n\n\npublic function removeLink($type, $name)\n{\n$this->manipulateJson('removeSubNode', $type, $name, function (&$config, $type, $name) {\nunset($config[$type][$name]);\n});\n}\n\nprotected function manipulateJson($method, $args, $fallback)\n{\n$args = func_get_args();\n\n array_shift($args);\n$fallback = array_pop($args);\n\nif ($this->file->exists()) {\n$contents = file_get_contents($this->file->getPath());\n} else {\n$contents = \"{\\n    \\\"config\\\": {\\n    }\\n}\\n\";\n}\n$manipulator = new JsonManipulator($contents);\n\n$newFile = !$this->file->exists();\n\n\n if (call_user_func_array(array($manipulator, $method), $args)) {\nfile_put_contents($this->file->getPath(), $manipulator->getContents());\n} else {\n\n $config = $this->file->read();\narray_unshift($args, $config);\ncall_user_func_array($fallback, $args);\n$this->file->write($config);\n}\n\nif ($newFile) {\nchmod($this->file->getPath(), 0600);\n}\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer;\n\nuse Composer\\Config\\JsonConfigSource;\nuse Composer\\Json\\JsonFile;\nuse Composer\\IO\\IOInterface;\nuse Composer\\Package\\Archiver;\nuse Composer\\Repository\\ComposerRepository;\nuse Composer\\Repository\\RepositoryManager;\nuse Composer\\Util\\ProcessExecutor;\nuse Composer\\Util\\RemoteFilesystem;\nuse Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle;\nuse Composer\\Script\\EventDispatcher;\nuse Composer\\Autoload\\AutoloadGenerator;\n\n\n\n\n\n\n\n\nclass Factory\n{\n\n\n\n\npublic static function createConfig()\n{\n\n $home = getenv('COMPOSER_HOME');\n$cacheDir = getenv('COMPOSER_CACHE_DIR');\nif (!$home) {\nif (defined('PHP_WINDOWS_VERSION_MAJOR')) {\nif (!getenv('APPDATA')) {\nthrow new \\RuntimeException('The APPDATA or COMPOSER_HOME environment variable must be set for composer to run correctly');\n}\n$home = strtr(getenv('APPDATA'), '\\\\', '/') . '/Composer';\n} else {\nif (!getenv('HOME')) {\nthrow new \\RuntimeException('The HOME or COMPOSER_HOME environment variable must be set for composer to run correctly');\n}\n$home = rtrim(getenv('HOME'), '/') . '/.composer';\n}\n}\nif (!$cacheDir) {\nif (defined('PHP_WINDOWS_VERSION_MAJOR')) {\nif ($cacheDir = getenv('LOCALAPPDATA')) {\n$cacheDir .= '/Composer';\n} else {\n$cacheDir = getenv('APPDATA') . '/Composer/cache';\n}\n$cacheDir = strtr($cacheDir, '\\\\', '/');\n} else {\n$cacheDir = $home.'/cache';\n}\n}\n\n\n \n \n foreach (array($home, $cacheDir) as $dir) {\nif (!file_exists($dir . '/.htaccess')) {\nif (!is_dir($dir)) {\n@mkdir($dir, 0777, true);\n}\n@file_put_contents($dir . '/.htaccess', 'Deny from all');\n}\n}\n\n$config = new Config();\n\n\n $config->merge(array('config' => array('home' => $home, 'cache-dir' => $cacheDir)));\n\n$file = new JsonFile($home.'/config.json');\nif ($file->exists()) {\n$config->merge($file->read());\n}\n$config->setConfigSource(new JsonConfigSource($file));\n\n\n $legacyPaths = array(\n'cache-repo-dir' => array('/cache' => '/http*', '/cache.svn' => '/*', '/cache.github' => '/*'),\n'cache-vcs-dir' => array('/cache.git' => '/*', '/cache.hg' => '/*'),\n'cache-files-dir' => array('/cache.files' => '/*'),\n);\nforeach ($legacyPaths as $key => $oldPaths) {\nforeach ($oldPaths as $oldPath => $match) {\n$dir = $config->get($key);\nif ('/cache.github' === $oldPath) {\n$dir .= '/github.com';\n}\n$oldPath = $config->get('home').$oldPath;\n$oldPathMatch = $oldPath . $match;\nif (is_dir($oldPath) && $dir !== $oldPath) {\nif (!is_dir($dir)) {\nif (!@mkdir($dir, 0777, true)) {\ncontinue;\n}\n}\nif (is_array($children = glob($oldPathMatch))) {\nforeach ($children as $child) {\n@rename($child, $dir.'/'.basename($child));\n}\n}\n@rmdir($oldPath);\n}\n}\n}\n\nreturn $config;\n}\n\npublic static function getComposerFile()\n{\nreturn trim(getenv('COMPOSER')) ?: 'composer.json';\n}\n\npublic static function createAdditionalStyles()\n{\nreturn array(\n'highlight' => new OutputFormatterStyle('red'),\n'warning' => new OutputFormatterStyle('black', 'yellow'),\n);\n}\n\npublic static function createDefaultRepositories(IOInterface $io = null, Config $config = null, RepositoryManager $rm = null)\n{\n$repos = array();\n\nif (!$config) {\n$config = static::createConfig();\n}\nif (!$rm) {\nif (!$io) {\nthrow new \\InvalidArgumentException('This function requires either an IOInterface or a RepositoryManager');\n}\n$factory = new static;\n$rm = $factory->createRepositoryManager($io, $config);\n}\n\nforeach ($config->getRepositories() as $index => $repo) {\nif (!is_array($repo)) {\nthrow new \\UnexpectedValueException('Repository '.$index.' ('.json_encode($repo).') should be an array, '.gettype($repo).' given');\n}\nif (!isset($repo['type'])) {\nthrow new \\UnexpectedValueException('Repository '.$index.' ('.json_encode($repo).') must have a type defined');\n}\n$name = is_int($index) && isset($repo['url']) ? preg_replace('{^https?://}i', '', $repo['url']) : $index;\nwhile (isset($repos[$name])) {\n$name .= '2';\n}\n$repos[$name] = $rm->createRepository($repo['type'], $repo);\n}\n\nreturn $repos;\n}\n\n\n\n\n\n\n\n\n\n\n\npublic function createComposer(IOInterface $io, $localConfig = null)\n{\n\n if (null === $localConfig) {\n$localConfig = static::getComposerFile();\n}\n\nif (is_string($localConfig)) {\n$composerFile = $localConfig;\n$file = new JsonFile($localConfig, new RemoteFilesystem($io));\n\nif (!$file->exists()) {\nif ($localConfig === 'composer.json') {\n$message = 'Composer could not find a composer.json file in '.getcwd();\n} else {\n$message = 'Composer could not find the config file: '.$localConfig;\n}\n$instructions = 'To initialize a project, please create a composer.json file as described in the http://getcomposer.org/ \"Getting Started\" section';\nthrow new \\InvalidArgumentException($message.PHP_EOL.$instructions);\n}\n\n$file->validateSchema(JsonFile::LAX_SCHEMA);\n$localConfig = $file->read();\n}\n\n\n $config = static::createConfig();\n$config->merge($localConfig);\n\n\n if ($tokens = $config->get('github-oauth')) {\nforeach ($tokens as $domain => $token) {\nif (!preg_match('{^[a-z0-9]+$}', $token)) {\nthrow new \\UnexpectedValueException('Your github oauth token for '.$domain.' contains invalid characters: \"'.$token.'\"');\n}\n$io->setAuthentication($domain, $token, 'x-oauth-basic');\n}\n}\n\n$vendorDir = $config->get('vendor-dir');\n$binDir = $config->get('bin-dir');\n\n\n ProcessExecutor::setTimeout((int) $config->get('process-timeout'));\n\n\n $rm = $this->createRepositoryManager($io, $config);\n\n\n $this->addLocalRepository($rm, $vendorDir);\n\n\n $loader = new Package\\Loader\\RootPackageLoader($rm, $config);\n$package = $loader->load($localConfig);\n\n\n $dm = $this->createDownloadManager($io, $config);\n\n\n $im = $this->createInstallationManager();\n\n\n $composer = new Composer();\n$composer->setConfig($config);\n$composer->setPackage($package);\n$composer->setRepositoryManager($rm);\n$composer->setDownloadManager($dm);\n$composer->setInstallationManager($im);\n\n\n $dispatcher = new EventDispatcher($composer, $io);\n$composer->setEventDispatcher($dispatcher);\n\n\n $generator = new AutoloadGenerator($dispatcher);\n$composer->setAutoloadGenerator($generator);\n\n\n $this->createDefaultInstallers($im, $composer, $io);\n\n\n $this->purgePackages($rm, $im);\n\n\n if (isset($composerFile)) {\n$lockFile = \"json\" === pathinfo($composerFile, PATHINFO_EXTENSION)\n? substr($composerFile, 0, -4).'lock'\n: $composerFile . '.lock';\n$locker = new Package\\Locker(new JsonFile($lockFile, new RemoteFilesystem($io)), $rm, $im, md5_file($composerFile));\n$composer->setLocker($locker);\n}\n\nreturn $composer;\n}\n\n\n\n\n\n\nprotected function createRepositoryManager(IOInterface $io, Config $config)\n{\n$rm = new RepositoryManager($io, $config);\n$rm->setRepositoryClass('composer', 'Composer\\Repository\\ComposerRepository');\n$rm->setRepositoryClass('vcs', 'Composer\\Repository\\VcsRepository');\n$rm->setRepositoryClass('package', 'Composer\\Repository\\PackageRepository');\n$rm->setRepositoryClass('pear', 'Composer\\Repository\\PearRepository');\n$rm->setRepositoryClass('git', 'Composer\\Repository\\VcsRepository');\n$rm->setRepositoryClass('svn', 'Composer\\Repository\\VcsRepository');\n$rm->setRepositoryClass('hg', 'Composer\\Repository\\VcsRepository');\n$rm->setRepositoryClass('artifact', 'Composer\\Repository\\ArtifactRepository');\n\nreturn $rm;\n}\n\n\n\n\n\nprotected function addLocalRepository(RepositoryManager $rm, $vendorDir)\n{\n$rm->setLocalRepository(new Repository\\InstalledFilesystemRepository(new JsonFile($vendorDir.'/composer/installed.json')));\n}\n\n\n\n\n\n\npublic function createDownloadManager(IOInterface $io, Config $config)\n{\n$cache = null;\nif ($config->get('cache-files-ttl') > 0) {\n$cache = new Cache($io, $config->get('cache-files-dir'), 'a-z0-9_./');\n}\n\n$dm = new Downloader\\DownloadManager();\n$dm->setDownloader('git', new Downloader\\GitDownloader($io, $config));\n$dm->setDownloader('svn', new Downloader\\SvnDownloader($io, $config));\n$dm->setDownloader('hg', new Downloader\\HgDownloader($io, $config));\n$dm->setDownloader('zip', new Downloader\\ZipDownloader($io, $config, $cache));\n$dm->setDownloader('tar', new Downloader\\TarDownloader($io, $config, $cache));\n$dm->setDownloader('phar', new Downloader\\PharDownloader($io, $config, $cache));\n$dm->setDownloader('file', new Downloader\\FileDownloader($io, $config, $cache));\n\nreturn $dm;\n}\n\n\n\n\n\n\n\npublic function createArchiveManager(Config $config, Downloader\\DownloadManager $dm = null)\n{\nif (null === $dm) {\n$dm = $this->createDownloadManager(new IO\\NullIO(), $config);\n}\n\n$am = new Archiver\\ArchiveManager($dm);\n$am->addArchiver(new Archiver\\PharArchiver);\n\nreturn $am;\n}\n\n\n\n\nprotected function createInstallationManager()\n{\nreturn new Installer\\InstallationManager();\n}\n\n\n\n\n\n\nprotected function createDefaultInstallers(Installer\\InstallationManager $im, Composer $composer, IOInterface $io)\n{\n$im->addInstaller(new Installer\\LibraryInstaller($io, $composer, null));\n$im->addInstaller(new Installer\\PearInstaller($io, $composer, 'pear-library'));\n$im->addInstaller(new Installer\\InstallerInstaller($io, $composer));\n$im->addInstaller(new Installer\\MetapackageInstaller($io));\n}\n\n\n\n\n\nprotected function purgePackages(Repository\\RepositoryManager $rm, Installer\\InstallationManager $im)\n{\n$repo = $rm->getLocalRepository();\nforeach ($repo->getPackages() as $package) {\nif (!$im->isPackageInstalled($repo, $package)) {\n$repo->removePackage($package);\n}\n}\n}\n\n\n\n\n\n\n\npublic static function create(IOInterface $io, $config = null)\n{\n$factory = new static();\n\nreturn $factory->createComposer($io, $config);\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Util;\n\nuse RecursiveDirectoryIterator;\nuse RecursiveIteratorIterator;\n\n\n\n\n\nclass Filesystem\n{\nprivate $processExecutor;\n\npublic function __construct(ProcessExecutor $executor = null)\n{\n$this->processExecutor = $executor ?: new ProcessExecutor();\n}\n\npublic function remove($file)\n{\nif (is_dir($file)) {\nreturn $this->removeDirectory($file);\n}\n\nif (file_exists($file)) {\nreturn unlink($file);\n}\n\nreturn false;\n}\n\n\n\n\n\n\n\n\n\n\npublic function removeDirectory($directory)\n{\nif (!is_dir($directory)) {\nreturn true;\n}\n\nif (!function_exists('proc_open')) {\nreturn $this->removeDirectoryPhp($directory);\n}\n\nif (defined('PHP_WINDOWS_VERSION_BUILD')) {\n$cmd = sprintf('rmdir /S /Q %s', escapeshellarg(realpath($directory)));\n} else {\n$cmd = sprintf('rm -rf %s', escapeshellarg($directory));\n}\n\n$result = $this->getProcess()->execute($cmd, $output) === 0;\n\n\n clearstatcache();\n\nreturn $result && !is_dir($directory);\n}\n\n\n\n\n\n\n\n\n\n\n\npublic function removeDirectoryPhp($directory)\n{\n$it = new RecursiveDirectoryIterator($directory, RecursiveDirectoryIterator::SKIP_DOTS);\n$ri = new RecursiveIteratorIterator($it, RecursiveIteratorIterator::CHILD_FIRST);\n\nforeach ($ri as $file) {\nif ($file->isDir()) {\nrmdir($file->getPathname());\n} else {\nunlink($file->getPathname());\n}\n}\n\nreturn rmdir($directory);\n}\n\npublic function ensureDirectoryExists($directory)\n{\nif (!is_dir($directory)) {\nif (file_exists($directory)) {\nthrow new \\RuntimeException(\n$directory.' exists and is not a directory.'\n);\n}\nif (!@mkdir($directory, 0777, true)) {\nthrow new \\RuntimeException(\n$directory.' does not exist and could not be created.'\n);\n}\n}\n}\n\n\n\n\n\n\n\n\n\n\npublic function copyThenRemove($source, $target)\n{\n$it = new RecursiveDirectoryIterator($source, RecursiveDirectoryIterator::SKIP_DOTS);\n$ri = new RecursiveIteratorIterator($it, RecursiveIteratorIterator::SELF_FIRST);\n\nif (!file_exists($target)) {\nmkdir($target, 0777, true);\n}\n\nforeach ($ri as $file) {\n$targetPath = $target . DIRECTORY_SEPARATOR . $ri->getSubPathName();\nif ($file->isDir()) {\nmkdir($targetPath);\n} else {\ncopy($file->getPathname(), $targetPath);\n}\n}\n\n$this->removeDirectoryPhp($source);\n}\n\npublic function rename($source, $target)\n{\nif (true === @rename($source, $target)) {\nreturn;\n}\n\nif (!function_exists('proc_open')) {\nreturn $this->copyThenRemove($source, $target);\n}\n\nif (defined('PHP_WINDOWS_VERSION_BUILD')) {\n\n $command = sprintf('xcopy %s %s /E /I /Q', escapeshellarg($source), escapeshellarg($target));\n$result = $this->processExecutor->execute($command, $output);\n\n\n clearstatcache();\n\nif (0 === $result) {\n$this->remove($source);\n\nreturn;\n}\n\nreturn $this->copyThenRemove($source, $target);\n} else {\n\n \n $command = sprintf('mv %s %s', escapeshellarg($source), escapeshellarg($target));\n$result = $this->processExecutor->execute($command, $output);\n\n\n clearstatcache();\n\nif (0 === $result) {\nreturn;\n}\n}\n\nthrow new \\RuntimeException(sprintf('Could not rename \"%s\" to \"%s\".', $source, $target));\n}\n\n\n\n\n\n\n\n\n\n\npublic function findShortestPath($from, $to, $directories = false)\n{\nif (!$this->isAbsolutePath($from) || !$this->isAbsolutePath($to)) {\nthrow new \\InvalidArgumentException(sprintf('$from (%s) and $to (%s) must be absolute paths.', $from, $to));\n}\n\n$from = lcfirst($this->normalizePath($from));\n$to = lcfirst($this->normalizePath($to));\n\nif ($directories) {\n$from .= '/dummy_file';\n}\n\nif (dirname($from) === dirname($to)) {\nreturn './'.basename($to);\n}\n\n$commonPath = $to.'/';\nwhile (strpos($from, $commonPath) !== 0 && '/' !== $commonPath && !preg_match('{^[a-z]:/?$}i', $commonPath) && '.' !== $commonPath) {\n$commonPath = strtr(dirname($commonPath), '\\\\', '/');\n}\n\nif (0 !== strpos($from, $commonPath) || '/' === $commonPath || '.' === $commonPath) {\nreturn $to;\n}\n\n$commonPath = rtrim($commonPath, '/') . '/';\n$sourcePathDepth = substr_count(substr($from, strlen($commonPath)), '/');\n$commonPathCode = str_repeat('../', $sourcePathDepth);\n\nreturn ($commonPathCode . substr($to, strlen($commonPath))) ?: './';\n}\n\n\n\n\n\n\n\n\n\n\npublic function findShortestPathCode($from, $to, $directories = false)\n{\nif (!$this->isAbsolutePath($from) || !$this->isAbsolutePath($to)) {\nthrow new \\InvalidArgumentException(sprintf('$from (%s) and $to (%s) must be absolute paths.', $from, $to));\n}\n\n$from = lcfirst($this->normalizePath($from));\n$to = lcfirst($this->normalizePath($to));\n\nif ($from === $to) {\nreturn $directories ? '__DIR__' : '__FILE__';\n}\n\n$commonPath = $to.'/';\nwhile (strpos($from, $commonPath) !== 0 && '/' !== $commonPath && !preg_match('{^[a-z]:/?$}i', $commonPath) && '.' !== $commonPath) {\n$commonPath = strtr(dirname($commonPath), '\\\\', '/');\n}\n\nif (0 !== strpos($from, $commonPath) || '/' === $commonPath || '.' === $commonPath) {\nreturn var_export($to, true);\n}\n\n$commonPath = rtrim($commonPath, '/') . '/';\nif (strpos($to, $from.'/') === 0) {\nreturn '__DIR__ . '.var_export(substr($to, strlen($from)), true);\n}\n$sourcePathDepth = substr_count(substr($from, strlen($commonPath)), '/') + $directories;\n$commonPathCode = str_repeat('dirname(', $sourcePathDepth).'__DIR__'.str_repeat(')', $sourcePathDepth);\n$relTarget = substr($to, strlen($commonPath));\n\nreturn $commonPathCode . (strlen($relTarget) ? '.' . var_export('/' . $relTarget, true) : '');\n}\n\n\n\n\n\n\n\npublic function isAbsolutePath($path)\n{\nreturn substr($path, 0, 1) === '/' || substr($path, 1, 1) === ':';\n}\n\n\n\n\n\n\n\n\n\npublic function size($path)\n{\nif (!file_exists($path)) {\nthrow new \\RuntimeException(\"$path does not exist.\");\n}\nif (is_dir($path)) {\nreturn $this->directorySize($path);\n}\n\nreturn filesize($path);\n}\n\n\n\n\n\n\n\n\npublic function normalizePath($path)\n{\n$parts = array();\n$path = strtr($path, '\\\\', '/');\n$prefix = '';\n$absolute = false;\n\nif (preg_match('{^([0-9a-z]+:(?://(?:[a-z]:)?)?)}i', $path, $match)) {\n$prefix = $match[1];\n$path = substr($path, strlen($prefix));\n}\n\nif (substr($path, 0, 1) === '/') {\n$absolute = true;\n$path = substr($path, 1);\n}\n\n$up = false;\nforeach (explode('/', $path) as $chunk) {\nif ('..' === $chunk && ($absolute || $up)) {\narray_pop($parts);\n$up = !(empty($parts) || '..' === end($parts));\n} elseif ('.' !== $chunk && '' !== $chunk) {\n$parts[] = $chunk;\n$up = '..' !== $chunk;\n}\n}\n\nreturn $prefix.($absolute ? '/' : '').implode('/', $parts);\n}\n\nprotected function directorySize($directory)\n{\n$it = new RecursiveDirectoryIterator($directory, RecursiveDirectoryIterator::SKIP_DOTS);\n$ri = new RecursiveIteratorIterator($it, RecursiveIteratorIterator::CHILD_FIRST);\n\n$size = 0;\nforeach ($ri as $file) {\nif ($file->isFile()) {\n$size += $file->getSize();\n}\n}\n\nreturn $size;\n}\n\nprotected function getProcess()\n{\nreturn new ProcessExecutor;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Util;\n\nuse Composer\\IO\\IOInterface;\nuse Composer\\Config;\nuse Composer\\Downloader\\TransportException;\nuse Composer\\Json\\JsonFile;\n\n\n\n\nclass GitHub\n{\nprotected $io;\nprotected $config;\nprotected $process;\nprotected $remoteFilesystem;\n\n\n\n\n\n\n\n\n\npublic function __construct(IOInterface $io, Config $config, ProcessExecutor $process = null, RemoteFilesystem $remoteFilesystem = null)\n{\n$this->io = $io;\n$this->config = $config;\n$this->process = $process ?: new ProcessExecutor;\n$this->remoteFilesystem = $remoteFilesystem ?: new RemoteFilesystem($io);\n}\n\n\n\n\n\n\n\npublic function authorizeOAuth($originUrl)\n{\nif ('github.com' !== $originUrl) {\nreturn false;\n}\n\n\n if (0 === $this->process->execute('git config github.accesstoken', $output)) {\n$this->io->setAuthentication($originUrl, trim($output), 'x-oauth-basic');\n\nreturn true;\n}\n\nreturn false;\n}\n\n\n\n\n\n\n\n\n\n\npublic function authorizeOAuthInteractively($originUrl, $message = null)\n{\n$attemptCounter = 0;\n\nif ($message) {\n$this->io->write($message);\n}\n$this->io->write('The credentials will be swapped for an OAuth token stored in '.$this->config->get('home').'/config.json, your password will not be stored');\n$this->io->write('To revoke access to this token you can visit https://github.com/settings/applications');\nwhile ($attemptCounter++ < 5) {\ntry {\n$username = $this->io->ask('Username: ');\n$password = $this->io->askAndHideAnswer('Password: ');\n$this->io->setAuthentication($originUrl, $username, $password);\n\n\n $appName = 'Composer';\nif (0 === $this->process->execute('hostname', $output)) {\n$appName .= ' on ' . trim($output);\n}\n\n$contents = JsonFile::parseJson($this->remoteFilesystem->getContents($originUrl, 'https://api.github.com/authorizations', false, array(\n'http' => array(\n'method' => 'POST',\n'follow_location' => false,\n'header' => \"Content-Type: application/json\\r\\n\",\n'content' => json_encode(array(\n'scopes' => array('repo'),\n'note' => $appName,\n'note_url' => 'https://getcomposer.org/',\n)),\n)\n)));\n} catch (TransportException $e) {\nif (in_array($e->getCode(), array(403, 401))) {\n$this->io->write('Invalid credentials.');\ncontinue;\n}\n\nthrow $e;\n}\n\n$this->io->setAuthentication($originUrl, $contents['token'], 'x-oauth-basic');\n\n\n $githubTokens = $this->config->get('github-oauth') ?: array();\n$githubTokens[$originUrl] = $contents['token'];\n$this->config->getConfigSource()->addConfigSetting('github-oauth', $githubTokens);\n\nreturn true;\n}\n\nthrow new \\RuntimeException(\"Invalid GitHub credentials 5 times in a row, aborting.\");\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Util;\n\nuse Symfony\\Component\\Process\\Process;\nuse Composer\\IO\\IOInterface;\n\n\n\n\nclass ProcessExecutor\n{\nprotected static $timeout = 300;\n\nprotected $captureOutput;\nprotected $errorOutput;\nprotected $io;\n\npublic function __construct(IOInterface $io = null)\n{\n$this->io = $io;\n}\n\n\n\n\n\n\n\n\n\n\npublic function execute($command, &$output = null, $cwd = null)\n{\nif ($this->io && $this->io->isDebug()) {\n$safeCommand = preg_replace('{(://[^:/\\s]+:)[^@\\s/]+}i', '$1****', $command);\n$this->io->write('Executing command ('.($cwd ?: 'CWD').'): '.$safeCommand);\n}\n\n\n \n if (null === $cwd && defined('PHP_WINDOWS_VERSION_BUILD') && false !== strpos($command, 'git') && getcwd()) {\n$cwd = realpath(getcwd());\n}\n\n$this->captureOutput = count(func_get_args()) > 1;\n$this->errorOutput = null;\n$process = new Process($command, $cwd, null, null, static::getTimeout());\n\n$callback = is_callable($output) ? $output : array($this, 'outputHandler');\n$process->run($callback);\n\nif ($this->captureOutput && !is_callable($output)) {\n$output = $process->getOutput();\n}\n\n$this->errorOutput = $process->getErrorOutput();\n\nreturn $process->getExitCode();\n}\n\npublic function splitLines($output)\n{\n$output = trim($output);\n\nreturn ((string) $output === '') ? array() : preg_split('{\\r?\\n}', $output);\n}\n\n\n\n\n\n\npublic function getErrorOutput()\n{\nreturn $this->errorOutput;\n}\n\npublic function outputHandler($type, $buffer)\n{\nif ($this->captureOutput) {\nreturn;\n}\n\necho $buffer;\n}\n\npublic static function getTimeout()\n{\nreturn static::$timeout;\n}\n\npublic static function setTimeout($timeout)\n{\nstatic::$timeout = $timeout;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Util;\n\nuse Composer\\IO\\IOInterface;\n\n\n\n\nclass Git\n{\npublic function cleanEnv()\n{\nif (ini_get('safe_mode') && false === strpos(ini_get('safe_mode_allowed_env_vars'), 'GIT_ASKPASS')) {\nthrow new \\RuntimeException('safe_mode is enabled and safe_mode_allowed_env_vars does not contain GIT_ASKPASS, can not set env var. You can disable safe_mode with \"-dsafe_mode=0\" when running composer');\n}\n\n\n if (getenv('GIT_ASKPASS') !== 'echo') {\nputenv('GIT_ASKPASS=echo');\n}\n\n\n if (getenv('GIT_DIR')) {\nputenv('GIT_DIR');\n}\nif (getenv('GIT_WORK_TREE')) {\nputenv('GIT_WORK_TREE');\n}\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Util;\n\nuse Composer\\Composer;\nuse Composer\\IO\\IOInterface;\nuse Composer\\Downloader\\TransportException;\n\n\n\n\n\nclass RemoteFilesystem\n{\nprivate $io;\nprivate $firstCall;\nprivate $bytesMax;\nprivate $originUrl;\nprivate $fileUrl;\nprivate $fileName;\nprivate $retry;\nprivate $progress;\nprivate $lastProgress;\nprivate $options;\n\n\n\n\n\n\n\npublic function __construct(IOInterface $io, $options = array())\n{\n$this->io = $io;\n$this->options = $options;\n}\n\n\n\n\n\n\n\n\n\n\n\n\npublic function copy($originUrl, $fileUrl, $fileName, $progress = true, $options = array())\n{\nreturn $this->get($originUrl, $fileUrl, $options, $fileName, $progress);\n}\n\n\n\n\n\n\n\n\n\n\n\npublic function getContents($originUrl, $fileUrl, $progress = true, $options = array())\n{\nreturn $this->get($originUrl, $fileUrl, $options, null, $progress);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nprotected function get($originUrl, $fileUrl, $additionalOptions = array(), $fileName = null, $progress = true)\n{\n$this->bytesMax = 0;\n$this->originUrl = $originUrl;\n$this->fileUrl = $fileUrl;\n$this->fileName = $fileName;\n$this->progress = $progress;\n$this->lastProgress = null;\n\n\n if (preg_match('{^https?://(.+):(.+)@([^/]+)}i', $fileUrl, $match)) {\n$this->io->setAuthentication($originUrl, urldecode($match[1]), urldecode($match[2]));\n}\n\n$options = $this->getOptionsForUrl($originUrl, $additionalOptions);\n\nif ($this->io->isDebug()) {\n$this->io->write('Downloading '.$fileUrl);\n}\nif (isset($options['github-token'])) {\n$fileUrl .= (false === strpos($fileUrl, '?') ? '?' : '&') . 'access_token='.$options['github-token'];\nunset($options['github-token']);\n}\n$ctx = StreamContextFactory::getContext($fileUrl, $options, array('notification' => array($this, 'callbackGet')));\n\nif ($this->progress) {\n$this->io->write(\"    Downloading: <comment>connection...</comment>\", false);\n}\n\n$errorMessage = '';\n$errorCode = 0;\n$result = false;\nset_error_handler(function ($code, $msg) use (&$errorMessage) {\nif ($errorMessage) {\n$errorMessage .= \"\\n\";\n}\n$errorMessage .= preg_replace('{^file_get_contents\\(.*?\\): }', '', $msg);\n});\ntry {\n$result = file_get_contents($fileUrl, false, $ctx);\n} catch (\\Exception $e) {\nif ($e instanceof TransportException && !empty($http_response_header[0])) {\n$e->setHeaders($http_response_header);\n}\n}\nif ($errorMessage && !ini_get('allow_url_fopen')) {\n$errorMessage = 'allow_url_fopen must be enabled in php.ini ('.$errorMessage.')';\n}\nrestore_error_handler();\nif (isset($e) && !$this->retry) {\nthrow $e;\n}\n\n\n if (!empty($http_response_header[0]) && preg_match('{^HTTP/\\S+ ([45]\\d\\d)}i', $http_response_header[0], $match)) {\n$result = false;\n$errorCode = $match[1];\n}\n\n\n if ($result && extension_loaded('zlib') && substr($fileUrl, 0, 4) === 'http') {\n$decode = false;\nforeach ($http_response_header as $header) {\nif (preg_match('{^content-encoding: *gzip *$}i', $header)) {\n$decode = true;\ncontinue;\n} elseif (preg_match('{^HTTP/}i', $header)) {\n$decode = false;\n}\n}\n\nif ($decode) {\nif (version_compare(PHP_VERSION, '5.4.0', '>=')) {\n$result = zlib_decode($result);\n} else {\n\n $result = file_get_contents('compress.zlib://data:application/octet-stream;base64,'.base64_encode($result));\n}\n}\n}\n\nif ($this->progress) {\n$this->io->overwrite(\"    Downloading: <comment>100%</comment>\");\n}\n\n\n if (false !== $result && null !== $fileName) {\nif ('' === $result) {\nthrow new TransportException('\"'.$this->fileUrl.'\" appears broken, and returned an empty 200 response');\n}\n\n$errorMessage = '';\nset_error_handler(function ($code, $msg) use (&$errorMessage) {\nif ($errorMessage) {\n$errorMessage .= \"\\n\";\n}\n$errorMessage .= preg_replace('{^file_put_contents\\(.*?\\): }', '', $msg);\n});\n$result = (bool) file_put_contents($fileName, $result);\nrestore_error_handler();\nif (false === $result) {\nthrow new TransportException('The \"'.$this->fileUrl.'\" file could not be written to '.$fileName.': '.$errorMessage);\n}\n}\n\nif ($this->retry) {\n$this->retry = false;\n\nreturn $this->get($this->originUrl, $this->fileUrl, $additionalOptions, $this->fileName, $this->progress);\n}\n\nif (false === $result) {\n$e = new TransportException('The \"'.$this->fileUrl.'\" file could not be downloaded: '.$errorMessage, $errorCode);\nif (!empty($http_response_header[0])) {\n$e->setHeaders($http_response_header);\n}\n\nthrow $e;\n}\n\nreturn $result;\n}\n\n\n\n\n\n\n\n\n\n\n\n\nprotected function callbackGet($notificationCode, $severity, $message, $messageCode, $bytesTransferred, $bytesMax)\n{\nswitch ($notificationCode) {\ncase STREAM_NOTIFY_FAILURE:\ncase STREAM_NOTIFY_AUTH_REQUIRED:\nif (401 === $messageCode) {\nif (!$this->io->isInteractive()) {\n$message = \"The '\" . $this->fileUrl . \"' URL required authentication.\\nYou must be using the interactive console\";\n\nthrow new TransportException($message, 401);\n}\n\n$this->io->overwrite('    Authentication required (<info>'.parse_url($this->fileUrl, PHP_URL_HOST).'</info>):');\n$username = $this->io->ask('      Username: ');\n$password = $this->io->askAndHideAnswer('      Password: ');\n$this->io->setAuthentication($this->originUrl, $username, $password);\n\n$this->retry = true;\nthrow new TransportException('RETRY');\nbreak;\n}\n\nif ($notificationCode === STREAM_NOTIFY_AUTH_REQUIRED) {\nbreak;\n}\n\nthrow new TransportException('The \"'.$this->fileUrl.'\" file could not be downloaded ('.trim($message).')', $messageCode);\n\ncase STREAM_NOTIFY_AUTH_RESULT:\nif (403 === $messageCode) {\n$message = \"The '\" . $this->fileUrl . \"' URL could not be accessed: \" . $message;\n\nthrow new TransportException($message, 403);\n}\nbreak;\n\ncase STREAM_NOTIFY_FILE_SIZE_IS:\nif ($this->bytesMax < $bytesMax) {\n$this->bytesMax = $bytesMax;\n}\nbreak;\n\ncase STREAM_NOTIFY_PROGRESS:\nif ($this->bytesMax > 0 && $this->progress) {\n$progression = 0;\n\nif ($this->bytesMax > 0) {\n$progression = round($bytesTransferred / $this->bytesMax * 100);\n}\n\nif ((0 === $progression % 5) && $progression !== $this->lastProgress) {\n$this->lastProgress = $progression;\n$this->io->overwrite(\"    Downloading: <comment>$progression%</comment>\", false);\n}\n}\nbreak;\n\ndefault:\nbreak;\n}\n}\n\nprotected function getOptionsForUrl($originUrl, $additionalOptions)\n{\n$headers = array(\nsprintf(\n'User-Agent: Composer/%s (%s; %s; PHP %s.%s.%s)',\nComposer::VERSION === 'c93aecee4d3998d17a1986f042187d38dd394397' ? 'source' : Composer::VERSION,\nphp_uname('s'),\nphp_uname('r'),\nPHP_MAJOR_VERSION,\nPHP_MINOR_VERSION,\nPHP_RELEASE_VERSION\n)\n);\n\nif (extension_loaded('zlib')) {\n$headers[] = 'Accept-Encoding: gzip';\n}\n\n$options = array_replace_recursive($this->options, $additionalOptions);\n\nif ($this->io->hasAuthentication($originUrl)) {\n$auth = $this->io->getAuthentication($originUrl);\nif ('github.com' === $originUrl && 'x-oauth-basic' === $auth['password']) {\n$options['github-token'] = $auth['username'];\n} else {\n$authStr = base64_encode($auth['username'] . ':' . $auth['password']);\n$headers[] = 'Authorization: Basic '.$authStr;\n}\n}\n\nif (isset($options['http']['header']) && !is_array($options['http']['header'])) {\n$options['http']['header'] = explode(\"\\r\\n\", trim($options['http']['header'], \"\\r\\n\"));\n}\nforeach ($headers as $header) {\n$options['http']['header'][] = $header;\n}\n\nreturn $options;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Util;\n\n\n\n\n\n\n\nfinal class StreamContextFactory\n{\n\n\n\n\n\n\n\n\n\npublic static function getContext($url, array $defaultOptions = array(), array $defaultParams = array())\n{\n$options = array('http' => array(\n\n 'follow_location' => 1,\n'max_redirects' => 20,\n));\n\n\n if (!empty($_SERVER['HTTP_PROXY']) || !empty($_SERVER['http_proxy'])) {\n\n $proxy = parse_url(!empty($_SERVER['http_proxy']) ? $_SERVER['http_proxy'] : $_SERVER['HTTP_PROXY']);\n}\n\nif (!empty($proxy)) {\n$proxyURL = isset($proxy['scheme']) ? $proxy['scheme'] . '://' : '';\n$proxyURL .= isset($proxy['host']) ? $proxy['host'] : '';\n\nif (isset($proxy['port'])) {\n$proxyURL .= \":\" . $proxy['port'];\n} elseif ('http://' == substr($proxyURL, 0, 7)) {\n$proxyURL .= \":80\";\n} elseif ('https://' == substr($proxyURL, 0, 8)) {\n$proxyURL .= \":443\";\n}\n\n\n $proxyURL = str_replace(array('http://', 'https://'), array('tcp://', 'ssl://'), $proxyURL);\n\nif (0 === strpos($proxyURL, 'ssl:') && !extension_loaded('openssl')) {\nthrow new \\RuntimeException('You must enable the openssl extension to use a proxy over https');\n}\n\n$options['http']['proxy'] = $proxyURL;\n\n\n switch (parse_url($url, PHP_URL_SCHEME)) {\ncase 'http': \n $reqFullUriEnv = getenv('HTTP_PROXY_REQUEST_FULLURI');\nif ($reqFullUriEnv === false || $reqFullUriEnv === '' || (strtolower($reqFullUriEnv) !== 'false' && (bool) $reqFullUriEnv)) {\n$options['http']['request_fulluri'] = true;\n}\nbreak;\ncase 'https': \n $reqFullUriEnv = getenv('HTTPS_PROXY_REQUEST_FULLURI');\nif ($reqFullUriEnv === false || $reqFullUriEnv === '' || (strtolower($reqFullUriEnv) !== 'false' && (bool) $reqFullUriEnv)) {\n$options['http']['request_fulluri'] = true;\n}\nbreak;\n}\n\nif (isset($proxy['user'])) {\n$auth = $proxy['user'];\nif (isset($proxy['pass'])) {\n$auth .= ':' . $proxy['pass'];\n}\n$auth = base64_encode($auth);\n\n\n if (isset($defaultOptions['http']['header'])) {\nif (is_string($defaultOptions['http']['header'])) {\n$defaultOptions['http']['header'] = array($defaultOptions['http']['header']);\n}\n$defaultOptions['http']['header'][] = \"Proxy-Authorization: Basic {$auth}\";\n} else {\n$options['http']['header'] = array(\"Proxy-Authorization: Basic {$auth}\");\n}\n}\n}\n\n$options = array_replace_recursive($options, $defaultOptions);\n\nif (isset($options['http']['header'])) {\n$options['http']['header'] = self::fixHttpHeaderField($options['http']['header']);\n}\n\nreturn stream_context_create($options, $defaultParams);\n}\n\n\n\n\n\n\n\n\n\n\n\nprivate static function fixHttpHeaderField($header)\n{\nif (!is_array($header)) {\n$header = explode(\"\\r\\n\", $header);\n}\nuasort($header, function ($el) {\nreturn preg_match('{^content-type}i', $el) ? 1 : -1;\n});\n\nreturn $header;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Util;\n\nuse Composer\\Package\\Loader\\ArrayLoader;\nuse Composer\\Package\\Loader\\ValidatingArrayLoader;\nuse Composer\\Package\\Loader\\InvalidPackageException;\nuse Composer\\Json\\JsonValidationException;\nuse Composer\\IO\\IOInterface;\nuse Composer\\Json\\JsonFile;\n\n\n\n\n\n\n\nclass ConfigValidator\n{\nprivate $io;\n\npublic function __construct(IOInterface $io)\n{\n$this->io = $io;\n}\n\n\n\n\n\n\n\n\npublic function validate($file)\n{\n$errors = array();\n$publishErrors = array();\n$warnings = array();\n\n\n $laxValid = false;\ntry {\n$json = new JsonFile($file, new RemoteFilesystem($this->io));\n$manifest = $json->read();\n\n$json->validateSchema(JsonFile::LAX_SCHEMA);\n$laxValid = true;\n$json->validateSchema();\n} catch (JsonValidationException $e) {\nforeach ($e->getErrors() as $message) {\nif ($laxValid) {\n$publishErrors[] = $message;\n} else {\n$errors[] = $message;\n}\n}\n} catch (\\Exception $e) {\n$errors[] = $e->getMessage();\n\nreturn array($errors, $publishErrors, $warnings);\n}\n\n\n if (!empty($manifest['license'])) {\n\n if (is_array($manifest['license'])) {\nforeach ($manifest['license'] as $key => $license) {\nif ('proprietary' === $license) {\nunset($manifest['license'][$key]);\n}\n}\n}\n\n$licenseValidator = new SpdxLicenseIdentifier();\nif ('proprietary' !== $manifest['license'] && array() !== $manifest['license'] && !$licenseValidator->validate($manifest['license'])) {\n$warnings[] = sprintf(\n'License %s is not a valid SPDX license identifier, see http://www.spdx.org/licenses/ if you use an open license.'\n.\"\\nIf the software is closed-source, you may use \\\"proprietary\\\" as license.\",\njson_encode($manifest['license'])\n);\n}\n} else {\n$warnings[] = 'No license specified, it is recommended to do so. For closed-source software you may use \"proprietary\" as license.';\n}\n\nif (!empty($manifest['name']) && preg_match('{[A-Z]}', $manifest['name'])) {\n$suggestName = preg_replace('{(?:([a-z])([A-Z])|([A-Z])([A-Z][a-z]))}', '\\\\1\\\\3-\\\\2\\\\4', $manifest['name']);\n$suggestName = strtolower($suggestName);\n\n$warnings[] = sprintf(\n'Name \"%s\" does not match the best practice (e.g. lower-cased/with-dashes). We suggest using \"%s\" instead. As such you will not be able to submit it to Packagist.',\n$manifest['name'],\n$suggestName\n);\n}\n\ntry {\n$loader = new ValidatingArrayLoader(new ArrayLoader());\nif (!isset($manifest['version'])) {\n$manifest['version'] = '1.0.0';\n}\nif (!isset($manifest['name'])) {\n$manifest['name'] = 'dummy/dummy';\n}\n$loader->load($manifest);\n} catch (InvalidPackageException $e) {\n$errors = array_merge($errors, $e->getErrors());\n}\n\n$warnings = array_merge($warnings, $loader->getWarnings());\n\nreturn array($errors, $publishErrors, $warnings);\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Util;\n\n\n\n\n\n\nclass ErrorHandler\n{\n\n\n\n\n\n\n\n\n\n\n\npublic static function handle($level, $message, $file, $line)\n{\n\n if (!error_reporting()) {\nreturn;\n}\n\nif (ini_get('xdebug.scream')) {\n$message .= \"\\n\\nWarning: You have xdebug.scream enabled, the warning above may be\".\n\"\\na legitimately suppressed error that you were not supposed to see.\";\n}\n\nthrow new \\ErrorException($message, 0, $level, $file, $line);\n}\n\n\n\n\n\n\npublic static function register()\n{\nset_error_handler(array(__CLASS__, 'handle'));\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Util;\n\nuse Composer\\Json\\JsonFile;\n\n\n\n\n\n\n\nclass SpdxLicenseIdentifier\n{\n\n\n\nprivate $identifiers;\n\npublic function __construct()\n{\n$this->initIdentifiers();\n}\n\n\n\n\n\n\n\npublic function validate($license)\n{\nif (is_array($license)) {\n$count = count($license);\nif ($count !== count(array_filter($license, 'is_string'))) {\nthrow new \\InvalidArgumentException('Array of strings expected.');\n}\n$license = $count > 1 ? '('.implode(' or ', $license).')' : (string) reset($license);\n}\nif (!is_string($license)) {\nthrow new \\InvalidArgumentException(sprintf(\n'Array or String expected, %s given.', gettype($license)\n));\n}\n\nreturn $this->isValidLicenseString($license);\n}\n\n\n\n\nprivate function initIdentifiers()\n{\n$jsonFile = new JsonFile(__DIR__ . '/../../../res/spdx-identifier.json');\n$this->identifiers = $jsonFile->read();\n}\n\n\n\n\n\n\nprivate function isValidLicenseIdentifier($identifier)\n{\nreturn in_array($identifier, $this->identifiers);\n}\n\n\n\n\n\n\n\nprivate function isValidLicenseString($license)\n{\n$tokens = array(\n'po' => '\\(',\n'pc' => '\\)',\n'op' => '(?:or|and)',\n'lix' => '(?:NONE|NOASSERTION)',\n'lir' => 'LicenseRef-\\d+',\n'lic' => '[-+_.a-zA-Z0-9]{3,}',\n'ws' => '\\s+',\n'_' => '.',\n);\n\n$next = function () use ($license, $tokens) {\nstatic $offset = 0;\n\nif ($offset >= strlen($license)) {\nreturn null;\n}\n\nforeach ($tokens as $name => $token) {\nif (false === $r = preg_match('{' . $token . '}', $license, $matches, PREG_OFFSET_CAPTURE, $offset)) {\nthrow new \\RuntimeException('Pattern for token %s failed (regex error).', $name);\n}\nif ($r === 0) {\ncontinue;\n}\nif ($matches[0][1] !== $offset) {\ncontinue;\n}\n$offset += strlen($matches[0][0]);\n\nreturn array($name, $matches[0][0]);\n}\n\nthrow new \\RuntimeException('At least the last pattern needs to match, but it did not (dot-match-all is missing?).');\n};\n\n$open = 0;\n$require = 1;\n$lastop = null;\n\nwhile (list($token, $string) = $next()) {\nswitch ($token) {\ncase 'po':\nif ($open || !$require) {\nreturn false;\n}\n$open = 1;\nbreak;\ncase 'pc':\nif ($open !== 1 || $require || !$lastop) {\nreturn false;\n}\n$open = 2;\nbreak;\ncase 'op':\nif ($require || !$open) {\nreturn false;\n}\n$lastop || $lastop = $string;\nif ($lastop !== $string) {\nreturn false;\n}\n$require = 1;\nbreak;\ncase 'lix':\nif ($open) {\nreturn false;\n}\ngoto lir;\ncase 'lic':\nif (!$this->isValidLicenseIdentifier($string)) {\nreturn false;\n}\n\n case 'lir':\nlir:\nif (!$require) {\nreturn false;\n}\n$require = 0;\nbreak;\ncase 'ws':\nbreak;\ncase '_':\nreturn false;\ndefault:\nthrow new \\RuntimeException(sprintf('Unparsed token: %s.', print_r($token, true)));\n}\n}\n\nreturn !($open % 2 || $require);\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Util;\n\nuse Composer\\IO\\IOInterface;\n\n\n\n\n\nclass Svn\n{\nconst MAX_QTY_AUTH_TRIES = 5;\n\n\n\n\nprotected $credentials;\n\n\n\n\nprotected $hasAuth;\n\n\n\n\nprotected $io;\n\n\n\n\nprotected $url;\n\n\n\n\nprotected $cacheCredentials = true;\n\n\n\n\nprotected $process;\n\n\n\n\nprotected $qtyAuthTries = 0;\n\n\n\n\n\n\npublic function __construct($url, IOInterface $io, ProcessExecutor $process = null)\n{\n$this->url = $url;\n$this->io = $io;\n$this->process = $process ?: new ProcessExecutor;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npublic function execute($command, $url, $cwd = null, $path = null, $verbose = false)\n{\n$svnCommand = $this->getCommand($command, $url, $path);\n$output = null;\n$io = $this->io;\n$handler = function ($type, $buffer) use (&$output, $io, $verbose) {\nif ($type !== 'out') {\nreturn;\n}\n$output .= $buffer;\nif ($verbose) {\n$io->write($buffer, false);\n}\n};\n$status = $this->process->execute($svnCommand, $handler, $cwd);\nif (0 === $status) {\nreturn $output;\n}\n\nif (empty($output)) {\n$output = $this->process->getErrorOutput();\n}\n\n\n if (false === stripos($output, 'Could not authenticate to server:')\n&& false === stripos($output, 'svn: E170001:')) {\nthrow new \\RuntimeException($output);\n}\n\n\n if (!$this->io->isInteractive()) {\nthrow new \\RuntimeException(\n'can not ask for authentication in non interactive mode ('.$output.')'\n);\n}\n\n\n if ($this->qtyAuthTries++ < self::MAX_QTY_AUTH_TRIES || !$this->hasAuth()) {\n$this->doAuthDance();\n\n\n return $this->execute($command, $url, $cwd, $path, $verbose);\n}\n\nthrow new \\RuntimeException(\n'wrong credentials provided ('.$output.')'\n);\n}\n\n\n\n\n\n\nprotected function doAuthDance()\n{\n$this->io->write(\"The Subversion server ({$this->url}) requested credentials:\");\n\n$this->hasAuth = true;\n$this->credentials['username'] = $this->io->ask(\"Username: \");\n$this->credentials['password'] = $this->io->askAndHideAnswer(\"Password: \");\n\n$this->cacheCredentials = $this->io->askConfirmation(\"Should Subversion cache these credentials? (yes/no) \", true);\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\n\n\nprotected function getCommand($cmd, $url, $path = null)\n{\n$cmd = sprintf('%s %s%s %s',\n$cmd,\n'--non-interactive ',\n$this->getCredentialString(),\nescapeshellarg($url)\n);\n\nif ($path) {\n$cmd .= ' ' . escapeshellarg($path);\n}\n\nreturn $cmd;\n}\n\n\n\n\n\n\n\n\nprotected function getCredentialString()\n{\nif (!$this->hasAuth()) {\nreturn '';\n}\n\nreturn sprintf(\n' %s--username %s --password %s ',\n$this->getAuthCache(),\nescapeshellarg($this->getUsername()),\nescapeshellarg($this->getPassword())\n);\n}\n\n\n\n\n\n\n\nprotected function getPassword()\n{\nif ($this->credentials === null) {\nthrow new \\LogicException(\"No svn auth detected.\");\n}\n\nreturn isset($this->credentials['password']) ? $this->credentials['password'] : '';\n}\n\n\n\n\n\n\n\nprotected function getUsername()\n{\nif ($this->credentials === null) {\nthrow new \\LogicException(\"No svn auth detected.\");\n}\n\nreturn $this->credentials['username'];\n}\n\n\n\n\n\n\nprotected function hasAuth()\n{\nif (null !== $this->hasAuth) {\nreturn $this->hasAuth;\n}\n\n$uri = parse_url($this->url);\nif (empty($uri['user'])) {\nreturn $this->hasAuth = false;\n}\n\n$this->credentials['username'] = $uri['user'];\nif (!empty($uri['pass'])) {\n$this->credentials['password'] = $uri['pass'];\n}\n\nreturn $this->hasAuth = true;\n}\n\n\n\n\n\n\nprotected function getAuthCache()\n{\nreturn $this->cacheCredentials ? '' : '--no-auth-cache ';\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer;\n\nuse Composer\\Package\\RootPackageInterface;\nuse Composer\\Package\\Locker;\nuse Composer\\Repository\\RepositoryManager;\nuse Composer\\Installer\\InstallationManager;\nuse Composer\\Downloader\\DownloadManager;\nuse Composer\\Script\\EventDispatcher;\nuse Composer\\Autoload\\AutoloadGenerator;\n\n\n\n\n\nclass Composer\n{\nconst VERSION = 'c93aecee4d3998d17a1986f042187d38dd394397';\n\n\n\n\nprivate $package;\n\n\n\n\nprivate $locker;\n\n\n\n\nprivate $repositoryManager;\n\n\n\n\nprivate $downloadManager;\n\n\n\n\nprivate $installationManager;\n\n\n\n\nprivate $config;\n\n\n\n\nprivate $eventDispatcher;\n\n\n\n\nprivate $autoloadGenerator;\n\n\n\n\n\npublic function setPackage(RootPackageInterface $package)\n{\n$this->package = $package;\n}\n\n\n\n\npublic function getPackage()\n{\nreturn $this->package;\n}\n\n\n\n\npublic function setConfig(Config $config)\n{\n$this->config = $config;\n}\n\n\n\n\npublic function getConfig()\n{\nreturn $this->config;\n}\n\n\n\n\npublic function setLocker(Locker $locker)\n{\n$this->locker = $locker;\n}\n\n\n\n\npublic function getLocker()\n{\nreturn $this->locker;\n}\n\n\n\n\npublic function setRepositoryManager(RepositoryManager $manager)\n{\n$this->repositoryManager = $manager;\n}\n\n\n\n\npublic function getRepositoryManager()\n{\nreturn $this->repositoryManager;\n}\n\n\n\n\npublic function setDownloadManager(DownloadManager $manager)\n{\n$this->downloadManager = $manager;\n}\n\n\n\n\npublic function getDownloadManager()\n{\nreturn $this->downloadManager;\n}\n\n\n\n\npublic function setInstallationManager(InstallationManager $manager)\n{\n$this->installationManager = $manager;\n}\n\n\n\n\npublic function getInstallationManager()\n{\nreturn $this->installationManager;\n}\n\n\n\n\npublic function setEventDispatcher(EventDispatcher $eventDispatcher)\n{\n$this->eventDispatcher = $eventDispatcher;\n}\n\n\n\n\npublic function getEventDispatcher()\n{\nreturn $this->eventDispatcher;\n}\n\n\n\n\npublic function setAutoloadGenerator(AutoloadGenerator $autoloadGenerator)\n{\n$this->autoloadGenerator = $autoloadGenerator;\n}\n\n\n\n\npublic function getAutoloadGenerator()\n{\nreturn $this->autoloadGenerator;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Json;\n\n\n\n\nclass JsonManipulator\n{\nprivate static $RECURSE_BLOCKS;\nprivate static $JSON_VALUE;\nprivate static $JSON_STRING;\n\nprivate $contents;\nprivate $newline;\nprivate $indent;\n\npublic function __construct($contents)\n{\nif (!self::$RECURSE_BLOCKS) {\nself::$RECURSE_BLOCKS = '(?:[^{}]*|\\{(?:[^{}]*|\\{(?:[^{}]*|\\{(?:[^{}]*|\\{[^{}]*\\})*\\})*\\})*\\})*';\nself::$JSON_STRING = '\"(?:\\\\\\\\[\"bfnrt/\\\\\\\\]|\\\\\\\\u[a-fA-F0-9]{4}|[^\\0-\\x09\\x0a-\\x1f\\\\\\\\\"])*\"';\nself::$JSON_VALUE = '(?:[0-9.]+|null|true|false|'.self::$JSON_STRING.'|\\[[^\\]]*\\]|\\{'.self::$RECURSE_BLOCKS.'\\})';\n}\n\n$contents = trim($contents);\nif (!preg_match('#^\\{(.*)\\}$#s', $contents)) {\nthrow new \\InvalidArgumentException('The json file must be an object ({})');\n}\n$this->newline = false !== strpos($contents, \"\\r\\n\") ? \"\\r\\n\": \"\\n\";\n$this->contents = $contents === '{}' ? '{' . $this->newline . '}' : $contents;\n$this->detectIndenting();\n}\n\npublic function getContents()\n{\nreturn $this->contents . $this->newline;\n}\n\npublic function addLink($type, $package, $constraint)\n{\n$data = @json_decode($this->contents, true);\n\n\n if (null === $data) {\nreturn false;\n}\n\n\n if (!isset($data[$type])) {\nreturn $this->addMainKey($type, array($package => $constraint));\n}\n\n$regex = '{^(\\s*\\{\\s*(?:'.self::$JSON_STRING.'\\s*:\\s*'.self::$JSON_VALUE.'\\s*,\\s*)*?)'.\n'('.preg_quote(JsonFile::encode($type)).'\\s*:\\s*)('.self::$JSON_VALUE.')(.*)}s';\nif (!preg_match($regex, $this->contents, $matches)) {\nreturn false;\n}\n\n$links = $matches[3];\n\nif (isset($data[$type][$package])) {\n\n $packageRegex = str_replace('/', '\\\\\\\\?/', preg_quote($package));\n\n $links = preg_replace('{\"'.$packageRegex.'\"(\\s*:\\s*)'.self::$JSON_STRING.'}i', addcslashes(JsonFile::encode($package).'${1}\"'.$constraint.'\"', '\\\\'), $links);\n} else {\nif (preg_match('#^\\s*\\{\\s*\\S+.*?(\\s*\\}\\s*)$#s', $links, $match)) {\n\n $links = preg_replace(\n'{'.preg_quote($match[1]).'$}',\naddcslashes(',' . $this->newline . $this->indent . $this->indent . JsonFile::encode($package).': '.JsonFile::encode($constraint) . $match[1], '\\\\'),\n$links\n);\n} else {\n\n $links = '{' . $this->newline .\n$this->indent . $this->indent . JsonFile::encode($package).': '.JsonFile::encode($constraint) . $this->newline .\n$this->indent . '}';\n}\n}\n\n$this->contents = $matches[1] . $matches[2] . $links . $matches[4];\n\nreturn true;\n}\n\npublic function addRepository($name, $config)\n{\nreturn $this->addSubNode('repositories', $name, $config);\n}\n\npublic function removeRepository($name)\n{\nreturn $this->removeSubNode('repositories', $name);\n}\n\npublic function addConfigSetting($name, $value)\n{\nreturn $this->addSubNode('config', $name, $value);\n}\n\npublic function removeConfigSetting($name)\n{\nreturn $this->removeSubNode('config', $name);\n}\n\npublic function addSubNode($mainNode, $name, $value)\n{\n\n if (!preg_match('#\"'.$mainNode.'\":\\s*\\{#', $this->contents)) {\n$this->addMainKey(''.$mainNode.'', array($name => $value));\n\nreturn true;\n}\n\n$subName = null;\nif (false !== strpos($name, '.')) {\nlist($name, $subName) = explode('.', $name, 2);\n}\n\n\n $nodeRegex = '#(\"'.$mainNode.'\":\\s*\\{)('.self::$RECURSE_BLOCKS.')(\\})#s';\nif (!preg_match($nodeRegex, $this->contents, $match)) {\nreturn false;\n}\n\n$children = $match[2];\n\n\n if (!@json_decode('{'.$children.'}')) {\nreturn false;\n}\n\n$that = $this;\n\n\n if (preg_match('{(\"'.preg_quote($name).'\"\\s*:\\s*)('.self::$JSON_VALUE.')(,?)}', $children, $matches)) {\n$children = preg_replace_callback('{(\"'.preg_quote($name).'\"\\s*:\\s*)('.self::$JSON_VALUE.')(,?)}', function ($matches) use ($name, $subName, $value, $that) {\nif ($subName !== null) {\n$curVal = json_decode($matches[2], true);\n$curVal[$subName] = $value;\n$value = $curVal;\n}\n\nreturn $matches[1] . $that->format($value, 1) . $matches[3];\n}, $children);\n} elseif (preg_match('#[^\\s](\\s*)$#', $children, $match)) {\nif ($subName !== null) {\n$value = array($subName => $value);\n}\n\n\n $children = preg_replace(\n'#'.$match[1].'$#',\naddcslashes(',' . $this->newline . $this->indent . $this->indent . JsonFile::encode($name).': '.$this->format($value, 1) . $match[1], '\\\\'),\n$children\n);\n} else {\nif ($subName !== null) {\n$value = array($subName => $value);\n}\n\n\n $children = $this->newline . $this->indent . $this->indent . JsonFile::encode($name).': '.$this->format($value, 1) . $children;\n}\n\n$this->contents = preg_replace($nodeRegex, addcslashes('${1}'.$children.'$3', '\\\\'), $this->contents);\n\nreturn true;\n}\n\npublic function removeSubNode($mainNode, $name)\n{\n\n if (!preg_match('#\"'.$mainNode.'\":\\s*\\{#', $this->contents)) {\nreturn true;\n}\n\n\n if (preg_match('#\"'.$mainNode.'\":\\s*\\{\\s*\\}#s', $this->contents)) {\nreturn true;\n}\n\n\n $nodeRegex = '#(\"'.$mainNode.'\":\\s*\\{)('.self::$RECURSE_BLOCKS.')(\\})#s';\nif (!preg_match($nodeRegex, $this->contents, $match)) {\nreturn false;\n}\n\n$children = $match[2];\n\n\n if (!@json_decode('{'.$children.'}')) {\nreturn false;\n}\n\n$subName = null;\nif (false !== strpos($name, '.')) {\nlist($name, $subName) = explode('.', $name, 2);\n}\n\n\n if (preg_match('{\"'.preg_quote($name).'\"\\s*:}i', $children)) {\n\n if (preg_match_all('{\"'.preg_quote($name).'\"\\s*:\\s*(?:'.self::$JSON_VALUE.')}', $children, $matches)) {\n$bestMatch = '';\nforeach ($matches[0] as $match) {\nif (strlen($bestMatch) < strlen($match)) {\n$bestMatch = $match;\n}\n}\n$childrenClean = preg_replace('{,\\s*'.preg_quote($bestMatch).'}i', '', $children, -1, $count);\nif (1 !== $count) {\n$childrenClean = preg_replace('{'.preg_quote($bestMatch).'\\s*,?\\s*}i', '', $childrenClean, -1, $count);\nif (1 !== $count) {\nreturn false;\n}\n}\n}\n}\n\n\n if (!trim($childrenClean)) {\n$this->contents = preg_replace($nodeRegex, '$1'.$this->newline.$this->indent.'}', $this->contents);\n\n\n if ($subName !== null) {\n$curVal = json_decode('{'.$children.'}', true);\nunset($curVal[$name][$subName]);\n$this->addSubNode($mainNode, $name, $curVal[$name]);\n}\n\nreturn true;\n}\n\n$that = $this;\n$this->contents = preg_replace_callback($nodeRegex, function ($matches) use ($that, $name, $subName, $childrenClean) {\nif ($subName !== null) {\n$curVal = json_decode('{'.$matches[2].'}', true);\nunset($curVal[$name][$subName]);\n$childrenClean = substr($that->format($curVal, 0), 1, -1);\n}\n\nreturn $matches[1] . $childrenClean . $matches[3];\n}, $this->contents);\n\nreturn true;\n}\n\npublic function addMainKey($key, $content)\n{\n$content = $this->format($content);\n\n\n $regex = '{^(\\s*\\{\\s*(?:'.self::$JSON_STRING.'\\s*:\\s*'.self::$JSON_VALUE.'\\s*,\\s*)*?)'.\n'('.preg_quote(JsonFile::encode($key)).'\\s*:\\s*'.self::$JSON_VALUE.')(.*)}s';\nif (preg_match($regex, $this->contents, $matches)) {\n\n if (!@json_decode('{'.$matches[2].'}')) {\nreturn false;\n}\n\n$this->contents = $matches[1] . JsonFile::encode($key).': '.$content . $matches[3];\n\nreturn true;\n}\n\n\n if (preg_match('#[^{\\s](\\s*)\\}$#', $this->contents, $match)) {\n$this->contents = preg_replace(\n'#'.$match[1].'\\}$#',\naddcslashes(',' . $this->newline . $this->indent . JsonFile::encode($key). ': '. $content . $this->newline . '}', '\\\\'),\n$this->contents\n);\n\nreturn true;\n}\n\n\n $this->contents = preg_replace(\n'#\\}$#',\naddcslashes($this->indent . JsonFile::encode($key). ': '.$content . $this->newline . '}', '\\\\'),\n$this->contents\n);\n\nreturn true;\n}\n\npublic function format($data, $depth = 0)\n{\nif (is_array($data)) {\nreset($data);\n\nif (is_numeric(key($data))) {\nforeach ($data as $key => $val) {\n$data[$key] = $this->format($val, $depth + 1);\n}\n\nreturn '['.implode(', ', $data).']';\n}\n\n$out = '{' . $this->newline;\n$elems = array();\nforeach ($data as $key => $val) {\n$elems[] = str_repeat($this->indent, $depth + 2) . JsonFile::encode($key). ': '.$this->format($val, $depth + 1);\n}\n\nreturn $out . implode(','.$this->newline, $elems) . $this->newline . str_repeat($this->indent, $depth + 1) . '}';\n}\n\nreturn JsonFile::encode($data);\n}\n\nprotected function detectIndenting()\n{\nif (preg_match('{^(\\s+)\"}m', $this->contents, $match)) {\n$this->indent = $match[1];\n} else {\n$this->indent = '    ';\n}\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Json;\n\nuse Composer\\Composer;\nuse JsonSchema\\Validator;\nuse Seld\\JsonLint\\JsonParser;\nuse Seld\\JsonLint\\ParsingException;\nuse Composer\\Util\\RemoteFilesystem;\nuse Composer\\Downloader\\TransportException;\n\n\n\n\n\n\n\nclass JsonFile\n{\nconst LAX_SCHEMA = 1;\nconst STRICT_SCHEMA = 2;\n\nconst JSON_UNESCAPED_SLASHES = 64;\nconst JSON_PRETTY_PRINT = 128;\nconst JSON_UNESCAPED_UNICODE = 256;\n\nprivate $path;\nprivate $rfs;\n\n\n\n\n\n\n\n\npublic function __construct($path, RemoteFilesystem $rfs = null)\n{\n$this->path = $path;\n\nif (null === $rfs && preg_match('{^https?://}i', $path)) {\nthrow new \\InvalidArgumentException('http urls require a RemoteFilesystem instance to be passed');\n}\n$this->rfs = $rfs;\n}\n\n\n\n\npublic function getPath()\n{\nreturn $this->path;\n}\n\n\n\n\n\n\npublic function exists()\n{\nreturn is_file($this->path);\n}\n\n\n\n\n\n\n\npublic function read()\n{\ntry {\nif ($this->rfs) {\n$json = $this->rfs->getContents($this->path, $this->path, false);\n} else {\n$json = file_get_contents($this->path);\n}\n} catch (TransportException $e) {\nthrow new \\RuntimeException($e->getMessage(), 0, $e);\n} catch (\\Exception $e) {\nthrow new \\RuntimeException('Could not read '.$this->path.\"\\n\\n\".$e->getMessage());\n}\n\nreturn static::parseJson($json, $this->path);\n}\n\n\n\n\n\n\n\n\npublic function write(array $hash, $options = 448)\n{\n$dir = dirname($this->path);\nif (!is_dir($dir)) {\nif (file_exists($dir)) {\nthrow new \\UnexpectedValueException(\n$dir.' exists and is not a directory.'\n);\n}\nif (!@mkdir($dir, 0777, true)) {\nthrow new \\UnexpectedValueException(\n$dir.' does not exist and could not be created.'\n);\n}\n}\nfile_put_contents($this->path, static::encode($hash, $options). ($options & self::JSON_PRETTY_PRINT ? \"\\n\" : ''));\n}\n\n\n\n\n\n\n\n\npublic function validateSchema($schema = self::STRICT_SCHEMA)\n{\n$content = file_get_contents($this->path);\n$data = json_decode($content);\n\nif (null === $data && 'null' !== $content) {\nself::validateSyntax($content, $this->path);\n}\n\n$schemaFile = __DIR__ . '/../../../res/composer-schema.json';\n$schemaData = json_decode(file_get_contents($schemaFile));\n\nif ($schema === self::LAX_SCHEMA) {\n$schemaData->additionalProperties = true;\n$schemaData->properties->name->required = false;\n$schemaData->properties->description->required = false;\n}\n\n$validator = new Validator();\n$validator->check($data, $schemaData);\n\n\n\nif (!$validator->isValid()) {\n$errors = array();\nforeach ((array) $validator->getErrors() as $error) {\n$errors[] = ($error['property'] ? $error['property'].' : ' : '').$error['message'];\n}\nthrow new JsonValidationException('\"'.$this->path.'\" does not match the expected JSON schema', $errors);\n}\n\nreturn true;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\npublic static function encode($data, $options = 448)\n{\nif (version_compare(PHP_VERSION, '5.4', '>=')) {\nreturn json_encode($data, $options);\n}\n\n$json = json_encode($data);\n\n$prettyPrint = (bool) ($options & self::JSON_PRETTY_PRINT);\n$unescapeUnicode = (bool) ($options & self::JSON_UNESCAPED_UNICODE);\n$unescapeSlashes = (bool) ($options & self::JSON_UNESCAPED_SLASHES);\n\nif (!$prettyPrint && !$unescapeUnicode && !$unescapeSlashes) {\nreturn $json;\n}\n\n$result = '';\n$pos = 0;\n$strLen = strlen($json);\n$indentStr = '    ';\n$newLine = \"\\n\";\n$outOfQuotes = true;\n$buffer = '';\n$noescape = true;\n\nfor ($i = 0; $i < $strLen; $i++) {\n\n $char = substr($json, $i, 1);\n\n\n if ('\"' === $char && $noescape) {\n$outOfQuotes = !$outOfQuotes;\n}\n\nif (!$outOfQuotes) {\n$buffer .= $char;\n$noescape = '\\\\' === $char ? !$noescape : true;\ncontinue;\n} elseif ('' !== $buffer) {\nif ($unescapeSlashes) {\n$buffer = str_replace('\\\\/', '/', $buffer);\n}\n\nif ($unescapeUnicode && function_exists('mb_convert_encoding')) {\n\n $buffer = preg_replace_callback('/\\\\\\\\u([0-9a-f]{4})/i', function($match) {\nreturn mb_convert_encoding(pack('H*', $match[1]), 'UTF-8', 'UCS-2BE');\n}, $buffer);\n}\n\n$result .= $buffer.$char;\n$buffer = '';\ncontinue;\n}\n\nif (':' === $char) {\n\n $char .= ' ';\n} elseif (('}' === $char || ']' === $char)) {\n$pos--;\n$prevChar = substr($json, $i - 1, 1);\n\nif ('{' !== $prevChar && '[' !== $prevChar) {\n\n \n $result .= $newLine;\nfor ($j = 0; $j < $pos; $j++) {\n$result .= $indentStr;\n}\n} else {\n\n $result = rtrim($result).\"\\n\\n\".$indentStr;\n}\n}\n\n$result .= $char;\n\n\n \n if (',' === $char || '{' === $char || '[' === $char) {\n$result .= $newLine;\n\nif ('{' === $char || '[' === $char) {\n$pos++;\n}\n\nfor ($j = 0; $j < $pos; $j++) {\n$result .= $indentStr;\n}\n}\n}\n\nreturn $result;\n}\n\n\n\n\n\n\n\n\n\npublic static function parseJson($json, $file = null)\n{\n$data = json_decode($json, true);\nif (null === $data && JSON_ERROR_NONE !== json_last_error()) {\nself::validateSyntax($json, $file);\n}\n\nreturn $data;\n}\n\n\n\n\n\n\n\n\n\n\n\nprotected static function validateSyntax($json, $file = null)\n{\n$parser = new JsonParser();\n$result = $parser->lint($json);\nif (null === $result) {\nif (defined('JSON_ERROR_UTF8') && JSON_ERROR_UTF8 === json_last_error()) {\nthrow new \\UnexpectedValueException('\"'.$file.'\" is not UTF-8, could not parse as JSON');\n}\n\nreturn true;\n}\n\nthrow new ParsingException('\"'.$file.'\" does not contain valid JSON'.\"\\n\".$result->getMessage(), $result->getDetails());\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Json;\n\nuse Exception;\n\n\n\n\nclass JsonValidationException extends Exception\n{\nprotected $errors;\n\npublic function __construct($message, $errors = array())\n{\n$this->errors = $errors;\nparent::__construct($message);\n}\n\npublic function getErrors()\n{\nreturn $this->errors;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer;\n\nuse Composer\\Config\\ConfigSourceInterface;\n\n\n\n\nclass Config\n{\npublic static $defaultConfig = array(\n'process-timeout' => 300,\n'use-include-path' => false,\n'preferred-install' => 'auto',\n'notify-on-install' => true,\n'github-protocols' => array('git', 'https', 'http'),\n'vendor-dir' => 'vendor',\n'bin-dir' => '{$vendor-dir}/bin',\n'cache-dir' => '{$home}/cache',\n'cache-files-dir' => '{$cache-dir}/files',\n'cache-repo-dir' => '{$cache-dir}/repo',\n'cache-vcs-dir' => '{$cache-dir}/vcs',\n'cache-ttl' => 15552000, \n 'cache-files-ttl' => null, \n 'cache-files-maxsize' => '300MiB',\n'discard-changes' => false,\n);\n\npublic static $defaultRepositories = array(\n'packagist' => array(\n'type' => 'composer',\n'url' => 'https?://packagist.org',\n'allow_ssl_downgrade' => true,\n)\n);\n\nprivate $config;\nprivate $repositories;\nprivate $configSource;\n\npublic function __construct()\n{\n\n $this->config = static::$defaultConfig;\n$this->repositories = static::$defaultRepositories;\n}\n\npublic function setConfigSource(ConfigSourceInterface $source)\n{\n$this->configSource = $source;\n}\n\npublic function getConfigSource()\n{\nreturn $this->configSource;\n}\n\n\n\n\n\n\npublic function merge(array $config)\n{\n\n if (!empty($config['config']) && is_array($config['config'])) {\nforeach ($config['config'] as $key => $val) {\nif (in_array($key, array('github-oauth')) && isset($this->config[$key])) {\n$this->config[$key] = array_merge($this->config[$key], $val);\n} else {\n$this->config[$key] = $val;\n}\n}\n}\n\nif (!empty($config['repositories']) && is_array($config['repositories'])) {\n$this->repositories = array_reverse($this->repositories, true);\n$newRepos = array_reverse($config['repositories'], true);\nforeach ($newRepos as $name => $repository) {\n\n if (false === $repository) {\nunset($this->repositories[$name]);\ncontinue;\n}\n\n\n if (1 === count($repository) && false === current($repository)) {\nunset($this->repositories[key($repository)]);\ncontinue;\n}\n\n\n if (is_int($name)) {\n$this->repositories[] = $repository;\n} else {\n$this->repositories[$name] = $repository;\n}\n}\n$this->repositories = array_reverse($this->repositories, true);\n}\n}\n\n\n\n\npublic function getRepositories()\n{\nreturn $this->repositories;\n}\n\n\n\n\n\n\n\n\npublic function get($key)\n{\nswitch ($key) {\ncase 'vendor-dir':\ncase 'bin-dir':\ncase 'process-timeout':\ncase 'cache-dir':\ncase 'cache-files-dir':\ncase 'cache-repo-dir':\ncase 'cache-vcs-dir':\n\n $env = 'COMPOSER_' . strtoupper(strtr($key, '-', '_'));\n\nreturn rtrim($this->process(getenv($env) ?: $this->config[$key]), '/\\\\');\n\ncase 'cache-ttl':\nreturn (int) $this->config[$key];\n\ncase 'cache-files-maxsize':\nif (!preg_match('/^\\s*([0-9.]+)\\s*(?:([kmg])(?:i?b)?)?\\s*$/i', $this->config[$key], $matches)) {\nthrow new \\RuntimeException(\n\"Could not parse the value of 'cache-files-maxsize': {$this->config[$key]}\"\n);\n}\n$size = $matches[1];\nif (isset($matches[2])) {\nswitch (strtolower($matches[2])) {\ncase 'g':\n$size *= 1024;\n\n case 'm':\n$size *= 1024;\n\n case 'k':\n$size *= 1024;\nbreak;\n}\n}\n\nreturn $size;\n\ncase 'cache-files-ttl':\nif (isset($this->config[$key])) {\nreturn (int) $this->config[$key];\n}\n\nreturn (int) $this->config['cache-ttl'];\n\ncase 'home':\nreturn rtrim($this->process($this->config[$key]), '/\\\\');\n\ncase 'discard-changes':\nif ($env = getenv('COMPOSER_DISCARD_CHANGES')) {\nif (!in_array($env, array('stash', 'true', 'false', '1', '0'), true)) {\nthrow new \\RuntimeException(\n\"Invalid value for COMPOSER_DISCARD_CHANGES: {$env}. Expected 1, 0, true, false or stash\"\n);\n}\nif ('stash' === $env) {\nreturn 'stash';\n}\n\n\n return $env !== 'false' && (bool) $env;\n}\n\nif (!in_array($this->config[$key], array(true, false, 'stash'), true)) {\nthrow new \\RuntimeException(\n\"Invalid value for 'discard-changes': {$this->config[$key]}. Expected true, false or stash\"\n);\n}\n\nreturn $this->config[$key];\n\ndefault:\nif (!isset($this->config[$key])) {\nreturn null;\n}\n\nreturn $this->process($this->config[$key]);\n}\n}\n\npublic function all()\n{\n$all = array(\n'repositories' => $this->getRepositories(),\n);\nforeach (array_keys($this->config) as $key) {\n$all['config'][$key] = $this->get($key);\n}\n\nreturn $all;\n}\n\npublic function raw()\n{\nreturn array(\n'repositories' => $this->getRepositories(),\n'config' => $this->config,\n);\n}\n\n\n\n\n\n\n\npublic function has($key)\n{\nreturn array_key_exists($key, $this->config);\n}\n\n\n\n\n\n\n\nprivate function process($value)\n{\n$config = $this;\n\nif (!is_string($value)) {\nreturn $value;\n}\n\nreturn preg_replace_callback('#\\{\\$(.+)\\}#', function ($match) use ($config) {\nreturn $config->get($match[1]);\n}, $value);\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Script;\n\nuse Composer\\Composer;\nuse Composer\\IO\\IOInterface;\n\n\n\n\n\n\nclass Event\n{\n\n\n\nprivate $name;\n\n\n\n\nprivate $composer;\n\n\n\n\nprivate $io;\n\n\n\n\nprivate $devMode;\n\n\n\n\n\n\n\n\n\npublic function __construct($name, Composer $composer, IOInterface $io, $devMode = false)\n{\n$this->name = $name;\n$this->composer = $composer;\n$this->io = $io;\n$this->devMode = $devMode;\n}\n\n\n\n\n\n\npublic function getName()\n{\nreturn $this->name;\n}\n\n\n\n\n\n\npublic function getComposer()\n{\nreturn $this->composer;\n}\n\n\n\n\n\n\npublic function getIO()\n{\nreturn $this->io;\n}\n\n\n\n\n\n\npublic function isDevMode()\n{\nreturn $this->devMode;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Script;\n\n\n\n\n\n\n\nclass ScriptEvents\n{\n\n\n\n\n\n\n\nconst PRE_INSTALL_CMD = 'pre-install-cmd';\n\n\n\n\n\n\n\n\nconst POST_INSTALL_CMD = 'post-install-cmd';\n\n\n\n\n\n\n\n\nconst PRE_UPDATE_CMD = 'pre-update-cmd';\n\n\n\n\n\n\n\n\nconst POST_UPDATE_CMD = 'post-update-cmd';\n\n\n\n\n\n\n\n\nconst PRE_PACKAGE_INSTALL = 'pre-package-install';\n\n\n\n\n\n\n\n\nconst POST_PACKAGE_INSTALL = 'post-package-install';\n\n\n\n\n\n\n\n\nconst PRE_PACKAGE_UPDATE = 'pre-package-update';\n\n\n\n\n\n\n\n\nconst POST_PACKAGE_UPDATE = 'post-package-update';\n\n\n\n\n\n\n\n\nconst PRE_PACKAGE_UNINSTALL = 'pre-package-uninstall';\n\n\n\n\n\n\n\n\nconst POST_PACKAGE_UNINSTALL = 'post-package-uninstall';\n\n\n\n\n\n\n\n\nconst PRE_AUTOLOAD_DUMP = 'pre-autoload-dump';\n\n\n\n\n\n\n\n\nconst POST_AUTOLOAD_DUMP = 'post-autoload-dump';\n\n\n\n\n\n\n\n\nconst POST_ROOT_PACKAGE_INSTALL = 'post-root-package-install';\n\n\n\n\n\n\n\n\n\nconst POST_CREATE_PROJECT_CMD = 'post-create-project-cmd';\n\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Script;\n\nuse Composer\\Composer;\n\n\n\n\n\n\nclass CommandEvent extends Event\n{\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Script;\n\nuse Composer\\Composer;\nuse Composer\\IO\\IOInterface;\nuse Composer\\DependencyResolver\\Operation\\OperationInterface;\n\n\n\n\n\n\nclass PackageEvent extends Event\n{\n\n\n\nprivate $operation;\n\n\n\n\n\n\n\n\n\n\npublic function __construct($name, Composer $composer, IOInterface $io, $devMode, OperationInterface $operation)\n{\nparent::__construct($name, $composer, $io, $devMode);\n$this->operation = $operation;\n}\n\n\n\n\n\n\npublic function getOperation()\n{\nreturn $this->operation;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Script;\n\nuse Composer\\IO\\IOInterface;\nuse Composer\\Composer;\nuse Composer\\DependencyResolver\\Operation\\OperationInterface;\nuse Composer\\Util\\ProcessExecutor;\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass EventDispatcher\n{\nprotected $composer;\nprotected $io;\nprotected $loader;\nprotected $process;\n\n\n\n\n\n\n\n\npublic function __construct(Composer $composer, IOInterface $io, ProcessExecutor $process = null)\n{\n$this->composer = $composer;\n$this->io = $io;\n$this->process = $process ?: new ProcessExecutor();\n}\n\n\n\n\n\n\n\npublic function dispatch($eventName, Event $event = null)\n{\nif (null == $event) {\n$event = new Event($eventName, $this->composer, $this->io);\n}\n\n$this->doDispatch($event);\n}\n\n\n\n\n\n\n\n\npublic function dispatchPackageEvent($eventName, $devMode, OperationInterface $operation)\n{\n$this->doDispatch(new PackageEvent($eventName, $this->composer, $this->io, $devMode, $operation));\n}\n\n\n\n\n\n\n\npublic function dispatchCommandEvent($eventName, $devMode)\n{\n$this->doDispatch(new CommandEvent($eventName, $this->composer, $this->io, $devMode));\n}\n\n\n\n\n\n\n\n\nprotected function doDispatch(Event $event)\n{\n$listeners = $this->getListeners($event);\n\nforeach ($listeners as $callable) {\nif ($this->isPhpScript($callable)) {\n$className = substr($callable, 0, strpos($callable, '::'));\n$methodName = substr($callable, strpos($callable, '::') + 2);\n\nif (!class_exists($className)) {\n$this->io->write('<warning>Class '.$className.' is not autoloadable, can not call '.$event->getName().' script</warning>');\ncontinue;\n}\nif (!is_callable($callable)) {\n$this->io->write('<warning>Method '.$callable.' is not callable, can not call '.$event->getName().' script</warning>');\ncontinue;\n}\n\ntry {\n$this->executeEventPhpScript($className, $methodName, $event);\n} catch (\\Exception $e) {\n$message = \"Script %s handling the %s event terminated with an exception\";\n$this->io->write('<error>'.sprintf($message, $callable, $event->getName()).'</error>');\nthrow $e;\n}\n} else {\nif (0 !== ($exitCode = $this->process->execute($callable))) {\n$event->getIO()->write(sprintf('<error>Script %s handling the %s event returned with an error</error>', $callable, $event->getName()));\n\nthrow new \\RuntimeException('Error Output: '.$this->process->getErrorOutput(), $exitCode);\n}\n}\n}\n}\n\n\n\n\n\n\nprotected function executeEventPhpScript($className, $methodName, Event $event)\n{\n$className::$methodName($event);\n}\n\n\n\n\n\nprotected function getListeners(Event $event)\n{\n$package = $this->composer->getPackage();\n$scripts = $package->getScripts();\n\nif (empty($scripts[$event->getName()])) {\nreturn array();\n}\n\nif ($this->loader) {\n$this->loader->unregister();\n}\n\n$generator = $this->composer->getAutoloadGenerator();\n$packages = $this->composer->getRepositoryManager()->getLocalRepository()->getCanonicalPackages();\n$packageMap = $generator->buildPackageMap($this->composer->getInstallationManager(), $package, $packages);\n$map = $generator->parseAutoloads($packageMap, $package);\n$this->loader = $generator->createLoader($map);\n$this->loader->register();\n\nreturn $scripts[$event->getName()];\n}\n\n\n\n\n\n\n\nprotected function isPhpScript($callable)\n{\nreturn false === strpos($callable, ' ') && false !== strpos($callable, '::');\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Installer;\n\nuse Composer\\Repository\\InstalledRepositoryInterface;\nuse Composer\\Package\\PackageInterface;\n\n\n\n\n\n\n\n\nclass NoopInstaller implements InstallerInterface\n{\n\n\n\npublic function supports($packageType)\n{\nreturn true;\n}\n\n\n\n\npublic function isInstalled(InstalledRepositoryInterface $repo, PackageInterface $package)\n{\nreturn $repo->hasPackage($package);\n}\n\n\n\n\npublic function install(InstalledRepositoryInterface $repo, PackageInterface $package)\n{\nif (!$repo->hasPackage($package)) {\n$repo->addPackage(clone $package);\n}\n}\n\n\n\n\npublic function update(InstalledRepositoryInterface $repo, PackageInterface $initial, PackageInterface $target)\n{\nif (!$repo->hasPackage($initial)) {\nthrow new \\InvalidArgumentException('Package is not installed: '.$initial);\n}\n\n$repo->removePackage($initial);\nif (!$repo->hasPackage($target)) {\n$repo->addPackage(clone $target);\n}\n}\n\n\n\n\npublic function uninstall(InstalledRepositoryInterface $repo, PackageInterface $package)\n{\nif (!$repo->hasPackage($package)) {\n\n return;\nthrow new \\InvalidArgumentException('Package is not installed: '.$package);\n}\n$repo->removePackage($package);\n}\n\n\n\n\npublic function getInstallPath(PackageInterface $package)\n{\n$targetDir = $package->getTargetDir();\n\nreturn $package->getPrettyName() . ($targetDir ? '/'.$targetDir : '');\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Installer;\n\nuse Composer\\Repository\\InstalledRepositoryInterface;\nuse Composer\\Package\\PackageInterface;\n\n\n\n\n\n\nclass MetapackageInstaller implements InstallerInterface\n{\n\n\n\npublic function supports($packageType)\n{\nreturn $packageType === 'metapackage';\n}\n\n\n\n\npublic function isInstalled(InstalledRepositoryInterface $repo, PackageInterface $package)\n{\nreturn $repo->hasPackage($package);\n}\n\n\n\n\npublic function install(InstalledRepositoryInterface $repo, PackageInterface $package)\n{\n$repo->addPackage(clone $package);\n}\n\n\n\n\npublic function update(InstalledRepositoryInterface $repo, PackageInterface $initial, PackageInterface $target)\n{\nif (!$repo->hasPackage($initial)) {\nthrow new \\InvalidArgumentException('Package is not installed: '.$initial);\n}\n\n$repo->removePackage($initial);\n$repo->addPackage(clone $target);\n}\n\n\n\n\npublic function uninstall(InstalledRepositoryInterface $repo, PackageInterface $package)\n{\nif (!$repo->hasPackage($package)) {\n\n return;\nthrow new \\InvalidArgumentException('Package is not installed: '.$package);\n}\n\n$repo->removePackage($package);\n}\n\n\n\n\npublic function getInstallPath(PackageInterface $package)\n{\nreturn '';\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Installer;\n\nuse Composer\\IO\\IOInterface;\nuse Composer\\Composer;\nuse Composer\\Downloader\\PearPackageExtractor;\nuse Composer\\Repository\\InstalledRepositoryInterface;\nuse Composer\\Package\\PackageInterface;\n\n\n\n\n\n\n\nclass PearInstaller extends LibraryInstaller\n{\n\n\n\n\n\n\n\npublic function __construct(IOInterface $io, Composer $composer, $type = 'pear-library')\n{\nparent::__construct($io, $composer, $type);\n}\n\n\n\n\npublic function update(InstalledRepositoryInterface $repo, PackageInterface $initial, PackageInterface $target)\n{\n$this->uninstall($repo, $initial);\n$this->install($repo, $target);\n}\n\nprotected function installCode(PackageInterface $package)\n{\nparent::installCode($package);\nparent::initializeBinDir();\n\n$isWindows = defined('PHP_WINDOWS_VERSION_BUILD');\n$php_bin = $this->binDir . ($isWindows ? '/composer-php.bat' : '/composer-php');\n\nif (!$isWindows) {\n$php_bin = '/usr/bin/env ' . $php_bin;\n}\n\n$installPath = $this->getInstallPath($package);\n$vars = array(\n'os' => $isWindows ? 'windows' : 'linux',\n'php_bin' => $php_bin,\n'pear_php' => $installPath,\n'php_dir' => $installPath,\n'bin_dir' => $installPath . '/bin',\n'data_dir' => $installPath . '/data',\n'version' => $package->getPrettyVersion(),\n);\n\n$packageArchive = $this->getInstallPath($package).'/'.pathinfo($package->getDistUrl(), PATHINFO_BASENAME);\n$pearExtractor = new PearPackageExtractor($packageArchive);\n$pearExtractor->extractTo($this->getInstallPath($package), array('php' => '/', 'script' => '/bin', 'data' => '/data'), $vars);\n\nif ($this->io->isVerbose()) {\n$this->io->write('    Cleaning up');\n}\nunlink($packageArchive);\n}\n\nprotected function getBinaries(PackageInterface $package)\n{\n$binariesPath = $this->getInstallPath($package) . '/bin/';\n$binaries = array();\nif (file_exists($binariesPath)) {\nforeach (new \\FilesystemIterator($binariesPath, \\FilesystemIterator::KEY_AS_FILENAME | \\FilesystemIterator::CURRENT_AS_FILEINFO) as $fileName => $value) {\nif (!$value->isDir()) {\n$binaries[] = 'bin/'.$fileName;\n}\n}\n}\n\nreturn $binaries;\n}\n\nprotected function initializeBinDir()\n{\nparent::initializeBinDir();\nfile_put_contents($this->binDir.'/composer-php', $this->generateUnixyPhpProxyCode());\nchmod($this->binDir.'/composer-php', 0777);\nfile_put_contents($this->binDir.'/composer-php.bat', $this->generateWindowsPhpProxyCode());\nchmod($this->binDir.'/composer-php.bat', 0777);\n}\n\nprotected function generateWindowsProxyCode($bin, $link)\n{\n$binPath = $this->filesystem->findShortestPath($link, $bin);\nif ('.bat' === substr($bin, -4)) {\n$caller = 'call';\n} else {\n$handle = fopen($bin, 'r');\n$line = fgets($handle);\nfclose($handle);\nif (preg_match('{^#!/(?:usr/bin/env )?(?:[^/]+/)*(.+)$}m', $line, $match)) {\n$caller = trim($match[1]);\n} else {\n$caller = 'php';\n}\n\nif ($caller === 'php') {\nreturn \"@echo off\\r\\n\".\n\"pushd .\\r\\n\".\n\"cd %~dp0\\r\\n\".\n\"set PHP_PROXY=%CD%\\\\composer-php.bat\\r\\n\".\n\"cd \".escapeshellarg(dirname($binPath)).\"\\r\\n\".\n\"set BIN_TARGET=%CD%\\\\\".basename($binPath).\"\\r\\n\".\n\"popd\\r\\n\".\n\"%PHP_PROXY% \\\"%BIN_TARGET%\\\" %*\\r\\n\";\n}\n}\n\nreturn \"@echo off\\r\\n\".\n\"pushd .\\r\\n\".\n\"cd %~dp0\\r\\n\".\n\"cd \".escapeshellarg(dirname($binPath)).\"\\r\\n\".\n\"set BIN_TARGET=%CD%\\\\\".basename($binPath).\"\\r\\n\".\n\"popd\\r\\n\".\n$caller.\" \\\"%BIN_TARGET%\\\" %*\\r\\n\";\n}\n\nprivate function generateWindowsPhpProxyCode()\n{\n$binToVendor = $this->filesystem->findShortestPath($this->binDir, $this->vendorDir, true);\n\nreturn\n\"@echo off\\r\\n\" .\n\"setlocal enabledelayedexpansion\\r\\n\" .\n\"set BIN_DIR=%~dp0\\r\\n\" .\n\"set VENDOR_DIR=%BIN_DIR%\\\\\".$binToVendor.\"\\r\\n\" .\n\"set DIRS=.\\r\\n\" .\n\"FOR /D %%V IN (%VENDOR_DIR%\\\\*) DO (\\r\\n\" .\n\"    FOR /D %%P IN (%%V\\\\*) DO (\\r\\n\" .\n\"        set DIRS=!DIRS!;%%~fP\\r\\n\" .\n\"    )\\r\\n\" .\n\")\\r\\n\" .\n\"php.exe -d include_path=!DIRS! %*\\r\\n\";\n}\n\nprivate function generateUnixyPhpProxyCode()\n{\n$binToVendor = $this->filesystem->findShortestPath($this->binDir, $this->vendorDir, true);\n\nreturn\n\"#!/usr/bin/env sh\\n\".\n\"SRC_DIR=`pwd`\\n\".\n\"BIN_DIR=`dirname $0`\\n\".\n\"VENDOR_DIR=\\$BIN_DIR/\".escapeshellarg($binToVendor).\"\\n\".\n\"DIRS=\\\"\\\"\\n\".\n\"for vendor in \\$VENDOR_DIR/*; do\\n\".\n\"    if [ -d \\\"\\$vendor\\\" ]; then\\n\".\n\"        for package in \\$vendor/*; do\\n\".\n\"            if [ -d \\\"\\$package\\\" ]; then\\n\".\n\"                DIRS=\\\"\\${DIRS}:\\${package}\\\"\\n\".\n\"            fi\\n\".\n\"        done\\n\".\n\"    fi\\n\".\n\"done\\n\".\n\"php -d include_path=\\\".\\$DIRS\\\" $@\\n\";\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Installer;\n\nuse Composer\\Package\\PackageInterface;\nuse Composer\\Downloader\\DownloadManager;\nuse Composer\\Repository\\InstalledRepositoryInterface;\n\n\n\n\n\n\n\nclass ProjectInstaller implements InstallerInterface\n{\nprivate $installPath;\nprivate $downloadManager;\n\npublic function __construct($installPath, DownloadManager $dm)\n{\n$this->installPath = rtrim(strtr($installPath, '\\\\', '/'), '/').'/';\n$this->downloadManager = $dm;\n}\n\n\n\n\n\n\n\npublic function supports($packageType)\n{\nreturn true;\n}\n\n\n\n\npublic function isInstalled(InstalledRepositoryInterface $repo, PackageInterface $package)\n{\nreturn false;\n}\n\n\n\n\npublic function install(InstalledRepositoryInterface $repo, PackageInterface $package)\n{\n$installPath = $this->installPath;\nif (file_exists($installPath) && (count(glob($installPath.'*')) || (count(glob($installPath.'.*')) > 2))) {\nthrow new \\InvalidArgumentException(\"Project directory $installPath is not empty.\");\n}\nif (!is_dir($installPath)) {\nmkdir($installPath, 0777, true);\n}\n$this->downloadManager->download($package, $installPath);\n}\n\n\n\n\npublic function update(InstalledRepositoryInterface $repo, PackageInterface $initial, PackageInterface $target)\n{\nthrow new \\InvalidArgumentException(\"not supported\");\n}\n\n\n\n\npublic function uninstall(InstalledRepositoryInterface $repo, PackageInterface $package)\n{\nthrow new \\InvalidArgumentException(\"not supported\");\n}\n\n\n\n\n\n\n\npublic function getInstallPath(PackageInterface $package)\n{\nreturn $this->installPath;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Installer;\n\nuse Composer\\Composer;\nuse Composer\\IO\\IOInterface;\nuse Composer\\Downloader\\DownloadManager;\nuse Composer\\Repository\\InstalledRepositoryInterface;\nuse Composer\\Package\\PackageInterface;\nuse Composer\\Util\\Filesystem;\n\n\n\n\n\n\n\nclass LibraryInstaller implements InstallerInterface\n{\nprotected $composer;\nprotected $vendorDir;\nprotected $binDir;\nprotected $downloadManager;\nprotected $io;\nprotected $type;\nprotected $filesystem;\n\n\n\n\n\n\n\n\npublic function __construct(IOInterface $io, Composer $composer, $type = 'library')\n{\n$this->composer = $composer;\n$this->downloadManager = $composer->getDownloadManager();\n$this->io = $io;\n$this->type = $type;\n\n$this->filesystem = new Filesystem();\n$this->vendorDir = rtrim($composer->getConfig()->get('vendor-dir'), '/');\n$this->binDir = rtrim($composer->getConfig()->get('bin-dir'), '/');\n}\n\n\n\n\npublic function supports($packageType)\n{\nreturn $packageType === $this->type || null === $this->type;\n}\n\n\n\n\npublic function isInstalled(InstalledRepositoryInterface $repo, PackageInterface $package)\n{\nreturn $repo->hasPackage($package) && is_readable($this->getInstallPath($package));\n}\n\n\n\n\npublic function install(InstalledRepositoryInterface $repo, PackageInterface $package)\n{\n$this->initializeVendorDir();\n$downloadPath = $this->getInstallPath($package);\n\n\n if (!is_readable($downloadPath) && $repo->hasPackage($package)) {\n$this->removeBinaries($package);\n}\n\n$this->installCode($package);\n$this->installBinaries($package);\nif (!$repo->hasPackage($package)) {\n$repo->addPackage(clone $package);\n}\n}\n\n\n\n\npublic function update(InstalledRepositoryInterface $repo, PackageInterface $initial, PackageInterface $target)\n{\nif (!$repo->hasPackage($initial)) {\nthrow new \\InvalidArgumentException('Package is not installed: '.$initial);\n}\n\n$this->initializeVendorDir();\n\n$this->removeBinaries($initial);\n$this->updateCode($initial, $target);\n$this->installBinaries($target);\n$repo->removePackage($initial);\nif (!$repo->hasPackage($target)) {\n$repo->addPackage(clone $target);\n}\n}\n\n\n\n\npublic function uninstall(InstalledRepositoryInterface $repo, PackageInterface $package)\n{\nif (!$repo->hasPackage($package)) {\n\n return;\nthrow new \\InvalidArgumentException('Package is not installed: '.$package);\n}\n\n$this->removeCode($package);\n$this->removeBinaries($package);\n$repo->removePackage($package);\n\n$downloadPath = $this->getPackageBasePath($package);\nif (strpos($package->getName(), '/')) {\n$packageVendorDir = dirname($downloadPath);\nif (is_dir($packageVendorDir) && !glob($packageVendorDir.'/*')) {\n@rmdir($packageVendorDir);\n}\n}\n}\n\n\n\n\npublic function getInstallPath(PackageInterface $package)\n{\n$targetDir = $package->getTargetDir();\n\nreturn $this->getPackageBasePath($package) . ($targetDir ? '/'.$targetDir : '');\n}\n\nprotected function getPackageBasePath(PackageInterface $package)\n{\n$this->initializeVendorDir();\n\nreturn ($this->vendorDir ? $this->vendorDir.'/' : '') . $package->getPrettyName();\n}\n\nprotected function installCode(PackageInterface $package)\n{\n$downloadPath = $this->getInstallPath($package);\n$this->downloadManager->download($package, $downloadPath);\n}\n\nprotected function updateCode(PackageInterface $initial, PackageInterface $target)\n{\n$downloadPath = $this->getInstallPath($initial);\n$this->downloadManager->update($initial, $target, $downloadPath);\n}\n\nprotected function removeCode(PackageInterface $package)\n{\n$downloadPath = $this->getPackageBasePath($package);\n$this->downloadManager->remove($package, $downloadPath);\n}\n\nprotected function getBinaries(PackageInterface $package)\n{\nreturn $package->getBinaries();\n}\n\nprotected function installBinaries(PackageInterface $package)\n{\n$binaries = $this->getBinaries($package);\nif (!$binaries) {\nreturn;\n}\nforeach ($binaries as $bin) {\n$binPath = $this->getInstallPath($package).'/'.$bin;\nif (!file_exists($binPath)) {\n$this->io->write('    <warning>Skipped installation of '.$bin.' for package '.$package->getName().': file not found in package</warning>');\ncontinue;\n}\n\n$this->initializeBinDir();\n$link = $this->binDir.'/'.basename($bin);\nif (file_exists($link)) {\nif (is_link($link)) {\n\n \n \n chmod($link, 0777 & ~umask());\n}\n$this->io->write('    Skipped installation of '.$bin.' for package '.$package->getName().': name conflicts with an existing file');\ncontinue;\n}\nif (defined('PHP_WINDOWS_VERSION_BUILD')) {\n\n if ('.bat' !== substr($binPath, -4)) {\nfile_put_contents($link, $this->generateUnixyProxyCode($binPath, $link));\nchmod($link, 0777 & ~umask());\n$link .= '.bat';\nif (file_exists($link)) {\n$this->io->write('    Skipped installation of '.$bin.'.bat proxy for package '.$package->getName().': a .bat proxy was already installed');\n}\n}\nif (!file_exists($link)) {\nfile_put_contents($link, $this->generateWindowsProxyCode($binPath, $link));\n}\n} else {\n$cwd = getcwd();\ntry {\n\n \n $relativeBin = $this->filesystem->findShortestPath($link, $binPath);\nchdir(dirname($link));\nif (false === symlink($relativeBin, $link)) {\nthrow new \\ErrorException();\n}\n} catch (\\ErrorException $e) {\nfile_put_contents($link, $this->generateUnixyProxyCode($binPath, $link));\n}\nchdir($cwd);\n}\nchmod($link, 0777 & ~umask());\n}\n}\n\nprotected function removeBinaries(PackageInterface $package)\n{\n$binaries = $this->getBinaries($package);\nif (!$binaries) {\nreturn;\n}\nforeach ($binaries as $bin) {\n$link = $this->binDir.'/'.basename($bin);\nif (is_link($link) || file_exists($link)) {\nunlink($link);\n}\nif (file_exists($link.'.bat')) {\nunlink($link.'.bat');\n}\n}\n}\n\nprotected function initializeVendorDir()\n{\n$this->filesystem->ensureDirectoryExists($this->vendorDir);\n$this->vendorDir = realpath($this->vendorDir);\n}\n\nprotected function initializeBinDir()\n{\n$this->filesystem->ensureDirectoryExists($this->binDir);\n$this->binDir = realpath($this->binDir);\n}\n\nprotected function generateWindowsProxyCode($bin, $link)\n{\n$binPath = $this->filesystem->findShortestPath($link, $bin);\nif ('.bat' === substr($bin, -4) || '.exe' === substr($bin, -4)) {\n$caller = 'call';\n} else {\n$handle = fopen($bin, 'r');\n$line = fgets($handle);\nfclose($handle);\nif (preg_match('{^#!/(?:usr/bin/env )?(?:[^/]+/)*(.+)$}m', $line, $match)) {\n$caller = trim($match[1]);\n} else {\n$caller = 'php';\n}\n}\n\nreturn \"@ECHO OFF\\r\\n\".\n\"SET BIN_TARGET=%~dp0\\\\\".escapeshellarg(dirname($binPath)).'\\\\'.basename($binPath).\"\\r\\n\".\n\"{$caller} \\\"%BIN_TARGET%\\\" %*\\r\\n\";\n}\n\nprotected function generateUnixyProxyCode($bin, $link)\n{\n$binPath = $this->filesystem->findShortestPath($link, $bin);\n\nreturn \"#!/usr/bin/env sh\\n\".\n'SRC_DIR=\"`pwd`\"'.\"\\n\".\n'cd \"`dirname \"$0\"`\"'.\"\\n\".\n'cd '.escapeshellarg(dirname($binPath)).\"\\n\".\n'BIN_TARGET=\"`pwd`/'.basename($binPath).\"\\\"\\n\".\n'cd \"$SRC_DIR\"'.\"\\n\".\n'\"$BIN_TARGET\" \"$@\"'.\"\\n\";\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Installer;\n\nuse Composer\\Package\\PackageInterface;\nuse Composer\\Package\\AliasPackage;\nuse Composer\\Repository\\RepositoryInterface;\nuse Composer\\Repository\\InstalledRepositoryInterface;\nuse Composer\\DependencyResolver\\Operation\\OperationInterface;\nuse Composer\\DependencyResolver\\Operation\\InstallOperation;\nuse Composer\\DependencyResolver\\Operation\\UpdateOperation;\nuse Composer\\DependencyResolver\\Operation\\UninstallOperation;\nuse Composer\\DependencyResolver\\Operation\\MarkAliasInstalledOperation;\nuse Composer\\DependencyResolver\\Operation\\MarkAliasUninstalledOperation;\nuse Composer\\Util\\StreamContextFactory;\n\n\n\n\n\n\n\nclass InstallationManager\n{\nprivate $installers = array();\nprivate $cache = array();\nprivate $notifiablePackages = array();\n\npublic function reset()\n{\n$this->notifiablePackages = array();\n}\n\n\n\n\n\n\npublic function addInstaller(InstallerInterface $installer)\n{\narray_unshift($this->installers, $installer);\n$this->cache = array();\n}\n\n\n\n\n\n\npublic function removeInstaller(InstallerInterface $installer)\n{\nif (false !== ($key = array_search($installer, $this->installers, true))) {\narray_splice($this->installers, $key, 1);\n$this->cache = array();\n}\n}\n\n\n\n\n\n\n\n\npublic function disableCustomInstallers()\n{\nforeach ($this->installers as $i => $installer) {\nif (!$installer instanceof InstallerInstaller) {\ncontinue;\n}\n\nunset($this->installers[$i]);\n}\n}\n\n\n\n\n\n\n\n\n\n\npublic function getInstaller($type)\n{\n$type = strtolower($type);\n\nif (isset($this->cache[$type])) {\nreturn $this->cache[$type];\n}\n\nforeach ($this->installers as $installer) {\nif ($installer->supports($type)) {\nreturn $this->cache[$type] = $installer;\n}\n}\n\nthrow new \\InvalidArgumentException('Unknown installer type: '.$type);\n}\n\n\n\n\n\n\n\n\n\npublic function isPackageInstalled(InstalledRepositoryInterface $repo, PackageInterface $package)\n{\nif ($package instanceof AliasPackage) {\nreturn $repo->hasPackage($package) && $this->isPackageInstalled($repo, $package->getAliasOf());\n}\n\nreturn $this->getInstaller($package->getType())->isInstalled($repo, $package);\n}\n\n\n\n\n\n\n\npublic function execute(RepositoryInterface $repo, OperationInterface $operation)\n{\n$method = $operation->getJobType();\n$this->$method($repo, $operation);\n}\n\n\n\n\n\n\n\npublic function install(RepositoryInterface $repo, InstallOperation $operation)\n{\n$package = $operation->getPackage();\n$installer = $this->getInstaller($package->getType());\n$installer->install($repo, $package);\n$this->markForNotification($package);\n}\n\n\n\n\n\n\n\npublic function update(RepositoryInterface $repo, UpdateOperation $operation)\n{\n$initial = $operation->getInitialPackage();\n$target = $operation->getTargetPackage();\n\n$initialType = $initial->getType();\n$targetType = $target->getType();\n\nif ($initialType === $targetType) {\n$installer = $this->getInstaller($initialType);\n$installer->update($repo, $initial, $target);\n$this->markForNotification($target);\n} else {\n$this->getInstaller($initialType)->uninstall($repo, $initial);\n$this->getInstaller($targetType)->install($repo, $target);\n}\n}\n\n\n\n\n\n\n\npublic function uninstall(RepositoryInterface $repo, UninstallOperation $operation)\n{\n$package = $operation->getPackage();\n$installer = $this->getInstaller($package->getType());\n$installer->uninstall($repo, $package);\n}\n\n\n\n\n\n\n\npublic function markAliasInstalled(RepositoryInterface $repo, MarkAliasInstalledOperation $operation)\n{\n$package = $operation->getPackage();\n\nif (!$repo->hasPackage($package)) {\n$repo->addPackage(clone $package);\n}\n}\n\n\n\n\n\n\n\npublic function markAliasUninstalled(RepositoryInterface $repo, MarkAliasUninstalledOperation $operation)\n{\n$package = $operation->getPackage();\n\n$repo->removePackage($package);\n}\n\n\n\n\n\n\n\npublic function getInstallPath(PackageInterface $package)\n{\n$installer = $this->getInstaller($package->getType());\n\nreturn $installer->getInstallPath($package);\n}\n\npublic function notifyInstalls()\n{\nforeach ($this->notifiablePackages as $repoUrl => $packages) {\n\n if (strpos($repoUrl, '%package%')) {\nforeach ($packages as $package) {\n$url = str_replace('%package%', $package->getPrettyName(), $repoUrl);\n\n$params = array(\n'version' => $package->getPrettyVersion(),\n'version_normalized' => $package->getVersion(),\n);\n$opts = array('http' =>\narray(\n'method' => 'POST',\n'header' => array('Content-type: application/x-www-form-urlencoded'),\n'content' => http_build_query($params, '', '&'),\n'timeout' => 3,\n)\n);\n\n$context = StreamContextFactory::getContext($url, $opts);\n@file_get_contents($url, false, $context);\n}\n\ncontinue;\n}\n\n$postData = array('downloads' => array());\nforeach ($packages as $package) {\n$postData['downloads'][] = array(\n'name' => $package->getPrettyName(),\n'version' => $package->getVersion(),\n);\n}\n\n$opts = array('http' =>\narray(\n'method' => 'POST',\n'header' => array('Content-Type: application/json'),\n'content' => json_encode($postData),\n'timeout' => 6,\n)\n);\n\n$context = StreamContextFactory::getContext($repoUrl, $opts);\n@file_get_contents($repoUrl, false, $context);\n}\n\n$this->reset();\n}\n\nprivate function markForNotification(PackageInterface $package)\n{\nif ($package->getNotificationUrl()) {\n$this->notifiablePackages[$package->getNotificationUrl()][$package->getName()] = $package;\n}\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Installer;\n\nuse Composer\\Package\\PackageInterface;\nuse Composer\\Repository\\InstalledRepositoryInterface;\n\n\n\n\n\n\n\ninterface InstallerInterface\n{\n\n\n\n\n\n\npublic function supports($packageType);\n\n\n\n\n\n\n\n\n\npublic function isInstalled(InstalledRepositoryInterface $repo, PackageInterface $package);\n\n\n\n\n\n\n\npublic function install(InstalledRepositoryInterface $repo, PackageInterface $package);\n\n\n\n\n\n\n\n\n\n\npublic function update(InstalledRepositoryInterface $repo, PackageInterface $initial, PackageInterface $target);\n\n\n\n\n\n\n\npublic function uninstall(InstalledRepositoryInterface $repo, PackageInterface $package);\n\n\n\n\n\n\n\npublic function getInstallPath(PackageInterface $package);\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Installer;\n\nuse Composer\\Composer;\nuse Composer\\Package\\Package;\nuse Composer\\IO\\IOInterface;\nuse Composer\\Repository\\InstalledRepositoryInterface;\nuse Composer\\Package\\PackageInterface;\n\n\n\n\n\n\nclass InstallerInstaller extends LibraryInstaller\n{\nprivate $installationManager;\nprivate static $classCounter = 0;\n\n\n\n\n\n\n\n\npublic function __construct(IOInterface $io, Composer $composer, $type = 'library')\n{\nparent::__construct($io, $composer, 'composer-installer');\n$this->installationManager = $composer->getInstallationManager();\n\n$repo = $composer->getRepositoryManager()->getLocalRepository();\nforeach ($repo->getPackages() as $package) {\nif ('composer-installer' === $package->getType()) {\n$this->registerInstaller($package);\n}\n}\n}\n\n\n\n\npublic function install(InstalledRepositoryInterface $repo, PackageInterface $package)\n{\n$extra = $package->getExtra();\nif (empty($extra['class'])) {\nthrow new \\UnexpectedValueException('Error while installing '.$package->getPrettyName().', composer-installer packages should have a class defined in their extra key to be usable.');\n}\n\nparent::install($repo, $package);\n$this->registerInstaller($package);\n}\n\n\n\n\npublic function update(InstalledRepositoryInterface $repo, PackageInterface $initial, PackageInterface $target)\n{\n$extra = $target->getExtra();\nif (empty($extra['class'])) {\nthrow new \\UnexpectedValueException('Error while installing '.$target->getPrettyName().', composer-installer packages should have a class defined in their extra key to be usable.');\n}\n\nparent::update($repo, $initial, $target);\n$this->registerInstaller($target);\n}\n\nprivate function registerInstaller(PackageInterface $package)\n{\n$downloadPath = $this->getInstallPath($package);\n\n$extra = $package->getExtra();\n$classes = is_array($extra['class']) ? $extra['class'] : array($extra['class']);\n\n$generator = $this->composer->getAutoloadGenerator();\n$map = $generator->parseAutoloads(array(array($package, $downloadPath)), new Package('dummy', '1.0.0.0', '1.0.0'));\n$classLoader = $generator->createLoader($map);\n$classLoader->register();\n\nforeach ($classes as $class) {\nif (class_exists($class, false)) {\n$code = file_get_contents($classLoader->findFile($class));\n$code = preg_replace('{^class\\s+(\\S+)}mi', 'class $1_composer_tmp'.self::$classCounter, $code);\neval('?>'.$code);\n$class .= '_composer_tmp'.self::$classCounter;\nself::$classCounter++;\n}\n\n$installer = new $class($this->io, $this->composer);\n$this->installationManager->addInstaller($installer);\n}\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Console;\n\nuse Symfony\\Component\\Console\\Application as BaseApplication;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\Console\\Output\\ConsoleOutput;\nuse Symfony\\Component\\Console\\Formatter\\OutputFormatter;\nuse Composer\\Command;\nuse Composer\\Command\\Helper\\DialogHelper;\nuse Composer\\Composer;\nuse Composer\\Factory;\nuse Composer\\IO\\IOInterface;\nuse Composer\\IO\\ConsoleIO;\nuse Composer\\Json\\JsonValidationException;\nuse Composer\\Util\\ErrorHandler;\n\n\n\n\n\n\n\n\nclass Application extends BaseApplication\n{\n\n\n\nprotected $composer;\n\n\n\n\nprotected $io;\n\nprivate static $logo = '   ______\n  / ____/___  ____ ___  ____  ____  ________  _____\n / /   / __ \\/ __ `__ \\/ __ \\/ __ \\/ ___/ _ \\/ ___/\n/ /___/ /_/ / / / / / / /_/ / /_/ (__  )  __/ /\n\\____/\\____/_/ /_/ /_/ .___/\\____/____/\\___/_/\n                    /_/\n';\n\npublic function __construct()\n{\nif (function_exists('ini_set')) {\nini_set('xdebug.show_exception_trace', false);\nini_set('xdebug.scream', false);\n\n}\nif (function_exists('date_default_timezone_set') && function_exists('date_default_timezone_get')) {\ndate_default_timezone_set(@date_default_timezone_get());\n}\n\nErrorHandler::register();\nparent::__construct('Composer', Composer::VERSION);\n}\n\n\n\n\npublic function run(InputInterface $input = null, OutputInterface $output = null)\n{\nif (null === $output) {\n$styles = Factory::createAdditionalStyles();\n$formatter = new OutputFormatter(null, $styles);\n$output = new ConsoleOutput(ConsoleOutput::VERBOSITY_NORMAL, null, $formatter);\n}\n\nreturn parent::run($input, $output);\n}\n\n\n\n\npublic function doRun(InputInterface $input, OutputInterface $output)\n{\n$this->io = new ConsoleIO($input, $output, $this->getHelperSet());\n\nif (version_compare(PHP_VERSION, '5.3.2', '<')) {\n$output->writeln('<warning>Composer only officially supports PHP 5.3.2 and above, you will most likely encounter problems with your PHP '.PHP_VERSION.', upgrading is strongly recommended.</warning>');\n}\n\nif (defined('COMPOSER_DEV_WARNING_TIME') && $this->getCommandName($input) !== 'self-update' && $this->getCommandName($input) !== 'selfupdate') {\nif (time() > COMPOSER_DEV_WARNING_TIME) {\n$output->writeln(sprintf('<warning>Warning: This development build of composer is over 30 days old. It is recommended to update it by running \"%s self-update\" to get the latest version.</warning>', $_SERVER['PHP_SELF']));\n}\n}\n\nif (getenv('COMPOSER_NO_INTERACTION')) {\n$input->setInteractive(false);\n}\n\nif ($input->hasParameterOption('--profile')) {\n$startTime = microtime(true);\n$this->io->enableDebugging($startTime);\n}\n\nif ($newWorkDir = $this->getNewWorkingDir($input)) {\n$oldWorkingDir = getcwd();\nchdir($newWorkDir);\n}\n\n$result = parent::doRun($input, $output);\n\nif (isset($oldWorkingDir)) {\nchdir($oldWorkingDir);\n}\n\nif (isset($startTime)) {\n$output->writeln('<info>Memory usage: '.round(memory_get_usage() / 1024 / 1024, 2).'MB (peak: '.round(memory_get_peak_usage() / 1024 / 1024, 2).'MB), time: '.round(microtime(true) - $startTime, 2).'s');\n}\n\nreturn $result;\n}\n\n\n\n\n\nprivate function getNewWorkingDir(InputInterface $input)\n{\n$workingDir = $input->getParameterOption(array('--working-dir', '-d'));\nif (false !== $workingDir && !is_dir($workingDir)) {\nthrow new \\RuntimeException('Invalid working directory specified.');\n}\n\nreturn $workingDir;\n}\n\n\n\n\npublic function renderException($exception, $output)\n{\ntry {\n$composer = $this->getComposer(false);\nif ($composer) {\n$config = $composer->getConfig();\n\n$minSpaceFree = 1024*1024;\nif ((($df = disk_free_space($dir = $config->get('home'))) !== false && $df < $minSpaceFree)\n|| (($df = disk_free_space($dir = $config->get('vendor-dir'))) !== false && $df < $minSpaceFree)\n) {\n$output->writeln('<error>The disk hosting '.$dir.' is full, this may be the cause of the following exception</error>');\n}\n}\n} catch (\\Exception $e) {}\n\nreturn parent::renderException($exception, $output);\n}\n\n\n\n\n\n\npublic function getComposer($required = true)\n{\nif (null === $this->composer) {\ntry {\n$this->composer = Factory::create($this->io);\n} catch (\\InvalidArgumentException $e) {\nif ($required) {\n$this->io->write($e->getMessage());\nexit(1);\n}\n} catch (JsonValidationException $e) {\n$errors = ' - ' . implode(PHP_EOL . ' - ', $e->getErrors());\n$message = $e->getMessage() . ':' . PHP_EOL . $errors;\nthrow new JsonValidationException($message);\n}\n\n}\n\nreturn $this->composer;\n}\n\n\n\n\npublic function getIO()\n{\nreturn $this->io;\n}\n\npublic function getHelp()\n{\nreturn self::$logo . parent::getHelp();\n}\n\n\n\n\nprotected function getDefaultCommands()\n{\n$commands = parent::getDefaultCommands();\n$commands[] = new Command\\AboutCommand();\n$commands[] = new Command\\ConfigCommand();\n$commands[] = new Command\\DependsCommand();\n$commands[] = new Command\\InitCommand();\n$commands[] = new Command\\InstallCommand();\n$commands[] = new Command\\CreateProjectCommand();\n$commands[] = new Command\\UpdateCommand();\n$commands[] = new Command\\SearchCommand();\n$commands[] = new Command\\ValidateCommand();\n$commands[] = new Command\\ShowCommand();\n$commands[] = new Command\\RequireCommand();\n$commands[] = new Command\\DumpAutoloadCommand();\n$commands[] = new Command\\StatusCommand();\n$commands[] = new Command\\ArchiveCommand();\n$commands[] = new Command\\DiagnoseCommand();\n$commands[] = new Command\\RunScriptCommand();\n\nif ('phar:' === substr(__FILE__, 0, 5)) {\n$commands[] = new Command\\SelfUpdateCommand();\n}\n\nreturn $commands;\n}\n\n\n\n\nprotected function getDefaultInputDefinition()\n{\n$definition = parent::getDefaultInputDefinition();\n$definition->addOption(new InputOption('--profile', null, InputOption::VALUE_NONE, 'Display timing and memory usage information'));\n$definition->addOption(new InputOption('--working-dir', '-d', InputOption::VALUE_REQUIRED, 'If specified, use the given directory as working directory.'));\n\nreturn $definition;\n}\n\n\n\n\nprotected function getDefaultHelperSet()\n{\n$helperSet = parent::getDefaultHelperSet();\n\n$helperSet->set(new DialogHelper());\n\nreturn $helperSet;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Console;\n\nuse Symfony\\Component\\Console\\Formatter\\OutputFormatter;\n\n\n\n\nclass HtmlOutputFormatter extends OutputFormatter\n{\nprivate static $availableForegroundColors = array(\n30 => 'black',\n31 => 'red',\n32 => 'green',\n33 => 'yellow',\n34 => 'blue',\n35 => 'magenta',\n36 => 'cyan',\n37 => 'white'\n);\nprivate static $availableBackgroundColors = array(\n40 => 'black',\n41 => 'red',\n42 => 'green',\n43 => 'yellow',\n44 => 'blue',\n45 => 'magenta',\n46 => 'cyan',\n47 => 'white'\n);\nprivate static $availableOptions = array(\n1 => 'bold',\n4 => 'underscore',\n\n \n \n );\n\n\n\n\npublic function __construct(array $styles = array())\n{\nparent::__construct(true, $styles);\n}\n\npublic function format($message)\n{\n$formatted = parent::format($message);\n\nreturn preg_replace_callback(\"{\\033\\[([0-9;]+)m(.*?)\\033\\[0m}s\", array($this, 'formatHtml'), $formatted);\n}\n\nprivate function formatHtml($matches)\n{\n$out = '<span style=\"';\nforeach (explode(';', $matches[1]) as $code) {\nif (isset(self::$availableForegroundColors[$code])) {\n$out .= 'color:'.self::$availableForegroundColors[$code].';';\n} elseif (isset(self::$availableBackgroundColors[$code])) {\n$out .= 'background-color:'.self::$availableBackgroundColors[$code].';';\n} elseif (isset(self::$availableOptions[$code])) {\nswitch (self::$availableOptions[$code]) {\ncase 'bold':\n$out .= 'font-weight:bold;';\nbreak;\n\ncase 'underscore':\n$out .= 'text-decoration:underline;';\nbreak;\n}\n}\n}\n\nreturn $out . '\">'.$matches[2].'</span>';\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Autoload;\n\nuse Composer\\Config;\nuse Composer\\Installer\\InstallationManager;\nuse Composer\\Package\\AliasPackage;\nuse Composer\\Package\\PackageInterface;\nuse Composer\\Repository\\InstalledRepositoryInterface;\nuse Composer\\Util\\Filesystem;\nuse Composer\\Script\\EventDispatcher;\nuse Composer\\Script\\ScriptEvents;\n\n\n\n\n\nclass AutoloadGenerator\n{\n\n\n\nprivate $eventDispatcher;\n\npublic function __construct(EventDispatcher $eventDispatcher)\n{\n$this->eventDispatcher = $eventDispatcher;\n}\n\npublic function dump(Config $config, InstalledRepositoryInterface $localRepo, PackageInterface $mainPackage, InstallationManager $installationManager, $targetDir, $scanPsr0Packages = false, $suffix = '')\n{\n$this->eventDispatcher->dispatch(ScriptEvents::PRE_AUTOLOAD_DUMP);\n\n$filesystem = new Filesystem();\n$filesystem->ensureDirectoryExists($config->get('vendor-dir'));\n$basePath = $filesystem->normalizePath(getcwd());\n$vendorPath = $filesystem->normalizePath(realpath($config->get('vendor-dir')));\n$useGlobalIncludePath = (bool) $config->get('use-include-path');\n$targetDir = $vendorPath.'/'.$targetDir;\n$filesystem->ensureDirectoryExists($targetDir);\n\n$vendorPathCode = $filesystem->findShortestPathCode(realpath($targetDir), $vendorPath, true);\n$vendorPathCode52 = str_replace('__DIR__', 'dirname(__FILE__)', $vendorPathCode);\n$vendorPathToTargetDirCode = $filesystem->findShortestPathCode($vendorPath, realpath($targetDir), true);\n\n$appBaseDirCode = $filesystem->findShortestPathCode($vendorPath, $basePath, true);\n$appBaseDirCode = str_replace('__DIR__', '$vendorDir', $appBaseDirCode);\n\n$namespacesFile = <<<EOF\n<?php\n\n// autoload_namespaces.php generated by Composer\n\n\\$vendorDir = $vendorPathCode52;\n\\$baseDir = $appBaseDirCode;\n\nreturn array(\n\nEOF;\n\n$packageMap = $this->buildPackageMap($installationManager, $mainPackage, $localRepo->getCanonicalPackages());\n$autoloads = $this->parseAutoloads($packageMap, $mainPackage);\n\nforeach ($autoloads['psr-0'] as $namespace => $paths) {\n$exportedPaths = array();\nforeach ($paths as $path) {\n$exportedPaths[] = $this->getPathCode($filesystem, $basePath, $vendorPath, $path);\n}\n$exportedPrefix = var_export($namespace, true);\n$namespacesFile .= \"    $exportedPrefix => \";\n$namespacesFile .= \"array(\".implode(', ', $exportedPaths).\"),\\n\";\n}\n$namespacesFile .= \");\\n\";\n\n$classmapFile = <<<EOF\n<?php\n\n// autoload_classmap.php generated by Composer\n\n\\$vendorDir = $vendorPathCode52;\n\\$baseDir = $appBaseDirCode;\n\nreturn array(\n\nEOF;\n\n\n $targetDirLoader = null;\n$mainAutoload = $mainPackage->getAutoload();\nif ($mainPackage->getTargetDir() && !empty($mainAutoload['psr-0'])) {\n$levels = count(explode('/', $filesystem->normalizePath($mainPackage->getTargetDir())));\n$prefixes = implode(', ', array_map(function ($prefix) {\nreturn var_export($prefix, true);\n}, array_keys($mainAutoload['psr-0'])));\n$baseDirFromTargetDirCode = $filesystem->findShortestPathCode($targetDir, $basePath, true);\n\n$targetDirLoader = <<<EOF\n\n    public static function autoload(\\$class)\n    {\n        \\$dir = $baseDirFromTargetDirCode . '/';\n        \\$prefixes = array($prefixes);\n        foreach (\\$prefixes as \\$prefix) {\n            if (0 !== strpos(\\$class, \\$prefix)) {\n                continue;\n            }\n            \\$path = \\$dir . implode('/', array_slice(explode('\\\\\\\\', \\$class), $levels)).'.php';\n            if (!\\$path = stream_resolve_include_path(\\$path)) {\n                return false;\n            }\n            require \\$path;\n\n            return true;\n        }\n    }\n\nEOF;\n}\n\n\n $classMap = array();\nif ($scanPsr0Packages) {\nforeach ($autoloads['psr-0'] as $namespace => $paths) {\nforeach ($paths as $dir) {\n$dir = $filesystem->normalizePath($filesystem->isAbsolutePath($dir) ? $dir : $basePath.'/'.$dir);\nif (!is_dir($dir)) {\ncontinue;\n}\n$whitelist = sprintf(\n'{%s/%s.+(?<!(?<!/)Test\\.php)$}',\npreg_quote($dir),\nstrpos($namespace, '_') === false ? preg_quote(strtr($namespace, '\\\\', '/')) : ''\n);\nforeach (ClassMapGenerator::createMap($dir, $whitelist) as $class => $path) {\nif ('' === $namespace || 0 === strpos($class, $namespace)) {\nif (!isset($classMap[$class])) {\n$path = $this->getPathCode($filesystem, $basePath, $vendorPath, $path);\n$classMap[$class] = $path.\",\\n\";\n}\n}\n}\n}\n}\n}\n\n$autoloads['classmap'] = new \\RecursiveIteratorIterator(new \\RecursiveArrayIterator($autoloads['classmap']));\nforeach ($autoloads['classmap'] as $dir) {\nforeach (ClassMapGenerator::createMap($dir) as $class => $path) {\n$path = $this->getPathCode($filesystem, $basePath, $vendorPath, $path);\n$classMap[$class] = $path.\",\\n\";\n}\n}\n\nksort($classMap);\nforeach ($classMap as $class => $code) {\n$classmapFile .= '    '.var_export($class, true).' => '.$code;\n}\n$classmapFile .= \");\\n\";\n\n$filesCode = \"\";\n$autoloads['files'] = new \\RecursiveIteratorIterator(new \\RecursiveArrayIterator($autoloads['files']));\nforeach ($autoloads['files'] as $functionFile) {\n$filesCode .= '        require '.$this->getPathCode($filesystem, $basePath, $vendorPath, $functionFile).\";\\n\";\n}\n\nif (!$suffix) {\n$suffix = md5(uniqid('', true));\n}\n\nfile_put_contents($targetDir.'/autoload_namespaces.php', $namespacesFile);\nfile_put_contents($targetDir.'/autoload_classmap.php', $classmapFile);\nif ($includePathFile = $this->getIncludePathsFile($packageMap, $filesystem, $basePath, $vendorPath, $vendorPathCode52, $appBaseDirCode)) {\nfile_put_contents($targetDir.'/include_paths.php', $includePathFile);\n}\nfile_put_contents($vendorPath.'/autoload.php', $this->getAutoloadFile($vendorPathToTargetDirCode, $suffix));\nfile_put_contents($targetDir.'/autoload_real.php', $this->getAutoloadRealFile(true, true, (bool) $includePathFile, $targetDirLoader, $filesCode, $vendorPathCode, $appBaseDirCode, $suffix, $useGlobalIncludePath));\n\n\n \n $sourceLoader = fopen(__DIR__.'/ClassLoader.php', 'r');\n$targetLoader = fopen($targetDir.'/ClassLoader.php', 'w+');\nstream_copy_to_stream($sourceLoader, $targetLoader);\nfclose($sourceLoader);\nfclose($targetLoader);\nunset($sourceLoader, $targetLoader);\n\n$this->eventDispatcher->dispatch(ScriptEvents::POST_AUTOLOAD_DUMP);\n}\n\npublic function buildPackageMap(InstallationManager $installationManager, PackageInterface $mainPackage, array $packages)\n{\n\n $packageMap = array(array($mainPackage, ''));\n\nforeach ($packages as $package) {\nif ($package instanceof AliasPackage) {\ncontinue;\n}\n\n$packageMap[] = array(\n$package,\n$installationManager->getInstallPath($package)\n);\n}\n\nreturn $packageMap;\n}\n\n\n\n\n\n\n\n\npublic function parseAutoloads(array $packageMap, PackageInterface $mainPackage)\n{\n$mainPackageMap = array_shift($packageMap);\n$sortedPackageMap = $this->sortPackageMap($packageMap);\n$sortedPackageMap[] = $mainPackageMap;\narray_unshift($packageMap, $mainPackageMap);\n\n$psr0 = $this->parseAutoloadsType($packageMap, 'psr-0', $mainPackage);\n$classmap = $this->parseAutoloadsType($sortedPackageMap, 'classmap', $mainPackage);\n$files = $this->parseAutoloadsType($sortedPackageMap, 'files', $mainPackage);\n\nkrsort($psr0);\n\nreturn array('psr-0' => $psr0, 'classmap' => $classmap, 'files' => $files);\n}\n\n\n\n\n\n\n\npublic function createLoader(array $autoloads)\n{\n$loader = new ClassLoader();\n\nif (isset($autoloads['psr-0'])) {\nforeach ($autoloads['psr-0'] as $namespace => $path) {\n$loader->add($namespace, $path);\n}\n}\n\nreturn $loader;\n}\n\nprotected function getIncludePathsFile(array $packageMap, Filesystem $filesystem, $basePath, $vendorPath, $vendorPathCode, $appBaseDirCode)\n{\n$includePaths = array();\n\nforeach ($packageMap as $item) {\nlist($package, $installPath) = $item;\n\nif (null !== $package->getTargetDir() && strlen($package->getTargetDir()) > 0) {\n$installPath = substr($installPath, 0, -strlen('/'.$package->getTargetDir()));\n}\n\nforeach ($package->getIncludePaths() as $includePath) {\n$includePath = trim($includePath, '/');\n$includePaths[] = empty($installPath) ? $includePath : $installPath.'/'.$includePath;\n}\n}\n\nif (!$includePaths) {\nreturn;\n}\n\n$includePathsFile = <<<EOF\n<?php\n\n// include_paths.php generated by Composer\n\n\\$vendorDir = $vendorPathCode;\n\\$baseDir = $appBaseDirCode;\n\nreturn array(\n\nEOF;\n\nforeach ($includePaths as $path) {\n$includePathsFile .= \"    \" . $this->getPathCode($filesystem, $basePath, $vendorPath, $path) . \",\\n\";\n}\n\nreturn $includePathsFile . \");\\n\";\n}\n\nprotected function getPathCode(Filesystem $filesystem, $basePath, $vendorPath, $path)\n{\nif (!$filesystem->isAbsolutePath($path)) {\n$path = $basePath . '/' . $path;\n}\n$path = $filesystem->normalizePath($path);\n\n$baseDir = '';\nif (strpos($path, $vendorPath) === 0) {\n$path = substr($path, strlen($vendorPath));\n$baseDir = '$vendorDir . ';\n} else {\n$path = $filesystem->normalizePath($filesystem->findShortestPath($basePath, $path, true));\nif (!$filesystem->isAbsolutePath($path)) {\n$baseDir = '$baseDir . ';\n$path = '/' . $path;\n}\n}\n\nif (preg_match('/\\.phar$/', $path)) {\n$baseDir = \"'phar://' . \" . $baseDir;\n}\n\nreturn $baseDir.var_export($path, true);\n}\n\nprotected function getAutoloadFile($vendorPathToTargetDirCode, $suffix)\n{\nreturn <<<AUTOLOAD\n<?php\n\n// autoload.php generated by Composer\n\nrequire_once $vendorPathToTargetDirCode . '/autoload_real.php';\n\nreturn ComposerAutoloaderInit$suffix::getLoader();\n\nAUTOLOAD;\n}\n\nprotected function getAutoloadRealFile($usePSR0, $useClassMap, $useIncludePath, $targetDirLoader, $filesCode, $vendorPathCode, $appBaseDirCode, $suffix, $useGlobalIncludePath)\n{\n\n \n \n \n \n \n\nif ($filesCode) {\n$filesCode = \"\\n\\n\".rtrim($filesCode);\n}\n\n$file = <<<HEADER\n<?php\n\n// autoload_real.php generated by Composer\n\nclass ComposerAutoloaderInit$suffix\n{\n    private static \\$loader;\n\n    public static function loadClassLoader(\\$class)\n    {\n        if ('Composer\\\\Autoload\\\\ClassLoader' === \\$class) {\n            require __DIR__ . '/ClassLoader.php';\n        }\n    }\n\n    public static function getLoader()\n    {\n        if (null !== self::\\$loader) {\n            return self::\\$loader;\n        }\n\n        spl_autoload_register(array('ComposerAutoloaderInit$suffix', 'loadClassLoader'), true, true);\n        self::\\$loader = \\$loader = new \\\\Composer\\\\Autoload\\\\ClassLoader();\n        spl_autoload_unregister(array('ComposerAutoloaderInit$suffix', 'loadClassLoader'));\n\n        \\$vendorDir = $vendorPathCode;\n        \\$baseDir = $appBaseDirCode;\n\n\nHEADER;\n\nif ($useIncludePath) {\n$file .= <<<'INCLUDE_PATH'\n        $includePaths = require __DIR__ . '/include_paths.php';\n        array_push($includePaths, get_include_path());\n        set_include_path(join(PATH_SEPARATOR, $includePaths));\n\n\nINCLUDE_PATH;\n}\n\nif ($usePSR0) {\n$file .= <<<'PSR0'\n        $map = require __DIR__ . '/autoload_namespaces.php';\n        foreach ($map as $namespace => $path) {\n            $loader->set($namespace, $path);\n        }\n\n\nPSR0;\n}\n\nif ($useClassMap) {\n$file .= <<<'CLASSMAP'\n        $classMap = require __DIR__ . '/autoload_classmap.php';\n        if ($classMap) {\n            $loader->addClassMap($classMap);\n        }\n\n\nCLASSMAP;\n}\n\nif ($useGlobalIncludePath) {\n$file .= <<<'INCLUDEPATH'\n        $loader->setUseIncludePath(true);\n\nINCLUDEPATH;\n}\n\nif ($targetDirLoader) {\n$file .= <<<REGISTER_AUTOLOAD\n        spl_autoload_register(array('ComposerAutoloaderInit$suffix', 'autoload'), true, true);\n\n\nREGISTER_AUTOLOAD;\n\n}\n\n$file .= <<<METHOD_FOOTER\n        \\$loader->register(true);{$filesCode}\n\n        return \\$loader;\n    }\n\nMETHOD_FOOTER;\n\n$file .= $targetDirLoader;\n\nreturn $file . <<<FOOTER\n}\n\nFOOTER;\n\n}\n\nprotected function parseAutoloadsType(array $packageMap, $type, PackageInterface $mainPackage)\n{\n$autoloads = array();\n\nforeach ($packageMap as $item) {\nlist($package, $installPath) = $item;\n\n$autoload = $package->getAutoload();\n\n\n if (!isset($autoload[$type]) || !is_array($autoload[$type])) {\ncontinue;\n}\nif (null !== $package->getTargetDir() && $package !== $mainPackage) {\n$installPath = substr($installPath, 0, -strlen('/'.$package->getTargetDir()));\n}\n\nforeach ($autoload[$type] as $namespace => $paths) {\nforeach ((array) $paths as $path) {\n\n if ($type === 'files' && $package === $mainPackage && $package->getTargetDir() && !is_readable($installPath.'/'.$path)) {\n$targetDir = str_replace('\\\\<dirsep\\\\>', '[\\\\\\\\/]', preg_quote(str_replace(array('/', '\\\\'), '<dirsep>', $package->getTargetDir())));\n$path = ltrim(preg_replace('{^'.$targetDir.'}', '', ltrim($path, '\\\\/')), '\\\\/');\n}\n\n\n if ($type === 'files' && $package !== $mainPackage && $package->getTargetDir() && !is_readable($installPath.'/'.$path)) {\n$path = $package->getTargetDir() . '/' . $path;\n}\n\n\n if ($type === 'classmap' && $package === $mainPackage && $package->getTargetDir() && !is_readable($installPath.'/'.$path)) {\n$targetDir = str_replace('\\\\<dirsep\\\\>', '[\\\\\\\\/]', preg_quote(str_replace(array('/', '\\\\'), '<dirsep>', $package->getTargetDir())));\n$path = ltrim(preg_replace('{^'.$targetDir.'}', '', ltrim($path, '\\\\/')), '\\\\/');\n}\n\n\n if ($type === 'classmap' && $package !== $mainPackage && $package->getTargetDir() && !is_readable($installPath.'/'.$path)) {\n$path = $package->getTargetDir() . '/' . $path;\n}\n\nif (empty($installPath)) {\n$autoloads[$namespace][] = empty($path) ? '.' : $path;\n} else {\n$autoloads[$namespace][] = $installPath.'/'.$path;\n}\n}\n}\n}\n\nreturn $autoloads;\n}\n\nprotected function sortPackageMap(array $packageMap)\n{\n$positions = array();\n$names = array();\n$indexes = array();\n\nforeach ($packageMap as $position => $item) {\n$mainName = $item[0]->getName();\n$names = array_merge(array_fill_keys($item[0]->getNames(), $mainName), $names);\n$names[$mainName] = $mainName;\n$indexes[$mainName] = $positions[$mainName] = $position;\n}\n\nforeach ($packageMap as $item) {\n$position = $positions[$item[0]->getName()];\nforeach (array_merge($item[0]->getRequires(), $item[0]->getDevRequires()) as $link) {\n$target = $link->getTarget();\nif (!isset($names[$target])) {\ncontinue;\n}\n\n$target = $names[$target];\nif ($positions[$target] <= $position) {\ncontinue;\n}\n\nforeach ($positions as $key => $value) {\nif ($value >= $position) {\nbreak;\n}\n$positions[$key]--;\n}\n\n$positions[$target] = $position - 1;\n}\nasort($positions);\n}\n\n$sortedPackageMap = array();\nforeach (array_keys($positions) as $packageName) {\n$sortedPackageMap[] = $packageMap[$indexes[$packageName]];\n}\n\nreturn $sortedPackageMap;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Autoload;\n\n\n\n\n\n\nclass ClassMapGenerator\n{\n\n\n\n\n\n\npublic static function dump($dirs, $file)\n{\n$maps = array();\n\nforeach ($dirs as $dir) {\n$maps = array_merge($maps, static::createMap($dir));\n}\n\nfile_put_contents($file, sprintf('<?php return %s;', var_export($maps, true)));\n}\n\n\n\n\n\n\n\n\n\n\n\npublic static function createMap($path, $whitelist = null)\n{\nif (is_string($path)) {\nif (is_file($path)) {\n$path = array(new \\SplFileInfo($path));\n} elseif (is_dir($path)) {\n$path = new \\RecursiveIteratorIterator(new \\RecursiveDirectoryIterator($path));\n} else {\nthrow new \\RuntimeException(\n'Could not scan for classes inside \"'.$path.\n'\" which does not appear to be a file nor a folder'\n);\n}\n}\n\n$map = array();\n\nforeach ($path as $file) {\nif (!$file->isFile()) {\ncontinue;\n}\n\n$filePath = $file->getRealPath();\n\nif (!in_array(pathinfo($filePath, PATHINFO_EXTENSION), array('php', 'inc'))) {\ncontinue;\n}\n\nif ($whitelist && !preg_match($whitelist, strtr($filePath, '\\\\', '/'))) {\ncontinue;\n}\n\n$classes = self::findClasses($filePath);\n\nforeach ($classes as $class) {\n$map[$class] = $filePath;\n}\n\n}\n\nreturn $map;\n}\n\n\n\n\n\n\n\n\nprivate static function findClasses($path)\n{\n$traits = version_compare(PHP_VERSION, '5.4', '<') ? '' : '|trait';\n\ntry {\n$contents = php_strip_whitespace($path);\n} catch (\\Exception $e) {\nthrow new \\RuntimeException('Could not scan for classes inside '.$path.\": \\n\".$e->getMessage(), 0, $e);\n}\n\n\n if (!preg_match('{\\b(?:class|interface'.$traits.')\\b}i', $contents)) {\nreturn array();\n}\n\n\n $contents = preg_replace('{<<<\\'?(\\w+)\\'?(?:\\r\\n|\\n|\\r)(?:.*?)(?:\\r\\n|\\n|\\r)\\\\1(?=\\r\\n|\\n|\\r|;)}s', 'null', $contents);\n\n $contents = preg_replace('{\"[^\"\\\\\\\\]*(\\\\\\\\.[^\"\\\\\\\\]*)*\"|\\'[^\\'\\\\\\\\]*(\\\\\\\\.[^\\'\\\\\\\\]*)*\\'}s', 'null', $contents);\n\n if (substr($contents, 0, 2) !== '<?') {\n$contents = preg_replace('{^.+?<\\?}s', '<?', $contents);\n}\n\n $contents = preg_replace('{\\?>.+<\\?}s', '?><?', $contents);\n\n $pos = strrpos($contents, '?>');\nif (false !== $pos && false === strpos(substr($contents, $pos), '<?')) {\n$contents = substr($contents, 0, $pos);\n}\n\npreg_match_all('{\n            (?:\n                 \\b(?<![\\$:>])(?P<type>class|interface'.$traits.') \\s+ (?P<name>[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*)\n               | \\b(?<![\\$:>])(?P<ns>namespace) (?P<nsname>\\s+[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*(?:\\s*\\\\\\\\\\s*[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*)*)? \\s*[\\{;]\n            )\n        }ix', $contents, $matches);\n\n$classes = array();\n$namespace = '';\n\nfor ($i = 0, $len = count($matches['type']); $i < $len; $i++) {\nif (!empty($matches['ns'][$i])) {\n$namespace = str_replace(array(' ', \"\\t\", \"\\r\", \"\\n\"), '', $matches['nsname'][$i]) . '\\\\';\n} else {\n$classes[] = ltrim($namespace . $matches['name'][$i], '\\\\');\n}\n}\n\nreturn $classes;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer;\n\nuse Composer\\Autoload\\AutoloadGenerator;\nuse Composer\\DependencyResolver\\DefaultPolicy;\nuse Composer\\DependencyResolver\\Operation\\UpdateOperation;\nuse Composer\\DependencyResolver\\Operation\\UninstallOperation;\nuse Composer\\DependencyResolver\\Pool;\nuse Composer\\DependencyResolver\\Request;\nuse Composer\\DependencyResolver\\Rule;\nuse Composer\\DependencyResolver\\Solver;\nuse Composer\\DependencyResolver\\SolverProblemsException;\nuse Composer\\Downloader\\DownloadManager;\nuse Composer\\Installer\\InstallationManager;\nuse Composer\\Config;\nuse Composer\\Installer\\NoopInstaller;\nuse Composer\\IO\\IOInterface;\nuse Composer\\Json\\JsonFile;\nuse Composer\\Package\\AliasPackage;\nuse Composer\\Package\\Link;\nuse Composer\\Package\\LinkConstraint\\VersionConstraint;\nuse Composer\\Package\\Locker;\nuse Composer\\Package\\PackageInterface;\nuse Composer\\Package\\RootPackageInterface;\nuse Composer\\Repository\\CompositeRepository;\nuse Composer\\Repository\\InstalledArrayRepository;\nuse Composer\\Repository\\InstalledFilesystemRepository;\nuse Composer\\Repository\\PlatformRepository;\nuse Composer\\Repository\\RepositoryInterface;\nuse Composer\\Repository\\RepositoryManager;\nuse Composer\\Script\\EventDispatcher;\nuse Composer\\Script\\ScriptEvents;\n\n\n\n\n\n\nclass Installer\n{\n\n\n\nprotected $io;\n\n\n\n\nprotected $config;\n\n\n\n\nprotected $package;\n\n\n\n\nprotected $downloadManager;\n\n\n\n\nprotected $repositoryManager;\n\n\n\n\nprotected $locker;\n\n\n\n\nprotected $installationManager;\n\n\n\n\nprotected $eventDispatcher;\n\n\n\n\nprotected $autoloadGenerator;\n\nprotected $preferSource = false;\nprotected $preferDist = false;\nprotected $optimizeAutoloader = false;\nprotected $devMode = false;\nprotected $dryRun = false;\nprotected $verbose = false;\nprotected $update = false;\nprotected $runScripts = true;\nprotected $updateWhitelist = null;\n\n\n\n\nprotected $suggestedPackages;\n\n\n\n\nprotected $additionalInstalledRepository;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npublic function __construct(IOInterface $io, Config $config, RootPackageInterface $package, DownloadManager $downloadManager, RepositoryManager $repositoryManager, Locker $locker, InstallationManager $installationManager, EventDispatcher $eventDispatcher, AutoloadGenerator $autoloadGenerator)\n{\n$this->io = $io;\n$this->config = $config;\n$this->package = $package;\n$this->downloadManager = $downloadManager;\n$this->repositoryManager = $repositoryManager;\n$this->locker = $locker;\n$this->installationManager = $installationManager;\n$this->eventDispatcher = $eventDispatcher;\n$this->autoloadGenerator = $autoloadGenerator;\n}\n\n\n\n\npublic function run()\n{\nif ($this->dryRun) {\n$this->verbose = true;\n$this->runScripts = false;\n$this->installationManager->addInstaller(new NoopInstaller);\n$this->mockLocalRepositories($this->repositoryManager);\n}\n\n\n \n $devRepo = new InstalledFilesystemRepository(new JsonFile($this->config->get('vendor-dir').'/composer/installed_dev.json'));\nif ($devRepo->getPackages()) {\n$this->io->write('<warning>BC Notice: Removing old dev packages to migrate to the new require-dev handling.</warning>');\nforeach ($devRepo->getPackages() as $package) {\nif ($this->installationManager->isPackageInstalled($devRepo, $package)) {\n$this->installationManager->uninstall($devRepo, new UninstallOperation($package));\n}\n}\nunlink($this->config->get('vendor-dir').'/composer/installed_dev.json');\n}\nunset($devRepo, $package);\n\n\nif ($this->preferSource) {\n$this->downloadManager->setPreferSource(true);\n}\nif ($this->preferDist) {\n$this->downloadManager->setPreferDist(true);\n}\n\n\n \n \n $installedRootPackage = clone $this->package;\n$installedRootPackage->setRequires(array());\n$installedRootPackage->setDevRequires(array());\n\n\n $localRepo = $this->repositoryManager->getLocalRepository();\n$platformRepo = new PlatformRepository();\n$repos = array(\n$localRepo,\nnew InstalledArrayRepository(array($installedRootPackage)),\n$platformRepo,\n);\n$installedRepo = new CompositeRepository($repos);\nif ($this->additionalInstalledRepository) {\n$installedRepo->addRepository($this->additionalInstalledRepository);\n}\n\n$aliases = $this->getRootAliases();\n$this->aliasPlatformPackages($platformRepo, $aliases);\n\nif ($this->runScripts) {\n\n $eventName = $this->update ? ScriptEvents::PRE_UPDATE_CMD : ScriptEvents::PRE_INSTALL_CMD;\n$this->eventDispatcher->dispatchCommandEvent($eventName, $this->devMode);\n}\n\ntry {\n$this->suggestedPackages = array();\nif (!$this->doInstall($localRepo, $installedRepo, $platformRepo, $aliases, $this->devMode)) {\nreturn false;\n}\n} catch (\\Exception $e) {\n$this->installationManager->notifyInstalls();\n\nthrow $e;\n}\n$this->installationManager->notifyInstalls();\n\n\n foreach ($this->suggestedPackages as $suggestion) {\n$target = $suggestion['target'];\nforeach ($installedRepo->getPackages() as $package) {\nif (in_array($target, $package->getNames())) {\ncontinue 2;\n}\n}\n\n$this->io->write($suggestion['source'].' suggests installing '.$suggestion['target'].' ('.$suggestion['reason'].')');\n}\n\nif (!$this->dryRun) {\n\n if ($this->update || !$this->locker->isLocked()) {\n$localRepo->reload();\n\n\n \n $devPackages = ($this->devMode || !$this->package->getDevRequires()) ? array() : null;\n\n\n if ($this->devMode && $this->package->getDevRequires()) {\n$policy = $this->createPolicy();\n$pool = $this->createPool();\n$pool->addRepository($installedRepo, $aliases);\n\n\n $request = $this->createRequest($pool, $this->package, $platformRepo);\n$request->updateAll();\nforeach ($this->package->getRequires() as $link) {\n$request->install($link->getTarget(), $link->getConstraint());\n}\n\n$solver = new Solver($policy, $pool, $installedRepo);\n$ops = $solver->solve($request);\nforeach ($ops as $op) {\nif ($op->getJobType() === 'uninstall') {\n$devPackages[] = $op->getPackage();\n}\n}\n}\n\n$platformReqs = $this->extractPlatformRequirements($this->package->getRequires());\n$platformDevReqs = $this->devMode ? $this->extractPlatformRequirements($this->package->getDevRequires()) : array();\n\n$updatedLock = $this->locker->setLockData(\narray_diff($localRepo->getCanonicalPackages(), (array) $devPackages),\n$devPackages,\n$platformReqs,\n$platformDevReqs,\n$aliases,\n$this->package->getMinimumStability(),\n$this->package->getStabilityFlags()\n);\nif ($updatedLock) {\n$this->io->write('<info>Writing lock file</info>');\n}\n}\n\n\n $this->io->write('<info>Generating autoload files</info>');\n$this->autoloadGenerator->dump($this->config, $localRepo, $this->package, $this->installationManager, 'composer', $this->optimizeAutoloader);\n\nif ($this->runScripts) {\n\n $eventName = $this->update ? ScriptEvents::POST_UPDATE_CMD : ScriptEvents::POST_INSTALL_CMD;\n$this->eventDispatcher->dispatchCommandEvent($eventName, $this->devMode);\n}\n}\n\nreturn true;\n}\n\nprotected function doInstall($localRepo, $installedRepo, $platformRepo, $aliases, $withDevReqs)\n{\n\n $lockedRepository = null;\n$repositories = null;\n\n\n $installFromLock = false;\nif (!$this->update && $this->locker->isLocked()) {\n$installFromLock = true;\ntry {\n$lockedRepository = $this->locker->getLockedRepository($withDevReqs);\n} catch (\\RuntimeException $e) {\n\n if ($this->package->getDevRequires()) {\nthrow $e;\n}\n\n $lockedRepository = $this->locker->getLockedRepository();\n}\n}\n\n$this->whitelistUpdateDependencies(\n$localRepo,\n$withDevReqs,\n$this->package->getRequires(),\n$this->package->getDevRequires()\n);\n\n$this->io->write('<info>Loading composer repositories with package information</info>');\n\n\n $policy = $this->createPolicy();\n$pool = $this->createPool();\n$pool->addRepository($installedRepo, $aliases);\nif ($installFromLock) {\n$pool->addRepository($lockedRepository, $aliases);\n}\n\nif (!$installFromLock) {\n$repositories = $this->repositoryManager->getRepositories();\nforeach ($repositories as $repository) {\n$pool->addRepository($repository, $aliases);\n}\n}\n\n\n $request = $this->createRequest($pool, $this->package, $platformRepo);\n\nif (!$installFromLock) {\n\n $removedUnstablePackages = array();\nforeach ($localRepo->getPackages() as $package) {\nif (\n!$pool->isPackageAcceptable($package->getNames(), $package->getStability())\n&& $this->installationManager->isPackageInstalled($localRepo, $package)\n) {\n$removedUnstablePackages[$package->getName()] = true;\n$request->remove($package->getName(), new VersionConstraint('=', $package->getVersion()));\n}\n}\n}\n\nif ($this->update) {\n$this->io->write('<info>Updating dependencies'.($withDevReqs?' (including require-dev)':'').'</info>');\n\n$request->updateAll();\n\nif ($withDevReqs) {\n$links = array_merge($this->package->getRequires(), $this->package->getDevRequires());\n} else {\n$links = $this->package->getRequires();\n}\n\nforeach ($links as $link) {\n$request->install($link->getTarget(), $link->getConstraint());\n}\n\n\n \n if ($this->updateWhitelist) {\nif ($this->locker->isLocked()) {\ntry {\n$currentPackages = $this->locker->getLockedRepository($withDevReqs)->getPackages();\n} catch (\\RuntimeException $e) {\n\n $currentPackages = $this->locker->getLockedRepository()->getPackages();\n}\n} else {\n$currentPackages = $installedRepo->getPackages();\n}\n\n\n $candidates = array();\nforeach ($links as $link) {\n$candidates[$link->getTarget()] = true;\n}\nforeach ($localRepo->getPackages() as $package) {\n$candidates[$package->getName()] = true;\n}\n\n\n foreach ($candidates as $candidate => $dummy) {\nforeach ($currentPackages as $curPackage) {\nif ($curPackage->getName() === $candidate) {\nif (!$this->isUpdateable($curPackage) && !isset($removedUnstablePackages[$curPackage->getName()])) {\n$constraint = new VersionConstraint('=', $curPackage->getVersion());\n$request->install($curPackage->getName(), $constraint);\n}\nbreak;\n}\n}\n}\n}\n} elseif ($installFromLock) {\n$this->io->write('<info>Installing dependencies'.($withDevReqs?' (including require-dev)':'').' from lock file</info>');\n\nif (!$this->locker->isFresh()) {\n$this->io->write('<warning>Warning: The lock file is not up to date with the latest changes in composer.json. You may be getting outdated dependencies. Run update to update them.</warning>');\n}\n\nforeach ($lockedRepository->getPackages() as $package) {\n$version = $package->getVersion();\nif (isset($aliases[$package->getName()][$version])) {\n$version = $aliases[$package->getName()][$version]['alias_normalized'];\n}\n$constraint = new VersionConstraint('=', $version);\n$constraint->setPrettyString($package->getPrettyVersion());\n$request->install($package->getName(), $constraint);\n}\n\nforeach ($this->locker->getPlatformRequirements($withDevReqs) as $link) {\n$request->install($link->getTarget(), $link->getConstraint());\n}\n} else {\n$this->io->write('<info>Installing dependencies'.($withDevReqs?' (including require-dev)':'').'</info>');\n\nif ($withDevReqs) {\n$links = array_merge($this->package->getRequires(), $this->package->getDevRequires());\n} else {\n$links = $this->package->getRequires();\n}\n\nforeach ($links as $link) {\n$request->install($link->getTarget(), $link->getConstraint());\n}\n}\n\n\n $this->processDevPackages($localRepo, $pool, $policy, $repositories, $lockedRepository, $installFromLock, 'force-links');\n\n\n $solver = new Solver($policy, $pool, $installedRepo);\ntry {\n$operations = $solver->solve($request);\n} catch (SolverProblemsException $e) {\n$this->io->write('<error>Your requirements could not be resolved to an installable set of packages.</error>');\n$this->io->write($e->getMessage());\n\nreturn false;\n}\n\n\n $operations = $this->processDevPackages($localRepo, $pool, $policy, $repositories, $lockedRepository, $installFromLock, 'force-updates', $operations);\n\n\n if (!$operations) {\n$this->io->write('Nothing to install or update');\n}\n\nforeach ($operations as $operation) {\n\n if ('install' === $operation->getJobType()) {\nforeach ($operation->getPackage()->getSuggests() as $target => $reason) {\n$this->suggestedPackages[] = array(\n'source' => $operation->getPackage()->getPrettyName(),\n'target' => $target,\n'reason' => $reason,\n);\n}\n}\n\n$event = 'Composer\\Script\\ScriptEvents::PRE_PACKAGE_'.strtoupper($operation->getJobType());\nif (defined($event) && $this->runScripts) {\n$this->eventDispatcher->dispatchPackageEvent(constant($event), $this->devMode, $operation);\n}\n\n\n if (!$installFromLock) {\n$package = null;\nif ('update' === $operation->getJobType()) {\n$package = $operation->getTargetPackage();\n} elseif ('install' === $operation->getJobType()) {\n$package = $operation->getPackage();\n}\nif ($package && $package->isDev()) {\n$references = $this->package->getReferences();\nif (isset($references[$package->getName()])) {\n$package->setSourceReference($references[$package->getName()]);\n$package->setDistReference($references[$package->getName()]);\n}\n}\n}\n\n\n if ($this->dryRun && false === strpos($operation->getJobType(), 'Alias')) {\n$this->io->write('  - ' . $operation);\n$this->io->write('');\n} elseif ($this->io->isDebug() && false !== strpos($operation->getJobType(), 'Alias')) {\n$this->io->write('  - ' . $operation);\n$this->io->write('');\n}\n\n$this->installationManager->execute($localRepo, $operation);\n\n\n if ($this->verbose && $this->io->isVeryVerbose() && in_array($operation->getJobType(), array('install', 'update'))) {\n$reason = $operation->getReason();\nif ($reason instanceof Rule) {\nswitch ($reason->getReason()) {\ncase Rule::RULE_JOB_INSTALL:\n$this->io->write('    REASON: Required by root: '.$reason->getRequiredPackage());\n$this->io->write('');\nbreak;\ncase Rule::RULE_PACKAGE_REQUIRES:\n$this->io->write('    REASON: '.$reason->getPrettyString());\n$this->io->write('');\nbreak;\n}\n}\n}\n\n$event = 'Composer\\Script\\ScriptEvents::POST_PACKAGE_'.strtoupper($operation->getJobType());\nif (defined($event) && $this->runScripts) {\n$this->eventDispatcher->dispatchPackageEvent(constant($event), $this->devMode, $operation);\n}\n\nif (!$this->dryRun) {\n$localRepo->write();\n}\n}\n\nreturn true;\n}\n\nprivate function createPool()\n{\n$minimumStability = $this->package->getMinimumStability();\n$stabilityFlags = $this->package->getStabilityFlags();\n\nif (!$this->update && $this->locker->isLocked()) {\n$minimumStability = $this->locker->getMinimumStability();\n$stabilityFlags = $this->locker->getStabilityFlags();\n}\n\nreturn new Pool($minimumStability, $stabilityFlags);\n}\n\nprivate function createPolicy()\n{\nreturn new DefaultPolicy($this->package->getPreferStable());\n}\n\nprivate function createRequest(Pool $pool, RootPackageInterface $rootPackage, PlatformRepository $platformRepo)\n{\n$request = new Request($pool);\n\n$constraint = new VersionConstraint('=', $rootPackage->getVersion());\n$constraint->setPrettyString($rootPackage->getPrettyVersion());\n$request->install($rootPackage->getName(), $constraint);\n\n$fixedPackages = $platformRepo->getPackages();\nif ($this->additionalInstalledRepository) {\n$additionalFixedPackages = $this->additionalInstalledRepository->getPackages();\n$fixedPackages = array_merge($fixedPackages, $additionalFixedPackages);\n}\n\n\n \n $provided = $rootPackage->getProvides();\nforeach ($fixedPackages as $package) {\n$constraint = new VersionConstraint('=', $package->getVersion());\n$constraint->setPrettyString($package->getPrettyVersion());\n\n\n if ($package->getRepository() !== $platformRepo\n|| !isset($provided[$package->getName()])\n|| !$provided[$package->getName()]->getConstraint()->matches($constraint)\n) {\n$request->install($package->getName(), $constraint);\n}\n}\n\nreturn $request;\n}\n\nprivate function processDevPackages($localRepo, $pool, $policy, $repositories, $lockedRepository, $installFromLock, $task, array $operations = null)\n{\nif ($task === 'force-updates' && null === $operations) {\nthrow new \\InvalidArgumentException('Missing operations argument');\n}\nif ($task === 'force-links') {\n$operations = array();\n}\n\nforeach ($localRepo->getCanonicalPackages() as $package) {\n\n if (!$package->isDev()) {\ncontinue;\n}\n\n\n foreach ($operations as $operation) {\nif (('update' === $operation->getJobType() && $operation->getInitialPackage()->equals($package))\n|| ('uninstall' === $operation->getJobType() && $operation->getPackage()->equals($package))\n) {\ncontinue 2;\n}\n}\n\n\n if ($installFromLock) {\nforeach ($lockedRepository->findPackages($package->getName()) as $lockedPackage) {\nif ($lockedPackage->isDev() && $lockedPackage->getVersion() === $package->getVersion()) {\nif ($task === 'force-links') {\n$package->setRequires($lockedPackage->getRequires());\n$package->setConflicts($lockedPackage->getConflicts());\n$package->setProvides($lockedPackage->getProvides());\n$package->setReplaces($lockedPackage->getReplaces());\n} elseif ($task === 'force-updates') {\nif (($lockedPackage->getSourceReference() && $lockedPackage->getSourceReference() !== $package->getSourceReference())\n|| ($lockedPackage->getDistReference() && $lockedPackage->getDistReference() !== $package->getDistReference())\n) {\n$operations[] = new UpdateOperation($package, $lockedPackage);\n}\n}\n\nbreak;\n}\n}\n} else {\n\n if ($this->update) {\n\n if ($this->updateWhitelist && !$this->isUpdateable($package)) {\ncontinue;\n}\n\n\n $matches = $pool->whatProvides($package->getName(), new VersionConstraint('=', $package->getVersion()));\nforeach ($matches as $index => $match) {\n\n if (!in_array($match->getRepository(), $repositories, true)) {\nunset($matches[$index]);\ncontinue;\n}\n\n\n if ($match->getName() !== $package->getName()) {\nunset($matches[$index]);\ncontinue;\n}\n\n$matches[$index] = $match->getId();\n}\n\n\n if ($matches && $matches = $policy->selectPreferedPackages($pool, array(), $matches)) {\n$newPackage = $pool->literalToPackage($matches[0]);\n\nif ($task === 'force-links' && $newPackage) {\n$package->setRequires($newPackage->getRequires());\n$package->setConflicts($newPackage->getConflicts());\n$package->setProvides($newPackage->getProvides());\n$package->setReplaces($newPackage->getReplaces());\n}\n\nif ($task === 'force-updates' && $newPackage && (\n(($newPackage->getSourceReference() && $newPackage->getSourceReference() !== $package->getSourceReference())\n|| ($newPackage->getDistReference() && $newPackage->getDistReference() !== $package->getDistReference())\n)\n)) {\n$operations[] = new UpdateOperation($package, $newPackage);\n}\n}\n}\n\nif ($task === 'force-updates') {\n\n $references = $this->package->getReferences();\n\nif (isset($references[$package->getName()]) && $references[$package->getName()] !== $package->getSourceReference()) {\n\n $operations[] = new UpdateOperation($package, clone $package);\n}\n}\n}\n}\n\nreturn $operations;\n}\n\nprivate function getRootAliases()\n{\nif (!$this->update && $this->locker->isLocked()) {\n$aliases = $this->locker->getAliases();\n} else {\n$aliases = $this->package->getAliases();\n}\n\n$normalizedAliases = array();\n\nforeach ($aliases as $alias) {\n$normalizedAliases[$alias['package']][$alias['version']] = array(\n'alias' => $alias['alias'],\n'alias_normalized' => $alias['alias_normalized']\n);\n}\n\nreturn $normalizedAliases;\n}\n\nprivate function aliasPlatformPackages(PlatformRepository $platformRepo, $aliases)\n{\nforeach ($aliases as $package => $versions) {\nforeach ($versions as $version => $alias) {\n$packages = $platformRepo->findPackages($package, $version);\nforeach ($packages as $package) {\n$aliasPackage = new AliasPackage($package, $alias['alias_normalized'], $alias['alias']);\n$aliasPackage->setRootPackageAlias(true);\n$platformRepo->addPackage($aliasPackage);\n}\n}\n}\n}\n\nprivate function isUpdateable(PackageInterface $package)\n{\nif (!$this->updateWhitelist) {\nthrow new \\LogicException('isUpdateable should only be called when a whitelist is present');\n}\n\nforeach ($this->updateWhitelist as $whiteListedPattern => $void) {\n$cleanedWhiteListedPattern = str_replace('\\\\*', '.*', preg_quote($whiteListedPattern));\n\nif (preg_match(\"{^\".$cleanedWhiteListedPattern.\"$}i\", $package->getName())) {\nreturn true;\n}\n}\n\nreturn false;\n}\n\nprivate function extractPlatformRequirements($links)\n{\n$platformReqs = array();\nforeach ($links as $link) {\nif (preg_match(PlatformRepository::PLATFORM_PACKAGE_REGEX, $link->getTarget())) {\n$platformReqs[$link->getTarget()] = $link->getPrettyConstraint();\n}\n}\n\nreturn $platformReqs;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nprivate function whitelistUpdateDependencies($localRepo, $devMode, array $rootRequires, array $rootDevRequires)\n{\nif (!$this->updateWhitelist) {\nreturn;\n}\n\n$requiredPackageNames = array();\nforeach (array_merge($rootRequires, $rootDevRequires) as $require) {\n$requiredPackageNames[] = $require->getTarget();\n}\n\nif ($devMode) {\n$rootRequires = array_merge($rootRequires, $rootDevRequires);\n}\n\n$skipPackages = array();\nforeach ($rootRequires as $require) {\n$skipPackages[$require->getTarget()] = true;\n}\n\n$pool = new Pool;\n$pool->addRepository($localRepo);\n\n$seen = array();\n\nforeach ($this->updateWhitelist as $packageName => $void) {\n$packageQueue = new \\SplQueue;\n\n$depPackages = $pool->whatProvides($packageName);\nif (count($depPackages) == 0 && !in_array($packageName, $requiredPackageNames) && !in_array($packageName, array('nothing', 'lock'))) {\n$this->io->write('<warning>Package \"' . $packageName . '\" listed for update is not installed. Ignoring.<warning>');\n}\n\nforeach ($depPackages as $depPackage) {\n$packageQueue->enqueue($depPackage);\n}\n\nwhile (!$packageQueue->isEmpty()) {\n$package = $packageQueue->dequeue();\nif (isset($seen[$package->getId()])) {\ncontinue;\n}\n\n$seen[$package->getId()] = true;\n$this->updateWhitelist[$package->getName()] = true;\n\n$requires = $package->getRequires();\nif ($devMode) {\n$requires = array_merge($requires, $package->getDevRequires());\n}\n\nforeach ($requires as $require) {\n$requirePackages = $pool->whatProvides($require->getTarget());\n\nforeach ($requirePackages as $requirePackage) {\nif (isset($skipPackages[$requirePackage->getName()])) {\ncontinue;\n}\n$packageQueue->enqueue($requirePackage);\n}\n}\n}\n}\n}\n\n\n\n\n\n\n\n\nprivate function mockLocalRepositories(RepositoryManager $rm)\n{\n$packages = array();\nforeach ($rm->getLocalRepository()->getPackages() as $package) {\n$packages[(string) $package] = clone $package;\n}\nforeach ($packages as $key => $package) {\nif ($package instanceof AliasPackage) {\n$alias = (string) $package->getAliasOf();\n$packages[$key] = new AliasPackage($packages[$alias], $package->getVersion(), $package->getPrettyVersion());\n}\n}\n$rm->setLocalRepository(\nnew InstalledArrayRepository($packages)\n);\n}\n\n\n\n\n\n\n\n\npublic static function create(IOInterface $io, Composer $composer)\n{\nreturn new static(\n$io,\n$composer->getConfig(),\n$composer->getPackage(),\n$composer->getDownloadManager(),\n$composer->getRepositoryManager(),\n$composer->getLocker(),\n$composer->getInstallationManager(),\n$composer->getEventDispatcher(),\n$composer->getAutoloadGenerator()\n);\n}\n\npublic function setAdditionalInstalledRepository(RepositoryInterface $additionalInstalledRepository)\n{\n$this->additionalInstalledRepository = $additionalInstalledRepository;\n\nreturn $this;\n}\n\n\n\n\n\n\n\npublic function setDryRun($dryRun = true)\n{\n$this->dryRun = (boolean) $dryRun;\n\nreturn $this;\n}\n\n\n\n\n\n\n\npublic function setPreferSource($preferSource = true)\n{\n$this->preferSource = (boolean) $preferSource;\n\nreturn $this;\n}\n\n\n\n\n\n\n\npublic function setPreferDist($preferDist = true)\n{\n$this->preferDist = (boolean) $preferDist;\n\nreturn $this;\n}\n\n\n\n\n\n\n\npublic function setOptimizeAutoloader($optimizeAutoloader = false)\n{\n$this->optimizeAutoloader = (boolean) $optimizeAutoloader;\n\nreturn $this;\n}\n\n\n\n\n\n\n\npublic function setUpdate($update = true)\n{\n$this->update = (boolean) $update;\n\nreturn $this;\n}\n\n\n\n\n\n\n\npublic function setDevMode($devMode = true)\n{\n$this->devMode = (boolean) $devMode;\n\nreturn $this;\n}\n\n\n\n\n\n\n\npublic function setRunScripts($runScripts = true)\n{\n$this->runScripts = (boolean) $runScripts;\n\nreturn $this;\n}\n\n\n\n\n\n\n\npublic function setConfig(Config $config)\n{\n$this->config = $config;\n\nreturn $this;\n}\n\n\n\n\n\n\n\npublic function setVerbose($verbose = true)\n{\n$this->verbose = (boolean) $verbose;\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\npublic function setUpdateWhitelist(array $packages)\n{\n$this->updateWhitelist = array_flip(array_map('strtolower', $packages));\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\n\n\npublic function disableCustomInstallers()\n{\n$this->installationManager->disableCustomInstallers();\n\nreturn $this;\n}\n}\n<?php\n\n/*\n * This file is part of Composer.\n *\n * (c) Nils Adermann <naderman@naderman.de>\n *     Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Composer\\Autoload;\n\n/**\n * ClassLoader implements a PSR-0 class loader\n *\n * See https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md\n *\n *     $loader = new \\Composer\\Autoload\\ClassLoader();\n *\n *     // register classes with namespaces\n *     $loader->add('Symfony\\Component', __DIR__.'/component');\n *     $loader->add('Symfony',           __DIR__.'/framework');\n *\n *     // activate the autoloader\n *     $loader->register();\n *\n *     // to enable searching the include path (eg. for PEAR packages)\n *     $loader->setUseIncludePath(true);\n *\n * In this example, if you try to use a class in the Symfony\\Component\n * namespace or one of its children (Symfony\\Component\\Console for instance),\n * the autoloader will first look for the class under the component/\n * directory, and it will then fallback to the framework/ directory if not\n * found before giving up.\n *\n * This class is loosely based on the Symfony UniversalClassLoader.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n * @author Jordi Boggiano <j.boggiano@seld.be>\n */\nclass ClassLoader\n{\n    private $prefixes = array();\n    private $fallbackDirs = array();\n    private $useIncludePath = false;\n    private $classMap = array();\n\n    public function getPrefixes()\n    {\n        return call_user_func_array('array_merge', $this->prefixes);\n    }\n\n    public function getFallbackDirs()\n    {\n        return $this->fallbackDirs;\n    }\n\n    public function getClassMap()\n    {\n        return $this->classMap;\n    }\n\n    /**\n     * @param array $classMap Class to filename map\n     */\n    public function addClassMap(array $classMap)\n    {\n        if ($this->classMap) {\n            $this->classMap = array_merge($this->classMap, $classMap);\n        } else {\n            $this->classMap = $classMap;\n        }\n    }\n\n    /**\n     * Registers a set of classes, merging with any others previously set.\n     *\n     * @param string       $prefix  The classes prefix\n     * @param array|string $paths   The location(s) of the classes\n     * @param bool         $prepend Prepend the location(s)\n     */\n    public function add($prefix, $paths, $prepend = false)\n    {\n        if (!$prefix) {\n            if ($prepend) {\n                $this->fallbackDirs = array_merge(\n                    (array) $paths,\n                    $this->fallbackDirs\n                );\n            } else {\n                $this->fallbackDirs = array_merge(\n                    $this->fallbackDirs,\n                    (array) $paths\n                );\n            }\n\n            return;\n        }\n\n        $first = $prefix[0];\n        if (!isset($this->prefixes[$first][$prefix])) {\n            $this->prefixes[$first][$prefix] = (array) $paths;\n\n            return;\n        }\n        if ($prepend) {\n            $this->prefixes[$first][$prefix] = array_merge(\n                (array) $paths,\n                $this->prefixes[$first][$prefix]\n            );\n        } else {\n            $this->prefixes[$first][$prefix] = array_merge(\n                $this->prefixes[$first][$prefix],\n                (array) $paths\n            );\n        }\n    }\n\n    /**\n     * Registers a set of classes, replacing any others previously set.\n     *\n     * @param string       $prefix The classes prefix\n     * @param array|string $paths  The location(s) of the classes\n     */\n    public function set($prefix, $paths)\n    {\n        if (!$prefix) {\n            $this->fallbackDirs = (array) $paths;\n\n            return;\n        }\n        $this->prefixes[substr($prefix, 0, 1)][$prefix] = (array) $paths;\n    }\n\n    /**\n     * Turns on searching the include path for class files.\n     *\n     * @param bool $useIncludePath\n     */\n    public function setUseIncludePath($useIncludePath)\n    {\n        $this->useIncludePath = $useIncludePath;\n    }\n\n    /**\n     * Can be used to check if the autoloader uses the include path to check\n     * for classes.\n     *\n     * @return bool\n     */\n    public function getUseIncludePath()\n    {\n        return $this->useIncludePath;\n    }\n\n    /**\n     * Registers this instance as an autoloader.\n     *\n     * @param bool $prepend Whether to prepend the autoloader or not\n     */\n    public function register($prepend = false)\n    {\n        spl_autoload_register(array($this, 'loadClass'), true, $prepend);\n    }\n\n    /**\n     * Unregisters this instance as an autoloader.\n     */\n    public function unregister()\n    {\n        spl_autoload_unregister(array($this, 'loadClass'));\n    }\n\n    /**\n     * Loads the given class or interface.\n     *\n     * @param  string    $class The name of the class\n     * @return bool|null True if loaded, null otherwise\n     */\n    public function loadClass($class)\n    {\n        if ($file = $this->findFile($class)) {\n            include $file;\n\n            return true;\n        }\n    }\n\n    /**\n     * Finds the path to the file where the class is defined.\n     *\n     * @param string $class The name of the class\n     *\n     * @return string|false The path if found, false otherwise\n     */\n    public function findFile($class)\n    {\n        // work around for PHP 5.3.0 - 5.3.2 https://bugs.php.net/50731\n        if ('\\\\' == $class[0]) {\n            $class = substr($class, 1);\n        }\n\n        if (isset($this->classMap[$class])) {\n            return $this->classMap[$class];\n        }\n\n        if (false !== $pos = strrpos($class, '\\\\')) {\n            // namespaced class name\n            $classPath = strtr(substr($class, 0, $pos), '\\\\', DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR;\n            $className = substr($class, $pos + 1);\n        } else {\n            // PEAR-like class name\n            $classPath = null;\n            $className = $class;\n        }\n\n        $classPath .= strtr($className, '_', DIRECTORY_SEPARATOR) . '.php';\n\n        $first = $class[0];\n        if (isset($this->prefixes[$first])) {\n            foreach ($this->prefixes[$first] as $prefix => $dirs) {\n                if (0 === strpos($class, $prefix)) {\n                    foreach ($dirs as $dir) {\n                        if (file_exists($dir . DIRECTORY_SEPARATOR . $classPath)) {\n                            return $dir . DIRECTORY_SEPARATOR . $classPath;\n                        }\n                    }\n                }\n            }\n        }\n\n        foreach ($this->fallbackDirs as $dir) {\n            if (file_exists($dir . DIRECTORY_SEPARATOR . $classPath)) {\n                return $dir . DIRECTORY_SEPARATOR . $classPath;\n            }\n        }\n\n        if ($this->useIncludePath && $file = stream_resolve_include_path($classPath)) {\n            return $file;\n        }\n\n        return $this->classMap[$class] = false;\n    }\n}\n[\n    \"AFL-1.1\", \"AFL-1.2\", \"AFL-2.0\", \"AFL-2.1\", \"AFL-3.0\", \"APL-1.0\", \"Aladdin\",\n    \"ANTLR-PD\", \"Apache-1.0\", \"Apache-1.1\", \"Apache-2.0\", \"APSL-1.0\",\n    \"APSL-1.1\", \"APSL-1.2\", \"APSL-2.0\", \"Artistic-1.0\", \"Artistic-2.0\", \"AAL\",\n    \"BitTorrent-1.0\", \"BitTorrent-1.1\", \"BSL-1.0\", \"BSD-3-Clause-Clear\",\n    \"BSD-2-Clause\", \"BSD-2-Clause-FreeBSD\", \"BSD-2-Clause-NetBSD\",\n    \"BSD-3-Clause\", \"BSD-4-Clause\", \"BSD-4-Clause-UC\", \"CECILL-1.0\",\n    \"CECILL-1.1\", \"CECILL-2.0\", \"CECILL-B\", \"CECILL-C\", \"ClArtistic\",\n    \"CNRI-Python\", \"CNRI-Python-GPL-Compatible\", \"CDDL-1.0\", \"CDDL-1.1\",\n    \"CPAL-1.0\", \"CPL-1.0\", \"CATOSL-1.1\", \"Condor-1.1\", \"CC-BY-1.0\", \"CC-BY-2.0\",\n    \"CC-BY-2.5\", \"CC-BY-3.0\", \"CC-BY-ND-1.0\", \"CC-BY-ND-2.0\", \"CC-BY-ND-2.5\",\n    \"CC-BY-ND-3.0\", \"CC-BY-NC-1.0\", \"CC-BY-NC-2.0\", \"CC-BY-NC-2.5\",\n    \"CC-BY-NC-3.0\", \"CC-BY-NC-ND-1.0\", \"CC-BY-NC-ND-2.0\", \"CC-BY-NC-ND-2.5\",\n    \"CC-BY-NC-ND-3.0\", \"CC-BY-NC-SA-1.0\", \"CC-BY-NC-SA-2.0\", \"CC-BY-NC-SA-2.5\",\n    \"CC-BY-NC-SA-3.0\", \"CC-BY-SA-1.0\", \"CC-BY-SA-2.0\", \"CC-BY-SA-2.5\",\n    \"CC-BY-SA-3.0\", \"CC0-1.0\", \"CUA-OPL-1.0\", \"WTFPL\", \"EPL-1.0\", \"eCos-2.0\",\n    \"ECL-1.0\", \"ECL-2.0\", \"EFL-1.0\", \"EFL-2.0\", \"Entessa\", \"ErlPL-1.1\",\n    \"EUDatagrid\", \"EUPL-1.0\", \"EUPL-1.1\", \"Fair\", \"Frameworx-1.0\", \"FTL\",\n    \"AGPL-3.0\", \"GFDL-1.1\", \"GFDL-1.2\", \"GFDL-1.3\", \"GPL-1.0\", \"GPL-1.0+\",\n    \"GPL-2.0\", \"GPL-2.0+\", \"GPL-2.0-with-autoconf-exception\",\n    \"GPL-2.0-with-bison-exception\", \"GPL-2.0-with-classpath-exception\",\n    \"GPL-2.0-with-font-exception\", \"GPL-2.0-with-GCC-exception\", \"GPL-3.0\",\n    \"GPL-3.0+\", \"GPL-3.0-with-autoconf-exception\", \"GPL-3.0-with-GCC-exception\",\n    \"LGPL-2.1\", \"LGPL-2.1+\", \"LGPL-3.0\", \"LGPL-3.0+\", \"LGPL-2.0\", \"LGPL-2.0+\",\n    \"gSOAP-1.3b\", \"HPND\", \"IPL-1.0\", \"Imlib2\", \"IJG\", \"Intel\", \"IPA\", \"ISC\",\n    \"JSON\", \"LPPL-1.3a\", \"LPPL-1.0\", \"LPPL-1.1\", \"LPPL-1.2\", \"LPPL-1.3c\",\n    \"Libpng\", \"LPL-1.02\", \"LPL-1.0\", \"MS-PL\", \"MS-RL\", \"MirOS\", \"MIT\",\n    \"Motosoto\", \"MPL-1.0\", \"MPL-1.1\", \"MPL-2.0\",\n    \"MPL-2.0-no-copyleft-exception\", \"Multics\", \"NASA-1.3\", \"Naumen\",\n    \"NBPL-1.0\", \"NGPL\", \"NOSL\", \"NPL-1.0\", \"NPL-1.1\", \"Nokia\", \"NPOSL-3.0\",\n    \"NTP\", \"OCLC-2.0\", \"ODbL-1.0\", \"PDDL-1.0\", \"OGTSL\", \"OLDAP-2.2.2\",\n    \"OLDAP-1.1\", \"OLDAP-1.2\", \"OLDAP-1.3\", \"OLDAP-1.4\", \"OLDAP-2.0\",\n    \"OLDAP-2.0.1\", \"OLDAP-2.1\", \"OLDAP-2.2\", \"OLDAP-2.2.1\", \"OLDAP-2.3\",\n    \"OLDAP-2.4\", \"OLDAP-2.5\", \"OLDAP-2.6\", \"OLDAP-2.7\", \"OPL-1.0\", \"OSL-1.0\",\n    \"OSL-2.0\", \"OSL-2.1\", \"OSL-3.0\", \"OLDAP-2.8\", \"OpenSSL\", \"PHP-3.0\",\n    \"PHP-3.01\", \"PostgreSQL\", \"Python-2.0\", \"QPL-1.0\", \"RPSL-1.0\", \"RPL-1.5\",\n    \"RHeCos-1.1\", \"RSCPL\", \"Ruby\", \"SAX-PD\", \"SGI-B-1.0\", \"SGI-B-1.1\",\n    \"SGI-B-2.0\", \"OFL-1.0\", \"OFL-1.1\", \"SimPL-2.0\", \"Sleepycat\", \"SMLNJ\",\n    \"SugarCRM-1.1.3\", \"SISSL\", \"SPL-1.0\", \"Watcom-1.0\", \"NCSA\", \"VSL-1.0\",\n    \"W3C\", \"WXwindows\", \"Xnet\", \"X11\", \"XFree86-1.1\", \"YPL-1.0\", \"YPL-1.1\",\n    \"Zimbra-1.3\", \"Zlib\", \"ZPL-1.1\", \"ZPL-2.0\", \"ZPL-2.1\"\n]{\n    \"name\": \"Package\",\n    \"type\": \"object\",\n    \"additionalProperties\": false,\n    \"properties\": {\n        \"name\": {\n            \"type\": \"string\",\n            \"description\": \"Package name, including 'vendor-name/' prefix.\",\n            \"required\": true\n        },\n        \"type\": {\n            \"description\": \"Package type, either 'library' for common packages, 'composer-installer' for custom installers, 'metapackage' for empty packages, or a custom type ([a-z0-9-]+) defined by whatever project this package applies to.\",\n            \"type\": \"string\"\n        },\n        \"target-dir\": {\n            \"description\": \"Forces the package to be installed into the given subdirectory path. This is used for autoloading PSR-0 packages that do not contain their full path. Use forward slashes for cross-platform compatibility.\",\n            \"type\": \"string\"\n        },\n        \"description\": {\n            \"type\": \"string\",\n            \"description\": \"Short package description.\",\n            \"required\": true\n        },\n        \"keywords\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"type\": \"string\",\n                \"description\": \"A tag/keyword that this package relates to.\"\n            }\n        },\n        \"homepage\": {\n            \"type\": \"string\",\n            \"description\": \"Homepage URL for the project.\",\n            \"format\": \"uri\"\n        },\n        \"version\": {\n            \"type\": \"string\",\n            \"description\": \"Package version, see http://getcomposer.org/doc/04-schema.md#version for more info on valid schemes.\"\n        },\n        \"time\": {\n            \"type\": \"string\",\n            \"description\": \"Package release date, in 'YYYY-MM-DD' or 'YYYY-MM-DD HH:MM:SS' format.\"\n        },\n        \"license\": {\n            \"type\": [\"string\", \"array\"],\n            \"description\": \"License name. Or an array of license names.\"\n        },\n        \"authors\": {\n            \"type\": \"array\",\n            \"description\": \"List of authors that contributed to the package. This is typically the main maintainers, not the full list.\",\n            \"items\": {\n                \"type\": \"object\",\n                \"additionalProperties\": false,\n                \"properties\": {\n                    \"name\": {\n                        \"type\": \"string\",\n                        \"description\": \"Full name of the author.\",\n                        \"required\": true\n                    },\n                    \"email\": {\n                        \"type\": \"string\",\n                        \"description\": \"Email address of the author.\",\n                        \"format\": \"email\"\n                    },\n                    \"homepage\": {\n                        \"type\": \"string\",\n                        \"description\": \"Homepage URL for the author.\",\n                        \"format\": \"uri\"\n                    },\n                    \"role\": {\n                        \"type\": \"string\",\n                        \"description\": \"Author's role in the project.\"\n                    }\n                }\n            }\n        },\n        \"require\": {\n            \"type\": \"object\",\n            \"description\": \"This is a hash of package name (keys) and version constraints (values) that are required to run this package.\",\n            \"additionalProperties\": true\n        },\n        \"replace\": {\n            \"type\": \"object\",\n            \"description\": \"This is a hash of package name (keys) and version constraints (values) that can be replaced by this package.\",\n            \"additionalProperties\": true\n        },\n        \"conflict\": {\n            \"type\": \"object\",\n            \"description\": \"This is a hash of package name (keys) and version constraints (values) that conflict with this package.\",\n            \"additionalProperties\": true\n        },\n        \"provide\": {\n            \"type\": \"object\",\n            \"description\": \"This is a hash of package name (keys) and version constraints (values) that this package provides in addition to this package's name.\",\n            \"additionalProperties\": true\n        },\n        \"require-dev\": {\n            \"type\": \"object\",\n            \"description\": \"This is a hash of package name (keys) and version constraints (values) that this package requires for developing it (testing tools and such).\",\n            \"additionalProperties\": true\n        },\n        \"suggest\": {\n            \"type\": \"object\",\n            \"description\": \"This is a hash of package name (keys) and descriptions (values) that this package suggests work well with it (this will be suggested to the user during installation).\",\n            \"additionalProperties\": true\n        },\n        \"config\": {\n            \"type\": \"object\",\n            \"description\": \"Composer options.\",\n            \"properties\": {\n                \"process-timeout\": {\n                    \"type\": \"integer\",\n                    \"description\": \"The timeout in seconds for process executions, defaults to 300 (5mins).\"\n                },\n                \"use-include-path\": {\n                    \"type\": \"boolean\",\n                    \"description\": \"If true, the Composer autoloader will also look for classes in the PHP include path.\"\n                },\n                \"preferred-install\": {\n                    \"type\": \"string\",\n                    \"description\": \"The install method Composer will prefer to use, defaults to auto and can be any of source, dist or auto.\"\n                },\n                \"notify-on-install\": {\n                    \"type\": \"boolean\",\n                    \"description\": \"Composer allows repositories to define a notification URL, so that they get notified whenever a package from that repository is installed. This option allows you to disable that behaviour, defaults to true.\"\n                },\n                \"github-protocols\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of protocols to use for github.com clones, in priority order, defaults to [\\\"git\\\", \\\"https\\\", \\\"http\\\"].\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"github-oauth\": {\n                    \"type\": \"object\",\n                    \"description\": \"A hash of domain name => github API oauth tokens, typically {\\\"github.com\\\":\\\"<token>\\\"}.\",\n                    \"additionalProperties\": true\n                },\n                \"vendor-dir\": {\n                    \"type\": \"string\",\n                    \"description\": \"The location where all packages are installed, defaults to \\\"vendor\\\".\"\n                },\n                \"bin-dir\": {\n                    \"type\": \"string\",\n                    \"description\": \"The location where all binaries are linked, defaults to \\\"vendor/bin\\\".\"\n                },\n                \"cache-dir\": {\n                    \"type\": \"string\",\n                    \"description\": \"The location where all caches are located, defaults to \\\"~/.composer/cache\\\" on *nix and \\\"%LOCALAPPDATA%\\\\Composer\\\" on windows.\"\n                },\n                \"cache-files-dir\": {\n                    \"type\": \"string\",\n                    \"description\": \"The location where files (zip downloads) are cached, defaults to \\\"{$cache-dir}/files\\\".\"\n                },\n                \"cache-repo-dir\": {\n                    \"type\": \"string\",\n                    \"description\": \"The location where repo (git/hg repo clones) are cached, defaults to \\\"{$cache-dir}/repo\\\".\"\n                },\n                \"cache-vcs-dir\": {\n                    \"type\": \"string\",\n                    \"description\": \"The location where vcs infos (git clones, github api calls, etc. when reading vcs repos) are cached, defaults to \\\"{$cache-dir}/vcs\\\".\"\n                },\n                \"cache-ttl\": {\n                    \"type\": \"integer\",\n                    \"description\": \"The default cache time-to-live, defaults to 15552000 (6 months).\"\n                },\n                \"cache-files-ttl\": {\n                    \"type\": \"integer\",\n                    \"description\": \"The cache time-to-live for files, defaults to the value of cache-ttl.\"\n                },\n                \"cache-files-maxsize\": {\n                    \"type\": [\"string\", \"integer\"],\n                    \"description\": \"The cache max size for the files cache, defaults to \\\"300MiB\\\".\"\n                },\n                \"discard-changes\": {\n                    \"type\": [\"string\", \"boolean\"],\n                    \"description\": \"The default style of handling dirty updates, defaults to false and can be any of true, false or \\\"stash\\\".\"\n                }\n            }\n        },\n        \"extra\": {\n            \"type\": [\"object\", \"array\"],\n            \"description\": \"Arbitrary extra data that can be used by custom installers, for example, package of type composer-installer must have a 'class' key defining the installer class name.\",\n            \"additionalProperties\": true\n        },\n        \"autoload\": {\n            \"type\": \"object\",\n            \"description\": \"Description of how the package can be autoloaded.\",\n            \"properties\": {\n                \"psr-0\": {\n                    \"type\": \"object\",\n                    \"description\": \"This is a hash of namespaces (keys) and the directories they can be found into (values, can be arrays of paths) by the autoloader.\",\n                    \"additionalProperties\": true\n                },\n                \"classmap\": {\n                    \"type\": \"array\",\n                    \"description\": \"This is an array of directories that contain classes to be included in the class-map generation process.\"\n                },\n                \"files\": {\n                    \"type\": \"array\",\n                    \"description\": \"This is an array of files that are always required on every request.\"\n                }\n            }\n        },\n        \"archive\": {\n            \"type\": [\"object\"],\n            \"description\": \"Options for creating package archives for distribution.\",\n            \"properties\": {\n                \"exclude\": {\n                    \"type\": \"array\",\n                    \"description\": \"A list of patterns for paths to exclude or include if prefixed with an exclamation mark.\"\n                }\n            }\n        },\n        \"repositories\": {\n            \"type\": [\"object\", \"array\"],\n            \"description\": \"A set of additional repositories where packages can be found.\",\n            \"additionalProperties\": true\n        },\n        \"minimum-stability\": {\n            \"type\": [\"string\"],\n            \"description\": \"The minimum stability the packages must have to be install-able. Possible values are: dev, alpha, beta, RC, stable.\"\n        },\n        \"prefer-stable\": {\n            \"type\": [\"boolean\"],\n            \"description\": \"If set to true, stable packages will be prefered to dev packages when possible, even if the minimum-stability allows unstable packages.\"\n        },\n        \"bin\": {\n            \"type\": [\"array\"],\n            \"description\": \"A set of files that should be treated as binaries and symlinked into bin-dir (from config).\",\n            \"items\": {\n                \"type\": \"string\"\n            }\n        },\n        \"include-path\": {\n            \"type\": [\"array\"],\n            \"description\": \"DEPRECATED: A list of directories which should get added to PHP's include path. This is only present to support legacy projects, and all new code should preferably use autoloading.\",\n            \"items\": {\n                \"type\": \"string\"\n            }\n        },\n        \"scripts\": {\n            \"type\": [\"object\"],\n            \"description\": \"Scripts listeners that will be executed before/after some events.\",\n            \"properties\": {\n                \"pre-install-cmd\": {\n                    \"type\": [\"array\", \"string\"],\n                    \"description\": \"Occurs before the install command is executed, contains one or more Class::method callables or shell commands.\"\n                },\n                \"post-install-cmd\": {\n                    \"type\": [\"array\", \"string\"],\n                    \"description\": \"Occurs after the install command is executed, contains one or more Class::method callables or shell commands.\"\n                },\n                \"pre-update-cmd\": {\n                    \"type\": [\"array\", \"string\"],\n                    \"description\": \"Occurs before the update command is executed, contains one or more Class::method callables or shell commands.\"\n                },\n                \"post-update-cmd\": {\n                    \"type\": [\"array\", \"string\"],\n                    \"description\": \"Occurs after the update command is executed, contains one or more Class::method callables or shell commands.\"\n                },\n                \"pre-package-install\": {\n                    \"type\": [\"array\", \"string\"],\n                    \"description\": \"Occurs before a package is installed, contains one or more Class::method callables or shell commands.\"\n                },\n                \"post-package-install\": {\n                    \"type\": [\"array\", \"string\"],\n                    \"description\": \"Occurs after a package is installed, contains one or more Class::method callables or shell commands.\"\n                },\n                \"pre-package-update\": {\n                    \"type\": [\"array\", \"string\"],\n                    \"description\": \"Occurs before a package is updated, contains one or more Class::method callables or shell commands.\"\n                },\n                \"post-package-update\": {\n                    \"type\": [\"array\", \"string\"],\n                    \"description\": \"Occurs after a package is updated, contains one or more Class::method callables or shell commands.\"\n                },\n                \"pre-package-uninstall\": {\n                    \"type\": [\"array\", \"string\"],\n                    \"description\": \"Occurs before a package has been uninstalled, contains one or more Class::method callables or shell commands.\"\n                },\n                \"post-package-uninstall\": {\n                    \"type\": [\"array\", \"string\"],\n                    \"description\": \"Occurs after a package has been uninstalled, contains one or more Class::method callables or shell commands.\"\n                },\n                \"pre-autoload-dump\": {\n                    \"type\": [\"array\", \"string\"],\n                    \"description\": \"Occurs before the autoloader is dumped, contains one or more Class::method callables or shell commands.\"\n                },\n                \"post-autoload-dump\": {\n                    \"type\": [\"array\", \"string\"],\n                    \"description\": \"Occurs after the autoloader is dumped, contains one or more Class::method callables or shell commands.\"\n                },\n                \"post-root-package-install\": {\n                    \"type\": [\"array\", \"string\"],\n                    \"description\": \"Occurs after the root-package is installed, contains one or more Class::method callables or shell commands.\"\n                },\n                \"post-create-project-cmd\": {\n                    \"type\": [\"array\", \"string\"],\n                    \"description\": \"Occurs after the create-project command is executed, contains one or more Class::method callables or shell commands.\"\n                }\n            }\n        },\n        \"support\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"email\": {\n                    \"type\": \"string\",\n                    \"description\": \"Email address for support.\",\n                    \"format\": \"email\"\n                },\n                \"issues\": {\n                    \"type\": \"string\",\n                    \"description\": \"URL to the Issue Tracker.\",\n                    \"format\": \"uri\"\n                },\n                \"forum\": {\n                    \"type\": \"string\",\n                    \"description\": \"URL to the Forum.\",\n                    \"format\": \"uri\"\n                },\n                \"wiki\": {\n                    \"type\": \"string\",\n                    \"description\": \"URL to the Wiki.\",\n                    \"format\": \"uri\"\n                },\n                \"irc\": {\n                    \"type\": \"string\",\n                    \"description\": \"IRC channel for support, as irc://server/channel.\",\n                    \"format\": \"uri\"\n                },\n                \"source\": {\n                    \"type\": \"string\",\n                    \"description\": \"URL to browse or download the sources.\",\n                    \"format\": \"uri\"\n                }\n            }\n        }\n    }\n}\nMZ�\u0000\u0003\u0000\u0000\u0000\u0004\u0000\u0000\u0000��\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u000e\u001f�\u000e\u0000�\t�!�\u0001L�!This program cannot be run in DOS mode.\r\r\n$\u0000\u0000\u0000\u0000\u0000\u0000\u0000�,�;�B�;�B�;�B�2�מ:�B�2���-�B�2�ƞ9�B�2�ў?�B�\u001ca9�8�B�;�C�\b�B�2�Ȟ:�B�2�֞:�B�2�Ӟ:�B�Rich;�B�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000PE\u0000\u0000L\u0001\u0005\u0000�MoO\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0002\u0001\u000b\u0001\t\u0000\u0000\n\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0000\u0000\u00008\u0013\u0000\u0000\u0000\u0010\u0000\u0000\u0000 \u0000\u0000\u0000\u0000@\u0000\u0000\u0010\u0000\u0000\u0000\u0002\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000`\u0000\u0000\u0000\u0004\u0000\u0000?�\u0000\u0000\u0003\u0000@�\u0000\u0000\u0010\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\"\u0000\u0000P\u0000\u0000\u0000\u0000@\u0000\u0000 \u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000P\u0000\u0000p\u0001\u0000\u0000\u0000!\u0000\u0000\u001c\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00008!\u0000\u0000@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000.text\u0000\u0000\u0000\u000b\t\u0000\u0000\u0000\u0010\u0000\u0000\u0000\n\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000`.rdata\u0000\u0000�\t\u0000\u0000\u0000 \u0000\u0000\u0000\n\u0000\u0000\u0000\u000e\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000@\u0000\u0000@.data\u0000\u0000\u0000�\u0003\u0000\u0000\u00000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000@\u0000\u0000�.rsrc\u0000\u0000\u0000 \u0006\u0000\u0000\u0000@\u0000\u0000\u0000\b\u0000\u0000\u0000\u001a\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000@\u0000\u0000@.reloc\u0000\u0000�\u0001\u0000\u0000\u0000P\u0000\u0000\u0000\u0002\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000@\u0000\u0000B\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j$��\u0018@\u0000�x\b\u0000\u0000j��\u0015\b @\u0000�e�\u0000���E�PV�\u0015\u0000 @\u0000�EЃ��PV�\u0015\u0004 @\u0000�M��\u0015X @\u0000�e�\u0000�E�P�5H @\u0000�\u0015L @\u0000YY�5\\ @\u0000�E�P�5` @\u0000�\u0015D @\u0000YY���\u0015P @\u0000�M���M��\u0015T @\u00003��H\b\u0000\u0000�;\r\u00000@\u0000u\u0002����\u0002\u0000\u0000h�\u0015@\u0000��\u0004\u0000\u0000�l3@\u0000�\u0004$40@\u0000�5h3@\u0000�40@\u0000h$0@\u0000h(0@\u0000h 0@\u0000�\u0015� @\u0000��\u0014�00@\u0000��}\bj\b��\u0003\u0000\u0000Y�j\u0010h\b\"@\u0000�\u001f\u0006\u0000\u00003ۉ]�d�\u0018\u0000\u0000\u0000�p\u0004�]俀3@\u0000SVW�\u00150 @\u0000;�t\u0019;�u\b3�F�u��\u0010h�\u0003\u0000\u0000�\u00154 @\u0000��3�F�|3@\u0000;�u\nj\u001f�\\\u0003\u0000\u0000Y�;�|3@\u0000��u,�5|3@\u0000h� @\u0000h� @\u0000��\u0005\u0000\u0000YY��t\u0017�E�������\u0000\u0000\u0000��\u0000\u0000\u0000�5<0@\u0000�|3@\u0000;�u\u001bh� @\u0000h� @\u0000�l\u0005\u0000\u0000YY�\u0005|3@\u0000\u0002\u0000\u0000\u00009]�u\bSW�\u00158 @\u00009\u001d�3@\u0000t\u0019h�3@\u0000��\u0004\u0000\u0000Y��t\nSj\u0002S�\u0015�3@\u0000�$0@\u0000�\r� @\u0000�\u0001�5$0@\u0000�5(0@\u0000�5 0@\u0000�\u0010�����\f�80@\u00009\u001d,0@\u0000u7P�\u0015� @\u0000�E��\b�\t�M�PQ��\u0003\u0000\u0000YYËe��E��80@\u00003�9\u001d,0@\u0000u\u0007P�\u0015h @\u00009\u001d<0@\u0000u\u0006�\u0015� @\u0000�E������80@\u0000��\u0004\u0000\u0000øMZ\u0000\u0000f9\u0005\u0000\u0000@\u0000t\u00043��M�<\u0000@\u0000��\u0000\u0000@\u0000�8PE\u0000\u0000u�\u000f�H\u0018��\u000b\u0001\u0000\u0000t\u001b��\u000b\u0002\u0000\u0000uՃ��\u0000\u0000\u0000\u000ev�3�9��\u0000\u0000\u0000�\u000e�xt\u000ev�3�9��\u0000\u0000\u0000\u000f����j\u0001�,0@\u0000�\u0015p @\u0000j��\u0015l @\u0000YY��3@\u0000��3@\u0000�\u0015� @\u0000�\rt3@\u0000�\b�\u0015� @\u0000�\rp3@\u0000�\b�� @\u0000�\u0000�x3@\u0000�V\u0002\u0000\u0000��\u0004\u0000\u0000�=\u00140@\u0000\u0000u\fh�\u0017@\u0000�\u0015� @\u0000Y�g\u0004\u0000\u0000�=\u00100@\u0000�u\tj��\u0015� @\u0000Y3���{\u0004\u0000\u0000�������U����(\u0003\u0000\u0000�H1@\u0000�\rD1@\u0000�\u0015@1@\u0000�\u001d<1@\u0000�581@\u0000�=41@\u0000f�\u0015`1@\u0000f�\rT1@\u0000f�\u001d01@\u0000f�\u0005,1@\u0000f�%(1@\u0000f�-$1@\u0000��\u0005X1@\u0000�E\u0000�L1@\u0000�E\u0004�P1@\u0000�E\b�\\1@\u0000�������\u0005�0@\u0000\u0001\u0000\u0001\u0000�P1@\u0000�L0@\u0000�\u0005@0@\u0000\t\u0004\u0000��\u0005D0@\u0000\u0001\u0000\u0000\u0000�\u00000@\u0000�������\u00040@\u0000�������\u0015\u001c @\u0000��0@\u0000j\u0001�?\u0004\u0000\u0000Yj\u0000�\u0015  @\u0000h\u001c!@\u0000�\u0015$ @\u0000�=�0@\u0000\u0000u\bj\u0001�\u001b\u0004\u0000\u0000Yh\t\u0004\u0000��\u0015( @\u0000P�\u0015, @\u0000�Ë�U���E\b�\u0000�8csm�u*�x\u0010\u0003u$�@\u0014= \u0005�\u0019t\u0015=!\u0005�\u0019t\u000e=\"\u0005�\u0019t\u0007=\u0000@�\u0001u\u0005��\u0003\u0000\u00003�]�\u0004\u0000hH\u0014@\u0000�\u0015  @\u00003���%� @\u0000j\u0014h(\"@\u0000�b\u0002\u0000\u0000�5�3@\u0000�5� @\u0000��Y�E����u\f�u\b�\u0015� @\u0000Y�gj\b��\u0003\u0000\u0000Y�e�\u0000�5�3@\u0000�։E��5�3@\u0000��YY�E��E�P�E�P�u\b�5l @\u0000��YP�U\u0003\u0000\u0000�E��u��֣�3@\u0000�u��փ�\u0014��3@\u0000�E������\t\u0000\u0000\u0000�E��\u0018\u0002\u0000\u0000�j\b�\u0019\u0003\u0000\u0000YË�U���u\b�N�����\u001b���YH]Ë�V��!@\u0000��!@\u0000W��;�s\u000f�\u0007��t\u0002�Ѓ�\u0004;�r�_^Ë�V�\u0004\"@\u0000�\u0004\"@\u0000W��;�s\u000f�\u0007��t\u0002�Ѓ�\u0004;�r�_^��%� @\u0000������U���M\b�MZ\u0000\u0000f9\u0001t\u00043�]ËA<\u0003��8PE\u0000\u0000u�3ҹ\u000b\u0001\u0000\u0000f9H\u0018\u000f��]�����������̋�U���E\b�H<\u0003�\u000f�A\u0014SV\u000f�q\u00063�W�D\b\u0018��v\u001b�}\f�H\f;�r\t�X\b\u0003�;�r\nB��(;�r�3�_^[]������������̋�U��j�hH\"@\u0000he\u0017@\u0000d�\u0000\u0000\u0000\u0000P��\bSVW�\u00000@\u00001E�3�P�E�d�\u0000\u0000\u0000\u0000�e��E�\u0000\u0000\u0000\u0000h\u0000\u0000@\u0000�*�����\u0004��tU�E\b-\u0000\u0000@\u0000Ph\u0000\u0000@\u0000�P�����\b��t;�@$��\u001f�Ѓ�\u0001�E������M�d�\r\u0000\u0000\u0000\u0000Y_^[��]ËE��\b�\u00013�=\u0005\u0000\u0000�\u000f��Ëe��E�����3��M�d�\r\u0000\u0000\u0000\u0000Y_^[��]���%� @\u0000�%� @\u0000��he\u0017@\u0000d�5\u0000\u0000\u0000\u0000�D$\u0010�l$\u0010�l$\u0010+�SVW�\u00000@\u00001E�3�P�e��u��E��E������E��E�d�\u0000\u0000\u0000\u0000ËM�d�\r\u0000\u0000\u0000\u0000Y__^[��]QË�U���u\u0014�u\u0010�u\f�u\bh�\u0010@\u0000h\u00000@\u0000��\u0000\u0000\u0000��\u0018]Ë�Vh\u0000\u0000\u0003\u0000h\u0000\u0000\u0001\u00003�V��\u0000\u0000\u0000��\f��t\rVVVVV��\u0000\u0000\u0000��\u0014^�3�Ë�U����\u0010�\u00000@\u0000�e�\u0000�e�\u0000SW�N�@��\u0000\u0000��;�t\r��t\t�У\u00040@\u0000�`V�E�P�\u0015< @\u0000�u�3u��\u0015\f @\u00003��\u0015\u0010 @\u00003��\u0015\u0014 @\u00003��E�P�\u0015\u0018 @\u0000�E�3E�3�;�u\u0007�O�@��\u000b��u\u0007����\u0010\u000b��5\u00000@\u0000�։5\u00040@\u0000^_[���%t @\u0000�%x @\u0000�%| @\u0000�%� @\u0000�%� @\u0000�%� @\u0000�%� @\u0000�%� @\u0000�%� @\u0000Pd�5\u0000\u0000\u0000\u0000�D$\f+d$\fSVW�(���\u00000@\u00003�P�E��u��E������E�d�\u0000\u0000\u0000\u0000ËM�d�\r\u0000\u0000\u0000\u0000Y__^[��]QËM�3������������M��%T @\u0000�T$\b�B\f�J�3�������J�3�������l\"@\u0000�s���\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�#\u0000\u0000�#\u0000\u0000�#\u0000\u0000�)\u0000\u0000r)\u0000\u0000b)\u0000\u0000H)\u0000\u00004)\u0000\u0000\u0016)\u0000\u0000�(\u0000\u0000�(\u0000\u0000�(\u0000\u0000�(\u0000\u0000�(\u0000\u0000�(\u0000\u0000�)\u0000\u0000\u0000\u0000\u0000\u0000�#\u0000\u0000�$\u0000\u0000\u001a%\u0000\u0000�%\u0000\u0000\u001a&\u0000\u0000d&\u0000\u0000�&\u0000\u0000�$\u0000\u0000\u0000\u0000\u0000\u0000('\u0000\u0000�'\u0000\u0000�'\u0000\u0000�'\u0000\u0000�'\u0000\u0000\u001e(\u0000\u0000((\u0000\u00006(\u0000\u0000�'\u0000\u0000H(\u0000\u0000Z(\u0000\u0000t(\u0000\u0000�(\u0000\u0000\u001e'\u0000\u0000\u000e'\u0000\u0000\u0000'\u0000\u0000�'\u0000\u0000�'\u0000\u0000l'\u0000\u0000^'\u0000\u0000R'\u0000\u0000F'\u0000\u0000>'\u0000\u0000>(\u0000\u00000'\u0000\u0000�'\u0000\u0000�)\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0010@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000W\u0012@\u0000�\u0014@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�MoO\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000l\u0000\u0000\u0000�!\u0000\u0000�\u000f\u0000\u0000@0@\u0000�0@\u0000bad allocation\u0000\u0000\u0000\u0000\u0000\u0000H\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00000@\u0000�!@\u0000\u0002\u0000\u0000\u0000RSDSь�\u0010��\u0001J�!���LZ\u0000\u0001\u0000\u0000\u0000c:\\users\\seld\\documents\\visual studio 2010\\Projects\\hiddeninp\\Release\\hiddeninp.pdb\u0000\u0000\u0000\u0000\u0000e\u0017\u0000\u0000�\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000����\u0000\u0000\u0000\u0000����\u0000\u0000\u0000\u0000����\u0007\u0012@\u0000\u001b\u0012@\u0000\u0000\u0000\u0000\u0000����\u0000\u0000\u0000\u0000����\u0000\u0000\u0000\u0000����\u0000\u0000\u0000\u0000:\u0015@\u0000\u0000\u0000\u0000\u0000����\u0000\u0000\u0000\u0000����\u0000\u0000\u0000\u0000�����\u0016@\u0000�\u0016@\u0000�����\u0018@\u0000\"\u0005�\u0019\u0001\u0000\u0000\u0000d\"@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�#\u0000\u0000\u0000 \u0000\u0000$#\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�&\u0000\u0000D \u0000\u0000H#\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0012(\u0000\u0000h \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�#\u0000\u0000�#\u0000\u0000�#\u0000\u0000�)\u0000\u0000r)\u0000\u0000b)\u0000\u0000H)\u0000\u00004)\u0000\u0000\u0016)\u0000\u0000�(\u0000\u0000�(\u0000\u0000�(\u0000\u0000�(\u0000\u0000�(\u0000\u0000�(\u0000\u0000�)\u0000\u0000\u0000\u0000\u0000\u0000�#\u0000\u0000�$\u0000\u0000\u001a%\u0000\u0000�%\u0000\u0000\u001a&\u0000\u0000d&\u0000\u0000�&\u0000\u0000�$\u0000\u0000\u0000\u0000\u0000\u0000('\u0000\u0000�'\u0000\u0000�'\u0000\u0000�'\u0000\u0000�'\u0000\u0000\u001e(\u0000\u0000((\u0000\u00006(\u0000\u0000�'\u0000\u0000H(\u0000\u0000Z(\u0000\u0000t(\u0000\u0000�(\u0000\u0000\u001e'\u0000\u0000\u000e'\u0000\u0000\u0000'\u0000\u0000�'\u0000\u0000�'\u0000\u0000l'\u0000\u0000^'\u0000\u0000R'\u0000\u0000F'\u0000\u0000>'\u0000\u0000>(\u0000\u00000'\u0000\u0000�'\u0000\u0000�)\u0000\u0000\u0000\u0000\u0000\u0000�\u0001GetConsoleMode\u0000\u0000�\u0003SetConsoleMode\u0000\u0000;\u0002GetStdHandle\u0000\u0000KERNEL32.dll\u0000\u0000\u0016\u0000??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z\u0000�\u0006?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A\u0000\u0000J\u0006?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A\u0000�\u0000??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z\u0000\u001d\u0003??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z\u0000\u0000_\u0002??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ\u0000\u0000{\u0001??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ\u0000\u0000�\u0007?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z\u0000\u0000MSVCP90.dll\u0000\u0015\u0001_amsg_exit\u0000\u0000�\u0000__getmainargs\u0000,\u0001_cexit\u0000\u0000|\u0001_exit\u0000f\u0000_XcptFilter\u0000�\u0004exit\u0000\u0000�\u0000__initenv\u0000\u0004\u0002_initterm\u0000\u0005\u0002_initterm_e\u0000<\u0001_configthreadlocale\u0000�\u0000__setusermatherr\u0000\u0000\u000b\u0001_adjust_fdiv\u0000\u0000�\u0000__p__commode\u0000\u0000�\u0000__p__fmode\u0000\u0000j\u0001_encode_pointer\u0000�\u0000__set_app_type\u0000\u0000K\u0001_crt_debugger_hook\u0000\u0000C\u0000?terminate@@YAXXZ\u0000MSVCR90.dll\u0000�\u0003_unlock\u0000�\u0000__dllonexit\u0000v\u0002_lock\u0000\u001c\u0003_onexit\u0000`\u0001_decode_pointer\u0000s\u0001_except_handler4_common\u0000\u000b\u0002_invoke_watson\u0000\u0000?\u0001_controlfp_s\u0000\u0000�\u0002InterlockedExchange\u0000!\u0004Sleep\u0000�\u0002InterlockedCompareExchange\u0000\u0000-\u0004TerminateProcess\u0000\u0000�\u0001GetCurrentProcess\u0000>\u0004UnhandledExceptionFilter\u0000\u0000\u0015\u0004SetUnhandledExceptionFilter\u0000�\u0002IsDebuggerPresent\u0000T\u0003QueryPerformanceCounter\u0000f\u0002GetTickCount\u0000\u0000�\u0001GetCurrentThreadId\u0000\u0000�\u0001GetCurrentProcessId\u0000O\u0002GetSystemTimeAsFileTime\u0000s\u0000__CxxFrameHandler3\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000N�@��\u0019�D������������\u0001\u0000\u0000\u0000$!@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0010\u0000\u0000\u0000 \u0000\u0000�\u0018\u0000\u0000\u00008\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000P\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000h\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\t\u0004\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\t\u0004\u0000\u0000�\u0000\u0000\u0000�@\u0000\u0000(\u0003\u0000\u0000�\u0004\u0000\u0000\u0000\u0000\u0000\u0000�C\u0000\u0000V\u0002\u0000\u0000�\u0004\u0000\u0000\u0000\u0000\u0000\u0000(\u00034\u0000\u0000\u0000V\u0000S\u0000_\u0000V\u0000E\u0000R\u0000S\u0000I\u0000O\u0000N\u0000_\u0000I\u0000N\u0000F\u0000O\u0000\u0000\u0000\u0000\u0000�\u0004��\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0002\u0000\u0000\u0001\u0000S\u0000t\u0000r\u0000i\u0000n\u0000g\u0000F\u0000i\u0000l\u0000e\u0000I\u0000n\u0000f\u0000o\u0000\u0000\u0000b\u0002\u0000\u0000\u0001\u00000\u00004\u00000\u00009\u00000\u00004\u0000b\u00000\u0000\u0000\u0000�\u0000Q\u0000\u0001\u0000F\u0000i\u0000l\u0000e\u0000D\u0000e\u0000s\u0000c\u0000r\u0000i\u0000p\u0000t\u0000i\u0000o\u0000n\u0000\u0000\u0000\u0000\u0000R\u0000e\u0000a\u0000d\u0000s\u0000 \u0000f\u0000r\u0000o\u0000m\u0000 \u0000s\u0000t\u0000d\u0000i\u0000n\u0000 \u0000w\u0000i\u0000t\u0000h\u0000o\u0000u\u0000t\u0000 \u0000l\u0000e\u0000a\u0000k\u0000i\u0000n\u0000g\u0000 \u0000i\u0000n\u0000f\u0000o\u0000 \u0000t\u0000o\u0000 \u0000t\u0000h\u0000e\u0000 \u0000t\u0000e\u0000r\u0000m\u0000i\u0000n\u0000a\u0000l\u0000 \u0000a\u0000n\u0000d\u0000 \u0000o\u0000u\u0000t\u0000p\u0000u\u0000t\u0000s\u0000 \u0000b\u0000a\u0000c\u0000k\u0000 \u0000t\u0000o\u0000 \u0000s\u0000t\u0000d\u0000o\u0000u\u0000t\u0000\u0000\u0000\u0000\u00006\u0000\u000b\u0000\u0001\u0000F\u0000i\u0000l\u0000e\u0000V\u0000e\u0000r\u0000s\u0000i\u0000o\u0000n\u0000\u0000\u0000\u0000\u00001\u0000,\u0000 \u00000\u0000,\u0000 \u00000\u0000,\u0000 \u00000\u0000\u0000\u0000\u0000\u00008\u0000\f\u0000\u0001\u0000I\u0000n\u0000t\u0000e\u0000r\u0000n\u0000a\u0000l\u0000N\u0000a\u0000m\u0000e\u0000\u0000\u0000h\u0000i\u0000d\u0000d\u0000e\u0000n\u0000i\u0000n\u0000p\u0000u\u0000t\u0000\u0000\u0000P\u0000\u0016\u0000\u0001\u0000L\u0000e\u0000g\u0000a\u0000l\u0000C\u0000o\u0000p\u0000y\u0000r\u0000i\u0000g\u0000h\u0000t\u0000\u0000\u0000J\u0000o\u0000r\u0000d\u0000i\u0000 \u0000B\u0000o\u0000g\u0000g\u0000i\u0000a\u0000n\u0000o\u0000 \u0000-\u0000 \u00002\u00000\u00001\u00002\u0000\u0000\u0000H\u0000\u0010\u0000\u0001\u0000O\u0000r\u0000i\u0000g\u0000i\u0000n\u0000a\u0000l\u0000F\u0000i\u0000l\u0000e\u0000n\u0000a\u0000m\u0000e\u0000\u0000\u0000h\u0000i\u0000d\u0000d\u0000e\u0000n\u0000i\u0000n\u0000p\u0000u\u0000t\u0000.\u0000e\u0000x\u0000e\u0000\u0000\u0000:\u0000\r\u0000\u0001\u0000P\u0000r\u0000o\u0000d\u0000u\u0000c\u0000t\u0000N\u0000a\u0000m\u0000e\u0000\u0000\u0000\u0000\u0000H\u0000i\u0000d\u0000d\u0000e\u0000n\u0000 \u0000I\u0000n\u0000p\u0000u\u0000t\u0000\u0000\u0000\u0000\u0000:\u0000\u000b\u0000\u0001\u0000P\u0000r\u0000o\u0000d\u0000u\u0000c\u0000t\u0000V\u0000e\u0000r\u0000s\u0000i\u0000o\u0000n\u0000\u0000\u00001\u0000,\u0000 \u00000\u0000,\u0000 \u00000\u0000,\u0000 \u00000\u0000\u0000\u0000\u0000\u0000D\u0000\u0000\u0000\u0001\u0000V\u0000a\u0000r\u0000F\u0000i\u0000l\u0000e\u0000I\u0000n\u0000f\u0000o\u0000\u0000\u0000\u0000\u0000$\u0000\u0004\u0000\u0000\u0000T\u0000r\u0000a\u0000n\u0000s\u0000l\u0000a\u0000t\u0000i\u0000o\u0000n\u0000\u0000\u0000\u0000\u0000\t\u0004�\u0004<assembly xmlns=\"urn:schemas-microsoft-com:asm.v1\" manifestVersion=\"1.0\">\r\n  <trustInfo xmlns=\"urn:schemas-microsoft-com:asm.v3\">\r\n    <security>\r\n      <requestedPrivileges>\r\n        <requestedExecutionLevel level=\"asInvoker\" uiAccess=\"false\"></requestedExecutionLevel>\r\n      </requestedPrivileges>\r\n    </security>\r\n  </trustInfo>\r\n  <dependency>\r\n    <dependentAssembly>\r\n      <assemblyIdentity type=\"win32\" name=\"Microsoft.VC90.CRT\" version=\"9.0.21022.8\" processorArchitecture=\"x86\" publicKeyToken=\"1fc8b3b9a1e18e3b\"></assemblyIdentity>\r\n    </dependentAssembly>\r\n  </dependency>\r\n</assembly>PAPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDING\u0000\u0010\u0000\u0000@\u0001\u0000\u0000\u00030\u00100!0/080F0L0T0^0d0n0{0�0�0�0�0�0�0�0�0�0�0�0�0�0\b1#1-1@1J1O1T1v1{1�1�1�1�1�1�1�1�1�1�1�1�1�1�1\u00032\"2*23292A2M2_2j2p2�2�2�2�2�2�2�2�2�2�2�2\u000b3\u00133\u00193%303N3T3Z3`3f3l3s3z3�3�3�3�3�3�3�3�3�3�3�3�3�3�3�3�3\u00044\u00144\u00194\u001f4%4;4B4�4�4�4�4�4�4�4�4�4�4\u00145!5^5c5�5�5�5H6M6_6}6�6�6\u00007\u00067\r7*7w7|7�7�7�7�7\u00058\r8\u00198=8E8P8V8\\8b8h8n8t8z8�8�8�8\u00029\u0000\u0000\u0000 \u0000\u0000$\u0000\u0000\u0000�0�0�0\u001c1 1t1x1\u001c2 2@2\\2`2h2t2\u00000\u0000\u0000\f\u0000\u0000\u0000\u00180\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Process;\n\nuse Symfony\\Component\\Process\\Exception\\RuntimeException;\n\n\n\n\n\n\n\n\n\n\n\n\nclass PhpProcess extends Process\n{\nprivate $executableFinder;\n\n\n\n\n\n\n\n\n\n\n\n\npublic function __construct($script, $cwd = null, array $env = array(), $timeout = 60, array $options = array())\n{\nparent::__construct(null, $cwd, $env, $script, $timeout, $options);\n\n$this->executableFinder = new PhpExecutableFinder();\n}\n\n\n\n\n\n\npublic function setPhpBinary($php)\n{\n$this->setCommandLine($php);\n}\n\n\n\n\npublic function start($callback = null)\n{\nif (null === $this->getCommandLine()) {\nif (false === $php = $this->executableFinder->find()) {\nthrow new RuntimeException('Unable to find the PHP executable.');\n}\n$this->setCommandLine($php);\n}\n\nparent::start($callback);\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Process;\n\n\n\n\n\n\n\nclass ExecutableFinder\n{\nprivate $suffixes = array('.exe', '.bat', '.cmd', '.com');\n\n\n\n\n\n\npublic function setSuffixes(array $suffixes)\n{\n$this->suffixes = $suffixes;\n}\n\n\n\n\n\n\npublic function addSuffix($suffix)\n{\n$this->suffixes[] = $suffix;\n}\n\n\n\n\n\n\n\n\n\n\npublic function find($name, $default = null, array $extraDirs = array())\n{\nif (ini_get('open_basedir')) {\n$searchPath = explode(PATH_SEPARATOR, getenv('open_basedir'));\n$dirs = array();\nforeach ($searchPath as $path) {\nif (is_dir($path)) {\n$dirs[] = $path;\n} else {\n$file = str_replace(dirname($path), '', $path);\nif ($file == $name && is_executable($path)) {\nreturn $path;\n}\n}\n}\n} else {\n$dirs = array_merge(\nexplode(PATH_SEPARATOR, getenv('PATH') ?: getenv('Path')),\n$extraDirs\n);\n}\n\n$suffixes = array('');\nif (defined('PHP_WINDOWS_VERSION_BUILD')) {\n$pathExt = getenv('PATHEXT');\n$suffixes = $pathExt ? explode(PATH_SEPARATOR, $pathExt) : $this->suffixes;\n}\nforeach ($suffixes as $suffix) {\nforeach ($dirs as $dir) {\nif (is_file($file = $dir.DIRECTORY_SEPARATOR.$name.$suffix) && (defined('PHP_WINDOWS_VERSION_BUILD') || is_executable($file))) {\nreturn $file;\n}\n}\n}\n\nreturn $default;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Process;\n\nuse Symfony\\Component\\Process\\Exception\\InvalidArgumentException;\nuse Symfony\\Component\\Process\\Exception\\LogicException;\nuse Symfony\\Component\\Process\\Exception\\RuntimeException;\n\n\n\n\n\n\n\n\n\nclass Process\n{\nconst ERR = 'err';\nconst OUT = 'out';\n\nconst STATUS_READY = 'ready';\nconst STATUS_STARTED = 'started';\nconst STATUS_TERMINATED = 'terminated';\n\nconst STDIN = 0;\nconst STDOUT = 1;\nconst STDERR = 2;\n\n\n const TIMEOUT_PRECISION = 0.2;\n\nprivate $commandline;\nprivate $cwd;\nprivate $env;\nprivate $stdin;\nprivate $starttime;\nprivate $timeout;\nprivate $options;\nprivate $exitcode;\nprivate $fallbackExitcode;\nprivate $processInformation;\nprivate $stdout;\nprivate $stderr;\nprivate $enhanceWindowsCompatibility;\nprivate $enhanceSigchildCompatibility;\nprivate $pipes;\nprivate $process;\nprivate $status = self::STATUS_READY;\nprivate $incrementalOutputOffset;\nprivate $incrementalErrorOutputOffset;\nprivate $tty;\n\nprivate $fileHandles;\nprivate $readBytes;\n\nprivate static $sigchild;\n\n\n\n\n\n\n\n\npublic static $exitCodes = array(\n0 => 'OK',\n1 => 'General error',\n2 => 'Misuse of shell builtins',\n\n126 => 'Invoked command cannot execute',\n127 => 'Command not found',\n128 => 'Invalid exit argument',\n\n\n 129 => 'Hangup',\n130 => 'Interrupt',\n131 => 'Quit and dump core',\n132 => 'Illegal instruction',\n133 => 'Trace/breakpoint trap',\n134 => 'Process aborted',\n135 => 'Bus error: \"access to undefined portion of memory object\"',\n136 => 'Floating point exception: \"erroneous arithmetic operation\"',\n137 => 'Kill (terminate immediately)',\n138 => 'User-defined 1',\n139 => 'Segmentation violation',\n140 => 'User-defined 2',\n141 => 'Write to pipe with no one reading',\n142 => 'Signal raised by alarm',\n143 => 'Termination (request to terminate)',\n\n 145 => 'Child process terminated, stopped (or continued*)',\n146 => 'Continue if stopped',\n147 => 'Stop executing temporarily',\n148 => 'Terminal stop signal',\n149 => 'Background process attempting to read from tty (\"in\")',\n150 => 'Background process attempting to write to tty (\"out\")',\n151 => 'Urgent data available on socket',\n152 => 'CPU time limit exceeded',\n153 => 'File size limit exceeded',\n154 => 'Signal raised by timer counting virtual time: \"virtual timer expired\"',\n155 => 'Profiling timer expired',\n\n 157 => 'Pollable event',\n\n 159 => 'Bad syscall',\n);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npublic function __construct($commandline, $cwd = null, array $env = null, $stdin = null, $timeout = 60, array $options = array())\n{\nif (!function_exists('proc_open')) {\nthrow new RuntimeException('The Process class relies on proc_open, which is not available on your PHP installation.');\n}\n\n$this->commandline = $commandline;\n$this->cwd = $cwd;\n\n\n \n \n \n\nif (null === $this->cwd && (defined('ZEND_THREAD_SAFE') || defined('PHP_WINDOWS_VERSION_BUILD'))) {\n$this->cwd = getcwd();\n}\nif (null !== $env) {\n$this->env = array();\nforeach ($env as $key => $value) {\n$this->env[(binary) $key] = (binary) $value;\n}\n} else {\n$this->env = null;\n}\n$this->stdin = $stdin;\n$this->setTimeout($timeout);\n$this->enhanceWindowsCompatibility = true;\n$this->enhanceSigchildCompatibility = !defined('PHP_WINDOWS_VERSION_BUILD') && $this->isSigchildEnabled();\n$this->options = array_replace(array('suppress_errors' => true, 'binary_pipes' => true), $options);\n}\n\npublic function __destruct()\n{\n\n $this->stop();\n}\n\npublic function __clone()\n{\n$this->exitcode = null;\n$this->fallbackExitcode = null;\n$this->processInformation = null;\n$this->stdout = null;\n$this->stderr = null;\n$this->pipes = null;\n$this->process = null;\n$this->status = self::STATUS_READY;\n$this->fileHandles = null;\n$this->readBytes = null;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npublic function run($callback = null)\n{\n$this->start($callback);\n\nreturn $this->wait($callback);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npublic function start($callback = null)\n{\nif ($this->isRunning()) {\nthrow new RuntimeException('Process is already running');\n}\n\n$this->starttime = microtime(true);\n$this->stdout = '';\n$this->stderr = '';\n$this->incrementalOutputOffset = 0;\n$this->incrementalErrorOutputOffset = 0;\n$callback = $this->buildCallback($callback);\n$descriptors = $this->getDescriptors();\n\n$commandline = $this->commandline;\n\nif (defined('PHP_WINDOWS_VERSION_BUILD') && $this->enhanceWindowsCompatibility) {\n$commandline = 'cmd /V:ON /E:ON /C \"'.$commandline.'\"';\nif (!isset($this->options['bypass_shell'])) {\n$this->options['bypass_shell'] = true;\n}\n}\n\n$this->process = proc_open($commandline, $descriptors, $this->pipes, $this->cwd, $this->env, $this->options);\n\nif (!is_resource($this->process)) {\nthrow new RuntimeException('Unable to launch a new process.');\n}\n$this->status = self::STATUS_STARTED;\n\nforeach ($this->pipes as $pipe) {\nstream_set_blocking($pipe, false);\n}\n\n\nif ($this->tty) {\n$this->status = self::STATUS_TERMINATED;\nreturn;\n}\n\nif (null === $this->stdin) {\nfclose($this->pipes[0]);\nunset($this->pipes[0]);\n\nreturn;\n}\n\n$writePipes = array($this->pipes[0]);\nunset($this->pipes[0]);\n$stdinLen = strlen($this->stdin);\n$stdinOffset = 0;\n\nwhile ($writePipes) {\nif (defined('PHP_WINDOWS_VERSION_BUILD')) {\n$this->processFileHandles($callback);\n}\n\n$r = $this->pipes;\n$w = $writePipes;\n$e = null;\n\n$n = @stream_select($r, $w, $e, 0, ceil(static::TIMEOUT_PRECISION * 1E6));\n\nif (false === $n) {\nbreak;\n}\nif ($n === 0) {\nproc_terminate($this->process);\n\nthrow new RuntimeException('The process timed out.');\n}\n\nif ($w) {\n$written = fwrite($writePipes[0], (binary) substr($this->stdin, $stdinOffset), 8192);\nif (false !== $written) {\n$stdinOffset += $written;\n}\nif ($stdinOffset >= $stdinLen) {\nfclose($writePipes[0]);\n$writePipes = null;\n}\n}\n\nforeach ($r as $pipe) {\n$type = array_search($pipe, $this->pipes);\n$data = fread($pipe, 8192);\nif (strlen($data) > 0) {\ncall_user_func($callback, $type == 1 ? self::OUT : self::ERR, $data);\n}\nif (false === $data || feof($pipe)) {\nfclose($pipe);\nunset($this->pipes[$type]);\n}\n}\n\n$this->checkTimeout();\n}\n\n$this->updateStatus();\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npublic function restart($callback = null)\n{\nif ($this->isRunning()) {\nthrow new RuntimeException('Process is already running');\n}\n\n$process = clone $this;\n$process->start($callback);\n\nreturn $process;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npublic function wait($callback = null)\n{\n$this->updateStatus();\n$callback = $this->buildCallback($callback);\nwhile ($this->pipes || (defined('PHP_WINDOWS_VERSION_BUILD') && $this->fileHandles)) {\nif (defined('PHP_WINDOWS_VERSION_BUILD') && $this->fileHandles) {\n$this->processFileHandles($callback, !$this->pipes);\n}\n$this->checkTimeout();\n\nif ($this->pipes) {\n$r = $this->pipes;\n$w = null;\n$e = null;\n\n\n if (false === $n = @stream_select($r, $w, $e, 0, ceil(static::TIMEOUT_PRECISION * 1E6))) {\n$lastError = error_get_last();\n\n\n if (isset($lastError['message']) && false === stripos($lastError['message'], 'interrupted system call')) {\n$this->pipes = array();\n}\n\ncontinue;\n}\n\n\n if (0 === $n) {\ncontinue;\n}\n\nforeach ($r as $pipe) {\n$type = array_search($pipe, $this->pipes);\n$data = fread($pipe, 8192);\n\nif (strlen($data) > 0) {\n\n if (3 == $type) {\n$this->fallbackExitcode = (int) $data;\n} else {\ncall_user_func($callback, $type == 1 ? self::OUT : self::ERR, $data);\n}\n}\nif (false === $data || feof($pipe)) {\nfclose($pipe);\nunset($this->pipes[$type]);\n}\n}\n}\n}\n$this->updateStatus();\nif ($this->processInformation['signaled']) {\nif ($this->isSigchildEnabled()) {\nthrow new RuntimeException('The process has been signaled.');\n}\n\nthrow new RuntimeException(sprintf('The process has been signaled with signal \"%s\".', $this->processInformation['termsig']));\n}\n\n$time = 0;\nwhile ($this->isRunning() && $time < 1000000) {\n$time += 1000;\nusleep(1000);\n}\n\n$exitcode = proc_close($this->process);\n\nif ($this->processInformation['signaled']) {\nif ($this->isSigchildEnabled()) {\nthrow new RuntimeException('The process has been signaled.');\n}\n\nthrow new RuntimeException(sprintf('The process has been signaled with signal \"%s\".', $this->processInformation['termsig']));\n}\n\n$this->exitcode = $this->processInformation['running'] ? $exitcode : $this->processInformation['exitcode'];\n\nif (-1 == $this->exitcode && null !== $this->fallbackExitcode) {\n$this->exitcode = $this->fallbackExitcode;\n}\n\nreturn $this->exitcode;\n}\n\n\n\n\n\n\n\n\npublic function getPid()\n{\nif ($this->isSigchildEnabled()) {\nthrow new RuntimeException('This PHP has been compiled with --enable-sigchild. The process identifier can not be retrieved.');\n}\n\n$this->updateStatus();\n\nreturn $this->isRunning() ? $this->processInformation['pid'] : null;\n}\n\n\n\n\n\n\n\n\n\n\n\npublic function signal($signal)\n{\nif (!$this->isRunning()) {\nthrow new LogicException('Can not send signal on a non running process.');\n}\n\nif ($this->isSigchildEnabled()) {\nthrow new RuntimeException('This PHP has been compiled with --enable-sigchild. The process can not be signaled.');\n}\n\nif (true !== @proc_terminate($this->process, $signal)) {\nthrow new RuntimeException(sprintf('Error while sending signal `%d`.', $signal));\n}\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\npublic function getOutput()\n{\n$this->updateOutput();\n\nreturn $this->stdout;\n}\n\n\n\n\n\n\n\n\n\npublic function getIncrementalOutput()\n{\n$data = $this->getOutput();\n\n$latest = substr($data, $this->incrementalOutputOffset);\n$this->incrementalOutputOffset = strlen($data);\n\nreturn $latest;\n}\n\n\n\n\n\n\n\n\npublic function getErrorOutput()\n{\n$this->updateErrorOutput();\n\nreturn $this->stderr;\n}\n\n\n\n\n\n\n\n\n\n\npublic function getIncrementalErrorOutput()\n{\n$data = $this->getErrorOutput();\n\n$latest = substr($data, $this->incrementalErrorOutputOffset);\n$this->incrementalErrorOutputOffset = strlen($data);\n\nreturn $latest;\n}\n\n\n\n\n\n\n\n\n\n\npublic function getExitCode()\n{\nif ($this->isSigchildEnabled() && !$this->enhanceSigchildCompatibility) {\nthrow new RuntimeException('This PHP has been compiled with --enable-sigchild. You must use setEnhanceSigchildCompatibility() to use this method');\n}\n\n$this->updateStatus();\n\nreturn $this->exitcode;\n}\n\n\n\n\n\n\n\n\n\n\n\n\npublic function getExitCodeText()\n{\n$exitcode = $this->getExitCode();\n\nreturn isset(self::$exitCodes[$exitcode]) ? self::$exitCodes[$exitcode] : 'Unknown error';\n}\n\n\n\n\n\n\n\n\npublic function isSuccessful()\n{\nreturn 0 == $this->getExitCode();\n}\n\n\n\n\n\n\n\n\n\n\n\n\npublic function hasBeenSignaled()\n{\nif ($this->isSigchildEnabled()) {\nthrow new RuntimeException('This PHP has been compiled with --enable-sigchild. Term signal can not be retrieved');\n}\n\n$this->updateStatus();\n\nreturn $this->processInformation['signaled'];\n}\n\n\n\n\n\n\n\n\n\n\n\n\npublic function getTermSignal()\n{\nif ($this->isSigchildEnabled()) {\nthrow new RuntimeException('This PHP has been compiled with --enable-sigchild. Term signal can not be retrieved');\n}\n\n$this->updateStatus();\n\nreturn $this->processInformation['termsig'];\n}\n\n\n\n\n\n\n\n\n\n\npublic function hasBeenStopped()\n{\n$this->updateStatus();\n\nreturn $this->processInformation['stopped'];\n}\n\n\n\n\n\n\n\n\n\n\npublic function getStopSignal()\n{\n$this->updateStatus();\n\nreturn $this->processInformation['stopsig'];\n}\n\n\n\n\n\n\npublic function isRunning()\n{\nif (self::STATUS_STARTED !== $this->status) {\nreturn false;\n}\n\n$this->updateStatus();\n\nreturn $this->processInformation['running'];\n}\n\n\n\n\n\n\npublic function isStarted()\n{\nreturn $this->status != self::STATUS_READY;\n}\n\n\n\n\n\n\npublic function isTerminated()\n{\n$this->updateStatus();\n\nreturn $this->status == self::STATUS_TERMINATED;\n}\n\n\n\n\n\n\n\n\npublic function getStatus()\n{\n$this->updateStatus();\n\nreturn $this->status;\n}\n\n\n\n\n\n\n\n\n\n\n\npublic function stop($timeout = 10, $signal = null)\n{\n$timeoutMicro = (int) $timeout*1E6;\nif ($this->isRunning()) {\nproc_terminate($this->process);\n$time = 0;\nwhile (1 == $this->isRunning() && $time < $timeoutMicro) {\n$time += 1000;\nusleep(1000);\n}\n\nif ($this->isRunning() && !$this->isSigchildEnabled()) {\nif (null !== $signal || defined('SIGKILL')) {\n$this->signal($signal ?: SIGKILL);\n}\n}\n\nforeach ($this->pipes as $pipe) {\nfclose($pipe);\n}\n$this->pipes = array();\n\n$exitcode = proc_close($this->process);\n$this->exitcode = -1 === $this->processInformation['exitcode'] ? $exitcode : $this->processInformation['exitcode'];\n\nif (defined('PHP_WINDOWS_VERSION_BUILD')) {\nforeach ($this->fileHandles as $fileHandle) {\nfclose($fileHandle);\n}\n$this->fileHandles = array();\n}\n}\n$this->status = self::STATUS_TERMINATED;\n\nreturn $this->exitcode;\n}\n\n\n\n\n\n\npublic function addOutput($line)\n{\n$this->stdout .= $line;\n}\n\n\n\n\n\n\npublic function addErrorOutput($line)\n{\n$this->stderr .= $line;\n}\n\n\n\n\n\n\npublic function getCommandLine()\n{\nreturn $this->commandline;\n}\n\n\n\n\n\n\n\n\npublic function setCommandLine($commandline)\n{\n$this->commandline = $commandline;\n\nreturn $this;\n}\n\n\n\n\n\n\npublic function getTimeout()\n{\nreturn $this->timeout;\n}\n\n\n\n\n\n\n\n\n\n\n\n\npublic function setTimeout($timeout)\n{\nif (null === $timeout) {\n$this->timeout = null;\n\nreturn $this;\n}\n\n$timeout = (float) $timeout;\n\nif ($timeout < 0) {\nthrow new InvalidArgumentException('The timeout value must be a valid positive integer or float number.');\n}\n\n$this->timeout = $timeout;\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\npublic function setTty($tty)\n{\n$this->tty = (Boolean) $tty;\n\nreturn $this;\n}\n\n\n\n\n\n\npublic function isTty()\n{\nreturn $this->tty;\n}\n\n\n\n\n\n\npublic function getWorkingDirectory()\n{\n\n if (null === $this->cwd) {\n\n \n return getcwd() ?: null;\n}\n\nreturn $this->cwd;\n}\n\n\n\n\n\n\n\n\npublic function setWorkingDirectory($cwd)\n{\n$this->cwd = $cwd;\n\nreturn $this;\n}\n\n\n\n\n\n\npublic function getEnv()\n{\nreturn $this->env;\n}\n\n\n\n\n\n\n\n\npublic function setEnv(array $env)\n{\n$this->env = $env;\n\nreturn $this;\n}\n\n\n\n\n\n\npublic function getStdin()\n{\nreturn $this->stdin;\n}\n\n\n\n\n\n\n\n\npublic function setStdin($stdin)\n{\n$this->stdin = $stdin;\n\nreturn $this;\n}\n\n\n\n\n\n\npublic function getOptions()\n{\nreturn $this->options;\n}\n\n\n\n\n\n\n\n\npublic function setOptions(array $options)\n{\n$this->options = $options;\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\npublic function getEnhanceWindowsCompatibility()\n{\nreturn $this->enhanceWindowsCompatibility;\n}\n\n\n\n\n\n\n\n\npublic function setEnhanceWindowsCompatibility($enhance)\n{\n$this->enhanceWindowsCompatibility = (Boolean) $enhance;\n\nreturn $this;\n}\n\n\n\n\n\n\npublic function getEnhanceSigchildCompatibility()\n{\nreturn $this->enhanceSigchildCompatibility;\n}\n\n\n\n\n\n\n\n\n\n\n\n\npublic function setEnhanceSigchildCompatibility($enhance)\n{\n$this->enhanceSigchildCompatibility = (Boolean) $enhance;\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\n\npublic function checkTimeout()\n{\nif (0 < $this->timeout && $this->timeout < microtime(true) - $this->starttime) {\n$this->stop(0);\n\nthrow new RuntimeException('The process timed-out.');\n}\n}\n\n\n\n\n\n\nprivate function getDescriptors()\n{\n\n \n \n if (defined('PHP_WINDOWS_VERSION_BUILD')) {\n$this->fileHandles = array(\nself::STDOUT => tmpfile(),\n);\nif (false === $this->fileHandles[self::STDOUT]) {\nthrow new RuntimeException('A temporary file could not be opened to write the process output to, verify that your TEMP environment variable is writable');\n}\n$this->readBytes = array(\nself::STDOUT => 0,\n);\n\nreturn array(array('pipe', 'r'), $this->fileHandles[self::STDOUT], array('pipe', 'w'));\n} \n\nif ($this->tty) {\n$descriptors = array(\narray('file', '/dev/tty', 'r'),\narray('file', '/dev/tty', 'w'),\narray('file', '/dev/tty', 'w'),\n);\n} else {\n$descriptors = array(\narray('pipe', 'r'), \n array('pipe', 'w'), \n array('pipe', 'w'), \n );\n}\n\nif ($this->enhanceSigchildCompatibility && $this->isSigchildEnabled()) {\n\n $descriptors = array_merge($descriptors, array(array('pipe', 'w')));\n\n$this->commandline = '('.$this->commandline.') 3>/dev/null; code=$?; echo $code >&3; exit $code';\n}\n\nreturn $descriptors;\n}\n\n\n\n\n\n\n\n\n\n\n\nprotected function buildCallback($callback)\n{\n$that = $this;\n$out = self::OUT;\n$err = self::ERR;\n$callback = function ($type, $data) use ($that, $callback, $out, $err) {\nif ($out == $type) {\n$that->addOutput($data);\n} else {\n$that->addErrorOutput($data);\n}\n\nif (null !== $callback) {\ncall_user_func($callback, $type, $data);\n}\n};\n\nreturn $callback;\n}\n\n\n\n\nprotected function updateStatus()\n{\nif (self::STATUS_STARTED !== $this->status) {\nreturn;\n}\n\n$this->processInformation = proc_get_status($this->process);\nif (!$this->processInformation['running']) {\n$this->status = self::STATUS_TERMINATED;\nif (-1 !== $this->processInformation['exitcode']) {\n$this->exitcode = $this->processInformation['exitcode'];\n}\n}\n}\n\n\n\n\nprotected function updateErrorOutput()\n{\nif (isset($this->pipes[self::STDERR]) && is_resource($this->pipes[self::STDERR])) {\n$this->addErrorOutput(stream_get_contents($this->pipes[self::STDERR]));\n}\n}\n\n\n\n\nprotected function updateOutput()\n{\nif (defined('PHP_WINDOWS_VERSION_BUILD') && isset($this->fileHandles[self::STDOUT]) && is_resource($this->fileHandles[self::STDOUT])) {\nfseek($this->fileHandles[self::STDOUT], $this->readBytes[self::STDOUT]);\n$this->addOutput(stream_get_contents($this->fileHandles[self::STDOUT]));\n} elseif (isset($this->pipes[self::STDOUT]) && is_resource($this->pipes[self::STDOUT])) {\n$this->addOutput(stream_get_contents($this->pipes[self::STDOUT]));\n}\n}\n\n\n\n\n\n\nprotected function isSigchildEnabled()\n{\nif (null !== self::$sigchild) {\nreturn self::$sigchild;\n}\n\nob_start();\nphpinfo(INFO_GENERAL);\n\nreturn self::$sigchild = false !== strpos(ob_get_clean(), '--enable-sigchild');\n}\n\n\n\n\n\n\n\nprivate function processFileHandles($callback, $closeEmptyHandles = false)\n{\n$fh = $this->fileHandles;\nforeach ($fh as $type => $fileHandle) {\nfseek($fileHandle, $this->readBytes[$type]);\n$data = fread($fileHandle, 8192);\nif (strlen($data) > 0) {\n$this->readBytes[$type] += strlen($data);\ncall_user_func($callback, $type == 1 ? self::OUT : self::ERR, $data);\n}\nif (false === $data || ($closeEmptyHandles && '' === $data && feof($fileHandle))) {\nfclose($fileHandle);\nunset($this->fileHandles[$type]);\n}\n}\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Process;\n\nuse Symfony\\Component\\Process\\Exception\\InvalidArgumentException;\nuse Symfony\\Component\\Process\\Exception\\LogicException;\n\n\n\n\n\n\nclass ProcessBuilder\n{\nprivate $arguments;\nprivate $cwd;\nprivate $env;\nprivate $stdin;\nprivate $timeout;\nprivate $options;\nprivate $inheritEnv;\nprivate $prefix;\n\npublic function __construct(array $arguments = array())\n{\n$this->arguments = $arguments;\n\n$this->timeout = 60;\n$this->options = array();\n$this->env = array();\n$this->inheritEnv = true;\n}\n\npublic static function create(array $arguments = array())\n{\nreturn new static($arguments);\n}\n\n\n\n\n\n\n\n\npublic function add($argument)\n{\n$this->arguments[] = $argument;\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\n\n\npublic function setPrefix($prefix)\n{\n$this->prefix = $prefix;\n\nreturn $this;\n}\n\n\n\n\n\n\npublic function setArguments(array $arguments)\n{\n$this->arguments = $arguments;\n\nreturn $this;\n}\n\npublic function setWorkingDirectory($cwd)\n{\n$this->cwd = $cwd;\n\nreturn $this;\n}\n\npublic function inheritEnvironmentVariables($inheritEnv = true)\n{\n$this->inheritEnv = $inheritEnv;\n\nreturn $this;\n}\n\npublic function setEnv($name, $value)\n{\n$this->env[$name] = $value;\n\nreturn $this;\n}\n\npublic function setInput($stdin)\n{\n$this->stdin = $stdin;\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\n\n\n\n\npublic function setTimeout($timeout)\n{\nif (null === $timeout) {\n$this->timeout = null;\n\nreturn $this;\n}\n\n$timeout = (float) $timeout;\n\nif ($timeout < 0) {\nthrow new InvalidArgumentException('The timeout value must be a valid positive integer or float number.');\n}\n\n$this->timeout = $timeout;\n\nreturn $this;\n}\n\npublic function setOption($name, $value)\n{\n$this->options[$name] = $value;\n\nreturn $this;\n}\n\npublic function getProcess()\n{\nif (!$this->prefix && !count($this->arguments)) {\nthrow new LogicException('You must add() command arguments before calling getProcess().');\n}\n\n$options = $this->options;\n\n$arguments = $this->prefix ? array_merge(array($this->prefix), $this->arguments) : $this->arguments;\n$script = implode(' ', array_map(array(__NAMESPACE__.'\\\\ProcessUtils', 'escapeArgument'), $arguments));\n\nif ($this->inheritEnv) {\n$env = $this->env ? $this->env + $_ENV : null;\n} else {\n$env = $this->env;\n}\n\nreturn new Process($script, $this->cwd, $env, $this->stdin, $this->timeout, $options);\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Process;\n\n\n\n\n\n\n\n\nclass ProcessUtils\n{\n\n\n\nprivate function __construct()\n{\n}\n\n\n\n\n\n\n\n\npublic static function escapeArgument($argument)\n{\n\n \n \n \n if (defined('PHP_WINDOWS_VERSION_BUILD')) {\n$escapedArgument = '';\nforeach(preg_split('/([%\"])/i', $argument, -1, PREG_SPLIT_NO_EMPTY | PREG_SPLIT_DELIM_CAPTURE) as $part) {\nif ('\"' == $part) {\n$escapedArgument .= '\\\\\"';\n} elseif ('%' == $part) {\n$escapedArgument .= '^%';\n} else {\n$escapedArgument .= escapeshellarg($part);\n}\n}\n\nreturn $escapedArgument;\n}\n\nreturn escapeshellarg($argument);\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Process\\Exception;\n\n\n\n\n\n\ninterface ExceptionInterface\n{\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Process\\Exception;\n\n\n\n\n\n\nclass RuntimeException extends \\RuntimeException implements ExceptionInterface\n{\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Process\\Exception;\n\n\n\n\n\n\nclass LogicException extends \\LogicException implements ExceptionInterface\n{\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Process\\Exception;\n\nuse Symfony\\Component\\Process\\Process;\n\n\n\n\n\n\nclass ProcessFailedException extends RuntimeException\n{\nprivate $process;\n\npublic function __construct(Process $process)\n{\nif ($process->isSuccessful()) {\nthrow new InvalidArgumentException('Expected a failed process, but the given process was successful.');\n}\n\nparent::__construct(\nsprintf(\n'The command \"%s\" failed.'.\"\\nExit Code: %s(%s)\\n\\nOutput:\\n================\\n%s\\n\\nError Output:\\n================\\n%s\",\n$process->getCommandLine(),\n$process->getExitCode(),\n$process->getExitCodeText(),\n$process->getOutput(),\n$process->getErrorOutput()\n)\n);\n\n$this->process = $process;\n}\n\npublic function getProcess()\n{\nreturn $this->process;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Process\\Exception;\n\n\n\n\n\n\nclass InvalidArgumentException extends \\InvalidArgumentException implements ExceptionInterface\n{\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Process;\n\n\n\n\n\n\n\nclass PhpExecutableFinder\n{\nprivate $executableFinder;\n\npublic function __construct()\n{\n$this->executableFinder = new ExecutableFinder();\n}\n\n\n\n\n\n\npublic function find()\n{\n\n if (defined('PHP_BINARY') && PHP_BINARY && ('cli' === PHP_SAPI)) {\nreturn PHP_BINARY;\n}\n\nif ($php = getenv('PHP_PATH')) {\nif (!is_executable($php)) {\nreturn false;\n}\n\nreturn $php;\n}\n\nif ($php = getenv('PHP_PEAR_PHP_BIN')) {\nif (is_executable($php)) {\nreturn $php;\n}\n}\n\n$dirs = array(PHP_BINDIR);\nif (defined('PHP_WINDOWS_VERSION_BUILD')) {\n$dirs[] = 'C:\\xampp\\php\\\\';\n}\n\nreturn $this->executableFinder->find('php', false, $dirs);\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Console\\Command;\n\nuse Symfony\\Component\\Console\\Helper\\DescriptorHelper;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n\n\n\n\n\nclass HelpCommand extends Command\n{\nprivate $command;\n\n\n\n\nprotected function configure()\n{\n$this->ignoreValidationErrors();\n\n$this\n->setName('help')\n->setDefinition(array(\nnew InputArgument('command_name', InputArgument::OPTIONAL, 'The command name', 'help'),\nnew InputOption('xml', null, InputOption::VALUE_NONE, 'To output help as XML'),\nnew InputOption('format', null, InputOption::VALUE_REQUIRED, 'To output help in other formats'),\nnew InputOption('raw', null, InputOption::VALUE_NONE, 'To output raw command help'),\n))\n->setDescription('Displays help for a command')\n->setHelp(<<<EOF\nThe <info>%command.name%</info> command displays help for a given command:\n\n  <info>php %command.full_name% list</info>\n\nYou can also output the help in other formats by using the <comment>--format</comment> option:\n\n  <info>php %command.full_name% --format=xml list</info>\n\nTo display the list of available commands, please use the <info>list</info> command.\nEOF\n)\n;\n}\n\n\n\n\n\n\npublic function setCommand(Command $command)\n{\n$this->command = $command;\n}\n\n\n\n\nprotected function execute(InputInterface $input, OutputInterface $output)\n{\nif (null === $this->command) {\n$this->command = $this->getApplication()->find($input->getArgument('command_name'));\n}\n\nif ($input->getOption('xml')) {\n$input->setOption('format', 'xml');\n}\n\n$helper = new DescriptorHelper();\n$helper->describe($output, $this->command, $input->getOption('format'), $input->getOption('raw'));\n$this->command = null;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Console\\Command;\n\nuse Symfony\\Component\\Console\\Descriptor\\TextDescriptor;\nuse Symfony\\Component\\Console\\Descriptor\\XmlDescriptor;\nuse Symfony\\Component\\Console\\Input\\InputDefinition;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Helper\\HelperSet;\n\n\n\n\n\n\n\n\nclass Command\n{\nprivate $application;\nprivate $name;\nprivate $aliases;\nprivate $definition;\nprivate $help;\nprivate $description;\nprivate $ignoreValidationErrors;\nprivate $applicationDefinitionMerged;\nprivate $applicationDefinitionMergedWithArgs;\nprivate $code;\nprivate $synopsis;\nprivate $helperSet;\n\n\n\n\n\n\n\n\n\n\npublic function __construct($name = null)\n{\n$this->definition = new InputDefinition();\n$this->ignoreValidationErrors = false;\n$this->applicationDefinitionMerged = false;\n$this->applicationDefinitionMergedWithArgs = false;\n$this->aliases = array();\n\nif (null !== $name) {\n$this->setName($name);\n}\n\n$this->configure();\n\nif (!$this->name) {\nthrow new \\LogicException('The command name cannot be empty.');\n}\n}\n\n\n\n\n\n\npublic function ignoreValidationErrors()\n{\n$this->ignoreValidationErrors = true;\n}\n\n\n\n\n\n\n\n\npublic function setApplication(Application $application = null)\n{\n$this->application = $application;\nif ($application) {\n$this->setHelperSet($application->getHelperSet());\n} else {\n$this->helperSet = null;\n}\n}\n\n\n\n\n\n\npublic function setHelperSet(HelperSet $helperSet)\n{\n$this->helperSet = $helperSet;\n}\n\n\n\n\n\n\npublic function getHelperSet()\n{\nreturn $this->helperSet;\n}\n\n\n\n\n\n\n\n\npublic function getApplication()\n{\nreturn $this->application;\n}\n\n\n\n\n\n\n\n\n\npublic function isEnabled()\n{\nreturn true;\n}\n\n\n\n\nprotected function configure()\n{\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nprotected function execute(InputInterface $input, OutputInterface $output)\n{\nthrow new \\LogicException('You must override the execute() method in the concrete command class.');\n}\n\n\n\n\n\n\n\nprotected function interact(InputInterface $input, OutputInterface $output)\n{\n}\n\n\n\n\n\n\n\n\n\n\nprotected function initialize(InputInterface $input, OutputInterface $output)\n{\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npublic function run(InputInterface $input, OutputInterface $output)\n{\n\n $this->getSynopsis();\n\n\n $this->mergeApplicationDefinition();\n\n\n try {\n$input->bind($this->definition);\n} catch (\\Exception $e) {\nif (!$this->ignoreValidationErrors) {\nthrow $e;\n}\n}\n\n$this->initialize($input, $output);\n\nif ($input->isInteractive()) {\n$this->interact($input, $output);\n}\n\n$input->validate();\n\nif ($this->code) {\n$statusCode = call_user_func($this->code, $input, $output);\n} else {\n$statusCode = $this->execute($input, $output);\n}\n\nreturn is_numeric($statusCode) ? $statusCode : 0;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npublic function setCode($code)\n{\nif (!is_callable($code)) {\nthrow new \\InvalidArgumentException('Invalid callable provided to Command::setCode.');\n}\n\n$this->code = $code;\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\npublic function mergeApplicationDefinition($mergeArgs = true)\n{\nif (null === $this->application || (true === $this->applicationDefinitionMerged && ($this->applicationDefinitionMergedWithArgs || !$mergeArgs))) {\nreturn;\n}\n\nif ($mergeArgs) {\n$currentArguments = $this->definition->getArguments();\n$this->definition->setArguments($this->application->getDefinition()->getArguments());\n$this->definition->addArguments($currentArguments);\n}\n\n$this->definition->addOptions($this->application->getDefinition()->getOptions());\n\n$this->applicationDefinitionMerged = true;\nif ($mergeArgs) {\n$this->applicationDefinitionMergedWithArgs = true;\n}\n}\n\n\n\n\n\n\n\n\n\n\npublic function setDefinition($definition)\n{\nif ($definition instanceof InputDefinition) {\n$this->definition = $definition;\n} else {\n$this->definition->setDefinition($definition);\n}\n\n$this->applicationDefinitionMerged = false;\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\npublic function getDefinition()\n{\nreturn $this->definition;\n}\n\n\n\n\n\n\n\n\n\n\n\npublic function getNativeDefinition()\n{\nreturn $this->getDefinition();\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\npublic function addArgument($name, $mode = null, $description = '', $default = null)\n{\n$this->definition->addArgument(new InputArgument($name, $mode, $description, $default));\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npublic function addOption($name, $shortcut = null, $mode = null, $description = '', $default = null)\n{\n$this->definition->addOption(new InputOption($name, $shortcut, $mode, $description, $default));\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npublic function setName($name)\n{\n$this->validateName($name);\n\n$this->name = $name;\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\npublic function getName()\n{\nreturn $this->name;\n}\n\n\n\n\n\n\n\n\n\n\npublic function setDescription($description)\n{\n$this->description = $description;\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\npublic function getDescription()\n{\nreturn $this->description;\n}\n\n\n\n\n\n\n\n\n\n\npublic function setHelp($help)\n{\n$this->help = $help;\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\npublic function getHelp()\n{\nreturn $this->help;\n}\n\n\n\n\n\n\n\npublic function getProcessedHelp()\n{\n$name = $this->name;\n\n$placeholders = array(\n'%command.name%',\n'%command.full_name%'\n);\n$replacements = array(\n$name,\n$_SERVER['PHP_SELF'].' '.$name\n);\n\nreturn str_replace($placeholders, $replacements, $this->getHelp());\n}\n\n\n\n\n\n\n\n\n\n\npublic function setAliases($aliases)\n{\nforeach ($aliases as $alias) {\n$this->validateName($alias);\n}\n\n$this->aliases = $aliases;\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\npublic function getAliases()\n{\nreturn $this->aliases;\n}\n\n\n\n\n\n\npublic function getSynopsis()\n{\nif (null === $this->synopsis) {\n$this->synopsis = trim(sprintf('%s %s', $this->name, $this->definition->getSynopsis()));\n}\n\nreturn $this->synopsis;\n}\n\n\n\n\n\n\n\n\n\n\n\n\npublic function getHelper($name)\n{\nreturn $this->helperSet->get($name);\n}\n\n\n\n\n\n\n\n\npublic function asText()\n{\n$descriptor = new TextDescriptor();\n\nreturn $descriptor->describe($this);\n}\n\n\n\n\n\n\n\n\n\n\npublic function asXml($asDom = false)\n{\n$descriptor = new XmlDescriptor();\n\nreturn $descriptor->describe($this, array('as_dom' => $asDom));\n}\n\nprivate function validateName($name)\n{\nif (!preg_match('/^[^\\:]+(\\:[^\\:]+)*$/', $name)) {\nthrow new \\InvalidArgumentException(sprintf('Command name \"%s\" is invalid.', $name));\n}\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Console\\Command;\n\nuse Symfony\\Component\\Console\\Helper\\DescriptorHelper;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\Console\\Input\\InputDefinition;\n\n\n\n\n\n\nclass ListCommand extends Command\n{\n\n\n\nprotected function configure()\n{\n$this\n->setName('list')\n->setDefinition($this->createDefinition())\n->setDescription('Lists commands')\n->setHelp(<<<EOF\nThe <info>%command.name%</info> command lists all commands:\n\n  <info>php %command.full_name%</info>\n\nYou can also display the commands for a specific namespace:\n\n  <info>php %command.full_name% test</info>\n\nYou can also output the information in other formats by using the <comment>--format</comment> option:\n\n  <info>php %command.full_name% --format=xml</info>\n\nIt's also possible to get raw list of commands (useful for embedding command runner):\n\n  <info>php %command.full_name% --raw</info>\nEOF\n)\n;\n}\n\n\n\n\npublic function getNativeDefinition()\n{\nreturn $this->createDefinition();\n}\n\n\n\n\nprotected function execute(InputInterface $input, OutputInterface $output)\n{\nif ($input->getOption('xml')) {\n$input->setOption('format', 'xml');\n}\n\n$helper = new DescriptorHelper();\n$helper->describe($output, $this->getApplication(), $input->getOption('format'), $input->getOption('raw'));\n}\n\n\n\n\nprivate function createDefinition()\n{\nreturn new InputDefinition(array(\nnew InputArgument('namespace', InputArgument::OPTIONAL, 'The namespace name'),\nnew InputOption('xml', null, InputOption::VALUE_NONE, 'To output list as XML'),\nnew InputOption('raw', null, InputOption::VALUE_NONE, 'To output raw command list'),\nnew InputOption('format', null, InputOption::VALUE_REQUIRED, 'To output list in other formats'),\n));\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Console\\Tester;\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Input\\ArrayInput;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\Console\\Output\\StreamOutput;\n\n\n\n\n\n\n\n\n\n\n\nclass ApplicationTester\n{\nprivate $application;\nprivate $input;\nprivate $output;\n\n\n\n\n\n\npublic function __construct(Application $application)\n{\n$this->application = $application;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npublic function run(array $input, $options = array())\n{\n$this->input = new ArrayInput($input);\nif (isset($options['interactive'])) {\n$this->input->setInteractive($options['interactive']);\n}\n\n$this->output = new StreamOutput(fopen('php://memory', 'w', false));\nif (isset($options['decorated'])) {\n$this->output->setDecorated($options['decorated']);\n}\nif (isset($options['verbosity'])) {\n$this->output->setVerbosity($options['verbosity']);\n}\n\nreturn $this->application->run($this->input, $this->output);\n}\n\n\n\n\n\n\n\n\npublic function getDisplay($normalize = false)\n{\nrewind($this->output->getStream());\n\n$display = stream_get_contents($this->output->getStream());\n\nif ($normalize) {\n$display = str_replace(PHP_EOL, \"\\n\", $display);\n}\n\nreturn $display;\n}\n\n\n\n\n\n\npublic function getInput()\n{\nreturn $this->input;\n}\n\n\n\n\n\n\npublic function getOutput()\n{\nreturn $this->output;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Console\\Tester;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\ArrayInput;\nuse Symfony\\Component\\Console\\Output\\StreamOutput;\n\n\n\n\n\n\nclass CommandTester\n{\nprivate $command;\nprivate $input;\nprivate $output;\n\n\n\n\n\n\npublic function __construct(Command $command)\n{\n$this->command = $command;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npublic function execute(array $input, array $options = array())\n{\n$this->input = new ArrayInput($input);\nif (isset($options['interactive'])) {\n$this->input->setInteractive($options['interactive']);\n}\n\n$this->output = new StreamOutput(fopen('php://memory', 'w', false));\nif (isset($options['decorated'])) {\n$this->output->setDecorated($options['decorated']);\n}\nif (isset($options['verbosity'])) {\n$this->output->setVerbosity($options['verbosity']);\n}\n\nreturn $this->command->run($this->input, $this->output);\n}\n\n\n\n\n\n\n\n\npublic function getDisplay($normalize = false)\n{\nrewind($this->output->getStream());\n\n$display = stream_get_contents($this->output->getStream());\n\nif ($normalize) {\n$display = str_replace(PHP_EOL, \"\\n\", $display);\n}\n\nreturn $display;\n}\n\n\n\n\n\n\npublic function getInput()\n{\nreturn $this->input;\n}\n\n\n\n\n\n\npublic function getOutput()\n{\nreturn $this->output;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Console\\Formatter;\n\n\n\n\nclass OutputFormatterStyleStack\n{\n\n\n\nprivate $styles;\n\n\n\n\nprivate $emptyStyle;\n\n\n\n\n\n\npublic function __construct(OutputFormatterStyleInterface $emptyStyle = null)\n{\n$this->emptyStyle = $emptyStyle ?: new OutputFormatterStyle();\n$this->reset();\n}\n\n\n\n\npublic function reset()\n{\n$this->styles = array();\n}\n\n\n\n\n\n\npublic function push(OutputFormatterStyleInterface $style)\n{\n$this->styles[] = $style;\n}\n\n\n\n\n\n\n\n\n\n\npublic function pop(OutputFormatterStyleInterface $style = null)\n{\nif (empty($this->styles)) {\nreturn $this->emptyStyle;\n}\n\nif (null === $style) {\nreturn array_pop($this->styles);\n}\n\nforeach (array_reverse($this->styles, true) as $index => $stackedStyle) {\nif ($style->apply('') === $stackedStyle->apply('')) {\n$this->styles = array_slice($this->styles, 0, $index);\n\nreturn $stackedStyle;\n}\n}\n\nthrow new \\InvalidArgumentException('Incorrectly nested style tag found.');\n}\n\n\n\n\n\n\npublic function getCurrent()\n{\nif (empty($this->styles)) {\nreturn $this->emptyStyle;\n}\n\nreturn $this->styles[count($this->styles)-1];\n}\n\n\n\n\n\n\npublic function setEmptyStyle(OutputFormatterStyleInterface $emptyStyle)\n{\n$this->emptyStyle = $emptyStyle;\n\nreturn $this;\n}\n\n\n\n\npublic function getEmptyStyle()\n{\nreturn $this->emptyStyle;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Console\\Formatter;\n\n\n\n\n\n\n\n\nclass OutputFormatterStyle implements OutputFormatterStyleInterface\n{\nprivate static $availableForegroundColors = array(\n'black' => 30,\n'red' => 31,\n'green' => 32,\n'yellow' => 33,\n'blue' => 34,\n'magenta' => 35,\n'cyan' => 36,\n'white' => 37\n);\nprivate static $availableBackgroundColors = array(\n'black' => 40,\n'red' => 41,\n'green' => 42,\n'yellow' => 43,\n'blue' => 44,\n'magenta' => 45,\n'cyan' => 46,\n'white' => 47\n);\nprivate static $availableOptions = array(\n'bold' => 1,\n'underscore' => 4,\n'blink' => 5,\n'reverse' => 7,\n'conceal' => 8\n);\n\nprivate $foreground;\nprivate $background;\nprivate $options = array();\n\n\n\n\n\n\n\n\n\n\npublic function __construct($foreground = null, $background = null, array $options = array())\n{\nif (null !== $foreground) {\n$this->setForeground($foreground);\n}\nif (null !== $background) {\n$this->setBackground($background);\n}\nif (count($options)) {\n$this->setOptions($options);\n}\n}\n\n\n\n\n\n\n\n\n\n\npublic function setForeground($color = null)\n{\nif (null === $color) {\n$this->foreground = null;\n\nreturn;\n}\n\nif (!isset(static::$availableForegroundColors[$color])) {\nthrow new \\InvalidArgumentException(sprintf(\n'Invalid foreground color specified: \"%s\". Expected one of (%s)',\n$color,\nimplode(', ', array_keys(static::$availableForegroundColors))\n));\n}\n\n$this->foreground = static::$availableForegroundColors[$color];\n}\n\n\n\n\n\n\n\n\n\n\npublic function setBackground($color = null)\n{\nif (null === $color) {\n$this->background = null;\n\nreturn;\n}\n\nif (!isset(static::$availableBackgroundColors[$color])) {\nthrow new \\InvalidArgumentException(sprintf(\n'Invalid background color specified: \"%s\". Expected one of (%s)',\n$color,\nimplode(', ', array_keys(static::$availableBackgroundColors))\n));\n}\n\n$this->background = static::$availableBackgroundColors[$color];\n}\n\n\n\n\n\n\n\n\n\n\npublic function setOption($option)\n{\nif (!isset(static::$availableOptions[$option])) {\nthrow new \\InvalidArgumentException(sprintf(\n'Invalid option specified: \"%s\". Expected one of (%s)',\n$option,\nimplode(', ', array_keys(static::$availableOptions))\n));\n}\n\nif (false === array_search(static::$availableOptions[$option], $this->options)) {\n$this->options[] = static::$availableOptions[$option];\n}\n}\n\n\n\n\n\n\n\n\n\npublic function unsetOption($option)\n{\nif (!isset(static::$availableOptions[$option])) {\nthrow new \\InvalidArgumentException(sprintf(\n'Invalid option specified: \"%s\". Expected one of (%s)',\n$option,\nimplode(', ', array_keys(static::$availableOptions))\n));\n}\n\n$pos = array_search(static::$availableOptions[$option], $this->options);\nif (false !== $pos) {\nunset($this->options[$pos]);\n}\n}\n\n\n\n\n\n\npublic function setOptions(array $options)\n{\n$this->options = array();\n\nforeach ($options as $option) {\n$this->setOption($option);\n}\n}\n\n\n\n\n\n\n\n\npublic function apply($text)\n{\n$codes = array();\n\nif (null !== $this->foreground) {\n$codes[] = $this->foreground;\n}\nif (null !== $this->background) {\n$codes[] = $this->background;\n}\nif (count($this->options)) {\n$codes = array_merge($codes, $this->options);\n}\n\nif (0 === count($codes)) {\nreturn $text;\n}\n\nreturn sprintf(\"\\033[%sm%s\\033[0m\", implode(';', $codes), $text);\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Console\\Formatter;\n\n\n\n\n\n\n\n\ninterface OutputFormatterStyleInterface\n{\n\n\n\n\n\n\n\npublic function setForeground($color = null);\n\n\n\n\n\n\n\n\npublic function setBackground($color = null);\n\n\n\n\n\n\n\n\npublic function setOption($option);\n\n\n\n\n\n\npublic function unsetOption($option);\n\n\n\n\n\n\npublic function setOptions(array $options);\n\n\n\n\n\n\n\n\npublic function apply($text);\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Console\\Formatter;\n\n\n\n\n\n\n\n\nclass OutputFormatter implements OutputFormatterInterface\n{\n\n\n\nconst FORMAT_PATTERN = '#(\\\\\\\\?)<(/?)([a-z][a-z0-9_=;-]+)?>((?: [^<\\\\\\\\]+ | (?!<(?:/?[a-z]|/>)). | .(?<=\\\\\\\\<) )*)#isx';\n\nprivate $decorated;\nprivate $styles = array();\nprivate $styleStack;\n\n\n\n\n\n\n\n\npublic static function escape($text)\n{\nreturn preg_replace('/([^\\\\\\\\]?)</is', '$1\\\\<', $text);\n}\n\n\n\n\n\n\n\n\n\npublic function __construct($decorated = null, array $styles = array())\n{\n$this->decorated = (Boolean) $decorated;\n\n$this->setStyle('error', new OutputFormatterStyle('white', 'red'));\n$this->setStyle('info', new OutputFormatterStyle('green'));\n$this->setStyle('comment', new OutputFormatterStyle('yellow'));\n$this->setStyle('question', new OutputFormatterStyle('black', 'cyan'));\n\nforeach ($styles as $name => $style) {\n$this->setStyle($name, $style);\n}\n\n$this->styleStack = new OutputFormatterStyleStack();\n}\n\n\n\n\n\n\n\n\npublic function setDecorated($decorated)\n{\n$this->decorated = (Boolean) $decorated;\n}\n\n\n\n\n\n\n\n\npublic function isDecorated()\n{\nreturn $this->decorated;\n}\n\n\n\n\n\n\n\n\n\npublic function setStyle($name, OutputFormatterStyleInterface $style)\n{\n$this->styles[strtolower($name)] = $style;\n}\n\n\n\n\n\n\n\n\n\n\npublic function hasStyle($name)\n{\nreturn isset($this->styles[strtolower($name)]);\n}\n\n\n\n\n\n\n\n\n\n\n\n\npublic function getStyle($name)\n{\nif (!$this->hasStyle($name)) {\nthrow new \\InvalidArgumentException(sprintf('Undefined style: %s', $name));\n}\n\nreturn $this->styles[strtolower($name)];\n}\n\n\n\n\n\n\n\n\n\n\npublic function format($message)\n{\n$message = preg_replace_callback(self::FORMAT_PATTERN, array($this, 'replaceStyle'), $message);\n\nreturn str_replace('\\\\<', '<', $message);\n}\n\n\n\n\npublic function getStyleStack()\n{\nreturn $this->styleStack;\n}\n\n\n\n\n\n\n\n\nprivate function replaceStyle($match)\n{\n\n if ('\\\\' === $match[1]) {\nreturn $this->applyCurrentStyle($match[0]);\n}\n\nif ('' === $match[3]) {\nif ('/' === $match[2]) {\n\n $this->styleStack->pop();\n\nreturn $this->applyCurrentStyle($match[4]);\n}\n\n\n return '<>'.$this->applyCurrentStyle($match[4]);\n}\n\nif (isset($this->styles[strtolower($match[3])])) {\n$style = $this->styles[strtolower($match[3])];\n} else {\n$style = $this->createStyleFromString($match[3]);\n\nif (false === $style) {\nreturn $this->applyCurrentStyle($match[0]);\n}\n}\n\nif ('/' === $match[2]) {\n$this->styleStack->pop($style);\n} else {\n$this->styleStack->push($style);\n}\n\nreturn $this->applyCurrentStyle($match[4]);\n}\n\n\n\n\n\n\n\n\nprivate function createStyleFromString($string)\n{\nif (!preg_match_all('/([^=]+)=([^;]+)(;|$)/', strtolower($string), $matches, PREG_SET_ORDER)) {\nreturn false;\n}\n\n$style = new OutputFormatterStyle();\nforeach ($matches as $match) {\narray_shift($match);\n\nif ('fg' == $match[0]) {\n$style->setForeground($match[1]);\n} elseif ('bg' == $match[0]) {\n$style->setBackground($match[1]);\n} else {\n$style->setOption($match[1]);\n}\n}\n\nreturn $style;\n}\n\n\n\n\n\n\n\n\nprivate function applyCurrentStyle($text)\n{\nreturn $this->isDecorated() && strlen($text) > 0 ? $this->styleStack->getCurrent()->apply($text) : $text;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Console\\Formatter;\n\n\n\n\n\n\n\n\ninterface OutputFormatterInterface\n{\n\n\n\n\n\n\n\npublic function setDecorated($decorated);\n\n\n\n\n\n\n\n\npublic function isDecorated();\n\n\n\n\n\n\n\n\n\npublic function setStyle($name, OutputFormatterStyleInterface $style);\n\n\n\n\n\n\n\n\n\n\npublic function hasStyle($name);\n\n\n\n\n\n\n\n\n\n\npublic function getStyle($name);\n\n\n\n\n\n\n\n\n\n\npublic function format($message);\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Console;\n\nuse Symfony\\Component\\Console\\Descriptor\\TextDescriptor;\nuse Symfony\\Component\\Console\\Descriptor\\XmlDescriptor;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Input\\ArgvInput;\nuse Symfony\\Component\\Console\\Input\\ArrayInput;\nuse Symfony\\Component\\Console\\Input\\InputDefinition;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\Console\\Output\\ConsoleOutput;\nuse Symfony\\Component\\Console\\Output\\ConsoleOutputInterface;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Command\\HelpCommand;\nuse Symfony\\Component\\Console\\Command\\ListCommand;\nuse Symfony\\Component\\Console\\Helper\\HelperSet;\nuse Symfony\\Component\\Console\\Helper\\FormatterHelper;\nuse Symfony\\Component\\Console\\Helper\\DialogHelper;\nuse Symfony\\Component\\Console\\Helper\\ProgressHelper;\nuse Symfony\\Component\\Console\\Helper\\TableHelper;\nuse Symfony\\Component\\Console\\Event\\ConsoleCommandEvent;\nuse Symfony\\Component\\Console\\Event\\ConsoleForExceptionEvent;\nuse Symfony\\Component\\Console\\Event\\ConsoleTerminateEvent;\nuse Symfony\\Component\\EventDispatcher\\EventDispatcher;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass Application\n{\nprivate $commands;\nprivate $wantHelps = false;\nprivate $runningCommand;\nprivate $name;\nprivate $version;\nprivate $catchExceptions;\nprivate $autoExit;\nprivate $definition;\nprivate $helperSet;\nprivate $dispatcher;\n\n\n\n\n\n\n\n\n\npublic function __construct($name = 'UNKNOWN', $version = 'UNKNOWN')\n{\n$this->name = $name;\n$this->version = $version;\n$this->catchExceptions = true;\n$this->autoExit = true;\n$this->commands = array();\n$this->helperSet = $this->getDefaultHelperSet();\n$this->definition = $this->getDefaultInputDefinition();\n\nforeach ($this->getDefaultCommands() as $command) {\n$this->add($command);\n}\n}\n\npublic function setDispatcher(EventDispatcher $dispatcher)\n{\n$this->dispatcher = $dispatcher;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\npublic function run(InputInterface $input = null, OutputInterface $output = null)\n{\nif (null === $input) {\n$input = new ArgvInput();\n}\n\nif (null === $output) {\n$output = new ConsoleOutput();\n}\n\ntry {\n$exitCode = $this->doRun($input, $output);\n} catch (\\Exception $e) {\nif (!$this->catchExceptions) {\nthrow $e;\n}\n\nif ($output instanceof ConsoleOutputInterface) {\n$this->renderException($e, $output->getErrorOutput());\n} else {\n$this->renderException($e, $output);\n}\n$exitCode = $e->getCode();\n\n$exitCode = is_numeric($exitCode) && $exitCode ? $exitCode : 1;\n}\n\nif ($this->autoExit) {\nif ($exitCode > 255) {\n$exitCode = 255;\n}\n\n exit($exitCode);\n\n }\n\nreturn $exitCode;\n}\n\n\n\n\n\n\n\n\n\npublic function doRun(InputInterface $input, OutputInterface $output)\n{\n$name = $this->getCommandName($input);\n\nif (true === $input->hasParameterOption(array('--ansi'))) {\n$output->setDecorated(true);\n} elseif (true === $input->hasParameterOption(array('--no-ansi'))) {\n$output->setDecorated(false);\n}\n\nif (true === $input->hasParameterOption(array('--help', '-h'))) {\nif (!$name) {\n$name = 'help';\n$input = new ArrayInput(array('command' => 'help'));\n} else {\n$this->wantHelps = true;\n}\n}\n\nif (true === $input->hasParameterOption(array('--no-interaction', '-n'))) {\n$input->setInteractive(false);\n}\n\nif (function_exists('posix_isatty') && $this->getHelperSet()->has('dialog')) {\n$inputStream = $this->getHelperSet()->get('dialog')->getInputStream();\nif (!posix_isatty($inputStream)) {\n$input->setInteractive(false);\n}\n}\n\nif (true === $input->hasParameterOption(array('--quiet', '-q'))) {\n$output->setVerbosity(OutputInterface::VERBOSITY_QUIET);\n} else {\nif ($input->hasParameterOption('-vvv') || $input->hasParameterOption('--verbose=3') || $input->getParameterOption('--verbose') === 3) {\n$output->setVerbosity(OutputInterface::VERBOSITY_DEBUG);\n} elseif ($input->hasParameterOption('-vv') || $input->hasParameterOption('--verbose=2') || $input->getParameterOption('--verbose') === 2) {\n$output->setVerbosity(OutputInterface::VERBOSITY_VERY_VERBOSE);\n} elseif ($input->hasParameterOption('-v') || $input->hasParameterOption('--verbose=1') || $input->hasParameterOption('--verbose') || $input->getParameterOption('--verbose')) {\n$output->setVerbosity(OutputInterface::VERBOSITY_VERBOSE);\n}\n}\n\nif (true === $input->hasParameterOption(array('--version', '-V'))) {\n$output->writeln($this->getLongVersion());\n\nreturn 0;\n}\n\nif (!$name) {\n$name = 'list';\n$input = new ArrayInput(array('command' => 'list'));\n}\n\n\n $command = $this->find($name);\n\n$this->runningCommand = $command;\n$exitCode = $this->doRunCommand($command, $input, $output);\n$this->runningCommand = null;\n\nreturn is_numeric($exitCode) ? $exitCode : 0;\n}\n\n\n\n\n\n\n\n\npublic function setHelperSet(HelperSet $helperSet)\n{\n$this->helperSet = $helperSet;\n}\n\n\n\n\n\n\n\n\npublic function getHelperSet()\n{\nreturn $this->helperSet;\n}\n\n\n\n\n\n\n\n\npublic function setDefinition(InputDefinition $definition)\n{\n$this->definition = $definition;\n}\n\n\n\n\n\n\npublic function getDefinition()\n{\nreturn $this->definition;\n}\n\n\n\n\n\n\npublic function getHelp()\n{\n$messages = array(\n$this->getLongVersion(),\n'',\n'<comment>Usage:</comment>',\n'  [options] command [arguments]',\n'',\n'<comment>Options:</comment>',\n);\n\nforeach ($this->getDefinition()->getOptions() as $option) {\n$messages[] = sprintf('  %-29s %s %s',\n'<info>--'.$option->getName().'</info>',\n$option->getShortcut() ? '<info>-'.$option->getShortcut().'</info>' : '  ',\n$option->getDescription()\n);\n}\n\nreturn implode(PHP_EOL, $messages);\n}\n\n\n\n\n\n\n\n\npublic function setCatchExceptions($boolean)\n{\n$this->catchExceptions = (Boolean) $boolean;\n}\n\n\n\n\n\n\n\n\npublic function setAutoExit($boolean)\n{\n$this->autoExit = (Boolean) $boolean;\n}\n\n\n\n\n\n\n\n\npublic function getName()\n{\nreturn $this->name;\n}\n\n\n\n\n\n\n\n\npublic function setName($name)\n{\n$this->name = $name;\n}\n\n\n\n\n\n\n\n\npublic function getVersion()\n{\nreturn $this->version;\n}\n\n\n\n\n\n\n\n\npublic function setVersion($version)\n{\n$this->version = $version;\n}\n\n\n\n\n\n\n\n\npublic function getLongVersion()\n{\nif ('UNKNOWN' !== $this->getName() && 'UNKNOWN' !== $this->getVersion()) {\nreturn sprintf('<info>%s</info> version <comment>%s</comment>', $this->getName(), $this->getVersion());\n}\n\nreturn '<info>Console Tool</info>';\n}\n\n\n\n\n\n\n\n\n\n\npublic function register($name)\n{\nreturn $this->add(new Command($name));\n}\n\n\n\n\n\n\n\n\npublic function addCommands(array $commands)\n{\nforeach ($commands as $command) {\n$this->add($command);\n}\n}\n\n\n\n\n\n\n\n\n\n\n\n\npublic function add(Command $command)\n{\n$command->setApplication($this);\n\nif (!$command->isEnabled()) {\n$command->setApplication(null);\n\nreturn;\n}\n\n$this->commands[$command->getName()] = $command;\n\nforeach ($command->getAliases() as $alias) {\n$this->commands[$alias] = $command;\n}\n\nreturn $command;\n}\n\n\n\n\n\n\n\n\n\n\n\n\npublic function get($name)\n{\nif (!isset($this->commands[$name])) {\nthrow new \\InvalidArgumentException(sprintf('The command \"%s\" does not exist.', $name));\n}\n\n$command = $this->commands[$name];\n\nif ($this->wantHelps) {\n$this->wantHelps = false;\n\n$helpCommand = $this->get('help');\n$helpCommand->setCommand($command);\n\nreturn $helpCommand;\n}\n\nreturn $command;\n}\n\n\n\n\n\n\n\n\n\n\npublic function has($name)\n{\nreturn isset($this->commands[$name]);\n}\n\n\n\n\n\n\n\n\npublic function getNamespaces()\n{\n$namespaces = array();\nforeach ($this->commands as $command) {\n$namespaces[] = $this->extractNamespace($command->getName());\n\nforeach ($command->getAliases() as $alias) {\n$namespaces[] = $this->extractNamespace($alias);\n}\n}\n\nreturn array_values(array_unique(array_filter($namespaces)));\n}\n\n\n\n\n\n\n\n\n\n\npublic function findNamespace($namespace)\n{\n$allNamespaces = $this->getNamespaces();\n$found = '';\nforeach (explode(':', $namespace) as $i => $part) {\n\n $namespaces = array();\nforeach ($allNamespaces as $n) {\nif ('' === $found || 0 === strpos($n, $found)) {\n$namespaces[$n] = explode(':', $n);\n}\n}\n\n$abbrevs = static::getAbbreviations(array_unique(array_values(array_filter(array_map(function ($p) use ($i) { return isset($p[$i]) ? $p[$i] : ''; }, $namespaces)))));\n\nif (!isset($abbrevs[$part])) {\n$message = sprintf('There are no commands defined in the \"%s\" namespace.', $namespace);\n\nif (1 <= $i) {\n$part = $found.':'.$part;\n}\n\nif ($alternatives = $this->findAlternativeNamespace($part, $abbrevs)) {\nif (1 == count($alternatives)) {\n$message .= \"\\n\\nDid you mean this?\\n    \";\n} else {\n$message .= \"\\n\\nDid you mean one of these?\\n    \";\n}\n\n$message .= implode(\"\\n    \", $alternatives);\n}\n\nthrow new \\InvalidArgumentException($message);\n}\n\n\n if (in_array($part, $abbrevs[$part])) {\n$abbrevs[$part] = array($part);\n}\n\nif (count($abbrevs[$part]) > 1) {\nthrow new \\InvalidArgumentException(sprintf('The namespace \"%s\" is ambiguous (%s).', $namespace, $this->getAbbreviationSuggestions($abbrevs[$part])));\n}\n\n$found .= $found ? ':' . $abbrevs[$part][0] : $abbrevs[$part][0];\n}\n\nreturn $found;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npublic function find($name)\n{\n\n $namespace = '';\n$searchName = $name;\nif (false !== $pos = strrpos($name, ':')) {\n$namespace = $this->findNamespace(substr($name, 0, $pos));\n$searchName = $namespace.substr($name, $pos);\n}\n\n\n $commands = array();\nforeach ($this->commands as $command) {\n$extractedNamespace = $this->extractNamespace($command->getName());\nif ($extractedNamespace === $namespace\n|| !empty($namespace) && 0 === strpos($extractedNamespace, $namespace)\n) {\n$commands[] = $command->getName();\n}\n}\n\n$abbrevs = static::getAbbreviations(array_unique($commands));\nif (isset($abbrevs[$searchName]) && 1 == count($abbrevs[$searchName])) {\nreturn $this->get($abbrevs[$searchName][0]);\n}\n\nif (isset($abbrevs[$searchName]) && in_array($searchName, $abbrevs[$searchName])) {\nreturn $this->get($searchName);\n}\n\nif (isset($abbrevs[$searchName]) && count($abbrevs[$searchName]) > 1) {\n$suggestions = $this->getAbbreviationSuggestions($abbrevs[$searchName]);\n\nthrow new \\InvalidArgumentException(sprintf('Command \"%s\" is ambiguous (%s).', $name, $suggestions));\n}\n\n\n $aliases = array();\nforeach ($this->commands as $command) {\nforeach ($command->getAliases() as $alias) {\n$extractedNamespace = $this->extractNamespace($alias);\nif ($extractedNamespace === $namespace\n|| !empty($namespace) && 0 === strpos($extractedNamespace, $namespace)\n) {\n$aliases[] = $alias;\n}\n}\n}\n\n$aliases = static::getAbbreviations(array_unique($aliases));\nif (!isset($aliases[$searchName])) {\n$message = sprintf('Command \"%s\" is not defined.', $name);\n\nif ($alternatives = $this->findAlternativeCommands($searchName, $abbrevs)) {\nif (1 == count($alternatives)) {\n$message .= \"\\n\\nDid you mean this?\\n    \";\n} else {\n$message .= \"\\n\\nDid you mean one of these?\\n    \";\n}\n$message .= implode(\"\\n    \", $alternatives);\n}\n\nthrow new \\InvalidArgumentException($message);\n}\n\nif (count($aliases[$searchName]) > 1) {\nthrow new \\InvalidArgumentException(sprintf('Command \"%s\" is ambiguous (%s).', $name, $this->getAbbreviationSuggestions($aliases[$searchName])));\n}\n\nreturn $this->get($aliases[$searchName][0]);\n}\n\n\n\n\n\n\n\n\n\n\n\n\npublic function all($namespace = null)\n{\nif (null === $namespace) {\nreturn $this->commands;\n}\n\n$commands = array();\nforeach ($this->commands as $name => $command) {\nif ($namespace === $this->extractNamespace($name, substr_count($namespace, ':') + 1)) {\n$commands[$name] = $command;\n}\n}\n\nreturn $commands;\n}\n\n\n\n\n\n\n\n\npublic static function getAbbreviations($names)\n{\n$abbrevs = array();\nforeach ($names as $name) {\nfor ($len = strlen($name); $len > 0; --$len) {\n$abbrev = substr($name, 0, $len);\n$abbrevs[$abbrev][] = $name;\n}\n}\n\nreturn $abbrevs;\n}\n\n\n\n\n\n\n\n\n\n\n\npublic function asText($namespace = null, $raw = false)\n{\n$descriptor = new TextDescriptor();\n\nreturn $descriptor->describe($this, array('namespace' => $namespace, 'raw_text' => $raw));\n}\n\n\n\n\n\n\n\n\n\n\n\npublic function asXml($namespace = null, $asDom = false)\n{\n$descriptor = new XmlDescriptor();\n\nreturn $descriptor->describe($this, array('namespace' => $namespace, 'as_dom' => $asDom));\n}\n\n\n\n\n\n\n\npublic function renderException($e, $output)\n{\n$strlen = function ($string) {\nif (!function_exists('mb_strlen')) {\nreturn strlen($string);\n}\n\nif (false === $encoding = mb_detect_encoding($string)) {\nreturn strlen($string);\n}\n\nreturn mb_strlen($string, $encoding);\n};\n\ndo {\n$title = sprintf('  [%s]  ', get_class($e));\n$len = $strlen($title);\n$width = $this->getTerminalWidth() ? $this->getTerminalWidth() - 1 : PHP_INT_MAX;\n$lines = array();\nforeach (preg_split('/\\r?\\n/', $e->getMessage()) as $line) {\nforeach (str_split($line, $width - 4) as $line) {\n$lines[] = sprintf('  %s  ', $line);\n$len = max($strlen($line) + 4, $len);\n}\n}\n\n$messages = array(str_repeat(' ', $len), $title.str_repeat(' ', max(0, $len - $strlen($title))));\n\nforeach ($lines as $line) {\n$messages[] = $line.str_repeat(' ', $len - $strlen($line));\n}\n\n$messages[] = str_repeat(' ', $len);\n\n$output->writeln(\"\");\n$output->writeln(\"\");\nforeach ($messages as $message) {\n$output->writeln('<error>'.$message.'</error>');\n}\n$output->writeln(\"\");\n$output->writeln(\"\");\n\nif (OutputInterface::VERBOSITY_VERBOSE <= $output->getVerbosity()) {\n$output->writeln('<comment>Exception trace:</comment>');\n\n\n $trace = $e->getTrace();\narray_unshift($trace, array(\n'function' => '',\n'file' => $e->getFile() != null ? $e->getFile() : 'n/a',\n'line' => $e->getLine() != null ? $e->getLine() : 'n/a',\n'args' => array(),\n));\n\nfor ($i = 0, $count = count($trace); $i < $count; $i++) {\n$class = isset($trace[$i]['class']) ? $trace[$i]['class'] : '';\n$type = isset($trace[$i]['type']) ? $trace[$i]['type'] : '';\n$function = $trace[$i]['function'];\n$file = isset($trace[$i]['file']) ? $trace[$i]['file'] : 'n/a';\n$line = isset($trace[$i]['line']) ? $trace[$i]['line'] : 'n/a';\n\n$output->writeln(sprintf(' %s%s%s() at <info>%s:%s</info>', $class, $type, $function, $file, $line));\n}\n\n$output->writeln(\"\");\n$output->writeln(\"\");\n}\n} while ($e = $e->getPrevious());\n\nif (null !== $this->runningCommand) {\n$output->writeln(sprintf('<info>%s</info>', sprintf($this->runningCommand->getSynopsis(), $this->getName())));\n$output->writeln(\"\");\n$output->writeln(\"\");\n}\n}\n\n\n\n\n\n\nprotected function getTerminalWidth()\n{\n$dimensions = $this->getTerminalDimensions();\n\nreturn $dimensions[0];\n}\n\n\n\n\n\n\nprotected function getTerminalHeight()\n{\n$dimensions = $this->getTerminalDimensions();\n\nreturn $dimensions[1];\n}\n\n\n\n\n\n\npublic function getTerminalDimensions()\n{\nif (defined('PHP_WINDOWS_VERSION_BUILD')) {\n\n if (preg_match('/^(\\d+)x\\d+ \\(\\d+x(\\d+)\\)$/', trim(getenv('ANSICON')), $matches)) {\nreturn array((int) $matches[1], (int) $matches[2]);\n}\n\n if (preg_match('/^(\\d+)x(\\d+)$/', $this->getConsoleMode(), $matches)) {\nreturn array((int) $matches[1], (int) $matches[2]);\n}\n}\n\nif ($sttyString = $this->getSttyColumns()) {\n\n if (preg_match('/rows.(\\d+);.columns.(\\d+);/i', $sttyString, $matches)) {\nreturn array((int) $matches[2], (int) $matches[1]);\n}\n\n if (preg_match('/;.(\\d+).rows;.(\\d+).columns/i', $sttyString, $matches)) {\nreturn array((int) $matches[2], (int) $matches[1]);\n}\n}\n\nreturn array(null, null);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nprotected function doRunCommand(Command $command, InputInterface $input, OutputInterface $output)\n{\nif (null === $this->dispatcher) {\nreturn $command->run($input, $output);\n}\n\n$event = new ConsoleCommandEvent($command, $input, $output);\n$this->dispatcher->dispatch(ConsoleEvents::COMMAND, $event);\n\ntry {\n$exitCode = $command->run($input, $output);\n} catch (\\Exception $e) {\n$event = new ConsoleTerminateEvent($command, $input, $output, $e->getCode());\n$this->dispatcher->dispatch(ConsoleEvents::TERMINATE, $event);\n\n$event = new ConsoleForExceptionEvent($command, $input, $output, $e, $event->getExitCode());\n$this->dispatcher->dispatch(ConsoleEvents::EXCEPTION, $event);\n\nthrow $event->getException();\n}\n\n$event = new ConsoleTerminateEvent($command, $input, $output, $exitCode);\n$this->dispatcher->dispatch(ConsoleEvents::TERMINATE, $event);\n\nreturn $event->getExitCode();\n}\n\n\n\n\n\n\n\n\nprotected function getCommandName(InputInterface $input)\n{\nreturn $input->getFirstArgument();\n}\n\n\n\n\n\n\nprotected function getDefaultInputDefinition()\n{\nreturn new InputDefinition(array(\nnew InputArgument('command', InputArgument::REQUIRED, 'The command to execute'),\n\nnew InputOption('--help', '-h', InputOption::VALUE_NONE, 'Display this help message.'),\nnew InputOption('--quiet', '-q', InputOption::VALUE_NONE, 'Do not output any message.'),\nnew InputOption('--verbose', '-v|vv|vvv', InputOption::VALUE_NONE, 'Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug'),\nnew InputOption('--version', '-V', InputOption::VALUE_NONE, 'Display this application version.'),\nnew InputOption('--ansi', '', InputOption::VALUE_NONE, 'Force ANSI output.'),\nnew InputOption('--no-ansi', '', InputOption::VALUE_NONE, 'Disable ANSI output.'),\nnew InputOption('--no-interaction', '-n', InputOption::VALUE_NONE, 'Do not ask any interactive question.'),\n));\n}\n\n\n\n\n\n\nprotected function getDefaultCommands()\n{\nreturn array(new HelpCommand(), new ListCommand());\n}\n\n\n\n\n\n\nprotected function getDefaultHelperSet()\n{\nreturn new HelperSet(array(\nnew FormatterHelper(),\nnew DialogHelper(),\nnew ProgressHelper(),\nnew TableHelper(),\n));\n}\n\n\n\n\n\n\nprivate function getSttyColumns()\n{\nif (!function_exists('proc_open')) {\nreturn;\n}\n\n$descriptorspec = array(1 => array('pipe', 'w'), 2 => array('pipe', 'w'));\n$process = proc_open('stty -a | grep columns', $descriptorspec, $pipes, null, null, array('suppress_errors' => true));\nif (is_resource($process)) {\n$info = stream_get_contents($pipes[1]);\nfclose($pipes[1]);\nfclose($pipes[2]);\nproc_close($process);\n\nreturn $info;\n}\n}\n\n\n\n\n\n\nprivate function getConsoleMode()\n{\nif (!function_exists('proc_open')) {\nreturn;\n}\n\n$descriptorspec = array(1 => array('pipe', 'w'), 2 => array('pipe', 'w'));\n$process = proc_open('mode CON', $descriptorspec, $pipes, null, null, array('suppress_errors' => true));\nif (is_resource($process)) {\n$info = stream_get_contents($pipes[1]);\nfclose($pipes[1]);\nfclose($pipes[2]);\nproc_close($process);\n\nif (preg_match('/--------+\\r?\\n.+?(\\d+)\\r?\\n.+?(\\d+)\\r?\\n/', $info, $matches)) {\nreturn $matches[2].'x'.$matches[1];\n}\n}\n}\n\n\n\n\n\n\n\n\nprivate function getAbbreviationSuggestions($abbrevs)\n{\nreturn sprintf('%s, %s%s', $abbrevs[0], $abbrevs[1], count($abbrevs) > 2 ? sprintf(' and %d more', count($abbrevs) - 2) : '');\n}\n\n\n\n\n\n\n\n\n\n\n\npublic function extractNamespace($name, $limit = null)\n{\n$parts = explode(':', $name);\narray_pop($parts);\n\nreturn implode(':', null === $limit ? $parts : array_slice($parts, 0, $limit));\n}\n\n\n\n\n\n\n\n\n\nprivate function findAlternativeCommands($name, $abbrevs)\n{\n$callback = function($item) {\nreturn $item->getName();\n};\n\nreturn $this->findAlternatives($name, $this->commands, $abbrevs, $callback);\n}\n\n\n\n\n\n\n\n\n\nprivate function findAlternativeNamespace($name, $abbrevs)\n{\nreturn $this->findAlternatives($name, $this->getNamespaces(), $abbrevs);\n}\n\n\n\n\n\n\n\n\n\n\n\n\nprivate function findAlternatives($name, $collection, $abbrevs, $callback = null)\n{\n$alternatives = array();\n\nforeach ($collection as $item) {\nif (null !== $callback) {\n$item = call_user_func($callback, $item);\n}\n\n$lev = levenshtein($name, $item);\nif ($lev <= strlen($name) / 3 || false !== strpos($item, $name)) {\n$alternatives[$item] = $lev;\n}\n}\n\nif (!$alternatives) {\nforeach ($abbrevs as $key => $values) {\n$lev = levenshtein($name, $key);\nif ($lev <= strlen($name) / 3 || false !== strpos($key, $name)) {\nforeach ($values as $value) {\n$alternatives[$value] = $lev;\n}\n}\n}\n}\n\nasort($alternatives);\n\nreturn array_keys($alternatives);\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Console\\Input;\n\n\n\n\n\n\n\n\nclass InputArgument\n{\nconst REQUIRED = 1;\nconst OPTIONAL = 2;\nconst IS_ARRAY = 4;\n\nprivate $name;\nprivate $mode;\nprivate $default;\nprivate $description;\n\n\n\n\n\n\n\n\n\n\n\n\n\npublic function __construct($name, $mode = null, $description = '', $default = null)\n{\nif (null === $mode) {\n$mode = self::OPTIONAL;\n} elseif (!is_int($mode) || $mode > 7 || $mode < 1) {\nthrow new \\InvalidArgumentException(sprintf('Argument mode \"%s\" is not valid.', $mode));\n}\n\n$this->name = $name;\n$this->mode = $mode;\n$this->description = $description;\n\n$this->setDefault($default);\n}\n\n\n\n\n\n\npublic function getName()\n{\nreturn $this->name;\n}\n\n\n\n\n\n\npublic function isRequired()\n{\nreturn self::REQUIRED === (self::REQUIRED & $this->mode);\n}\n\n\n\n\n\n\npublic function isArray()\n{\nreturn self::IS_ARRAY === (self::IS_ARRAY & $this->mode);\n}\n\n\n\n\n\n\n\n\npublic function setDefault($default = null)\n{\nif (self::REQUIRED === $this->mode && null !== $default) {\nthrow new \\LogicException('Cannot set a default value except for InputArgument::OPTIONAL mode.');\n}\n\nif ($this->isArray()) {\nif (null === $default) {\n$default = array();\n} elseif (!is_array($default)) {\nthrow new \\LogicException('A default value for an array argument must be an array.');\n}\n}\n\n$this->default = $default;\n}\n\n\n\n\n\n\npublic function getDefault()\n{\nreturn $this->default;\n}\n\n\n\n\n\n\npublic function getDescription()\n{\nreturn $this->description;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Console\\Input;\n\n\n\n\n\n\n\n\n\n\n\n\nabstract class Input implements InputInterface\n{\nprotected $definition;\nprotected $options;\nprotected $arguments;\nprotected $interactive = true;\n\n\n\n\n\n\npublic function __construct(InputDefinition $definition = null)\n{\nif (null === $definition) {\n$this->arguments = array();\n$this->options = array();\n$this->definition = new InputDefinition();\n} else {\n$this->bind($definition);\n$this->validate();\n}\n}\n\n\n\n\n\n\npublic function bind(InputDefinition $definition)\n{\n$this->arguments = array();\n$this->options = array();\n$this->definition = $definition;\n\n$this->parse();\n}\n\n\n\n\nabstract protected function parse();\n\n\n\n\n\n\npublic function validate()\n{\nif (count($this->arguments) < $this->definition->getArgumentRequiredCount()) {\nthrow new \\RuntimeException('Not enough arguments.');\n}\n}\n\n\n\n\n\n\npublic function isInteractive()\n{\nreturn $this->interactive;\n}\n\n\n\n\n\n\npublic function setInteractive($interactive)\n{\n$this->interactive = (Boolean) $interactive;\n}\n\n\n\n\n\n\npublic function getArguments()\n{\nreturn array_merge($this->definition->getArgumentDefaults(), $this->arguments);\n}\n\n\n\n\n\n\n\n\n\n\npublic function getArgument($name)\n{\nif (!$this->definition->hasArgument($name)) {\nthrow new \\InvalidArgumentException(sprintf('The \"%s\" argument does not exist.', $name));\n}\n\nreturn isset($this->arguments[$name]) ? $this->arguments[$name] : $this->definition->getArgument($name)->getDefault();\n}\n\n\n\n\n\n\n\n\n\npublic function setArgument($name, $value)\n{\nif (!$this->definition->hasArgument($name)) {\nthrow new \\InvalidArgumentException(sprintf('The \"%s\" argument does not exist.', $name));\n}\n\n$this->arguments[$name] = $value;\n}\n\n\n\n\n\n\n\n\npublic function hasArgument($name)\n{\nreturn $this->definition->hasArgument($name);\n}\n\n\n\n\n\n\npublic function getOptions()\n{\nreturn array_merge($this->definition->getOptionDefaults(), $this->options);\n}\n\n\n\n\n\n\n\n\n\n\npublic function getOption($name)\n{\nif (!$this->definition->hasOption($name)) {\nthrow new \\InvalidArgumentException(sprintf('The \"%s\" option does not exist.', $name));\n}\n\nreturn isset($this->options[$name]) ? $this->options[$name] : $this->definition->getOption($name)->getDefault();\n}\n\n\n\n\n\n\n\n\n\npublic function setOption($name, $value)\n{\nif (!$this->definition->hasOption($name)) {\nthrow new \\InvalidArgumentException(sprintf('The \"%s\" option does not exist.', $name));\n}\n\n$this->options[$name] = $value;\n}\n\n\n\n\n\n\n\n\npublic function hasOption($name)\n{\nreturn $this->definition->hasOption($name);\n}\n\n\n\n\n\n\n\n\npublic function escapeToken($token)\n{\nreturn preg_match('{^[\\w-]+$}', $token) ? $token : escapeshellarg($token);\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Console\\Input;\n\n\n\n\n\n\n\n\n\n\n\n\nclass StringInput extends ArgvInput\n{\nconst REGEX_STRING = '([^\\s]+?)(?:\\s|(?<!\\\\\\\\)\"|(?<!\\\\\\\\)\\'|$)';\nconst REGEX_QUOTED_STRING = '(?:\"([^\"\\\\\\\\]*(?:\\\\\\\\.[^\"\\\\\\\\]*)*)\"|\\'([^\\'\\\\\\\\]*(?:\\\\\\\\.[^\\'\\\\\\\\]*)*)\\')';\n\n\n\n\n\n\n\n\n\n\n\npublic function __construct($input, InputDefinition $definition = null)\n{\nparent::__construct(array(), null);\n\n$this->setTokens($this->tokenize($input));\n\nif (null !== $definition) {\n$this->bind($definition);\n}\n}\n\n\n\n\n\n\n\n\n\n\nprivate function tokenize($input)\n{\n$tokens = array();\n$length = strlen($input);\n$cursor = 0;\nwhile ($cursor < $length) {\nif (preg_match('/\\s+/A', $input, $match, null, $cursor)) {\n} elseif (preg_match('/([^=\"\\'\\s]+?)(=?)('.self::REGEX_QUOTED_STRING.'+)/A', $input, $match, null, $cursor)) {\n$tokens[] = $match[1].$match[2].stripcslashes(str_replace(array('\"\\'', '\\'\"', '\\'\\'', '\"\"'), '', substr($match[3], 1, strlen($match[3]) - 2)));\n} elseif (preg_match('/'.self::REGEX_QUOTED_STRING.'/A', $input, $match, null, $cursor)) {\n$tokens[] = stripcslashes(substr($match[0], 1, strlen($match[0]) - 2));\n} elseif (preg_match('/'.self::REGEX_STRING.'/A', $input, $match, null, $cursor)) {\n$tokens[] = stripcslashes($match[1]);\n} else {\n\n \n throw new \\InvalidArgumentException(sprintf('Unable to parse input near \"... %s ...\"', substr($input, $cursor, 10)));\n\n }\n\n$cursor += strlen($match[0]);\n}\n\nreturn $tokens;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Console\\Input;\n\n\n\n\n\n\n\n\nclass InputOption\n{\nconst VALUE_NONE = 1;\nconst VALUE_REQUIRED = 2;\nconst VALUE_OPTIONAL = 4;\nconst VALUE_IS_ARRAY = 8;\n\nprivate $name;\nprivate $shortcut;\nprivate $mode;\nprivate $default;\nprivate $description;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npublic function __construct($name, $shortcut = null, $mode = null, $description = '', $default = null)\n{\nif (0 === strpos($name, '--')) {\n$name = substr($name, 2);\n}\n\nif (empty($name)) {\nthrow new \\InvalidArgumentException('An option name cannot be empty.');\n}\n\nif (empty($shortcut)) {\n$shortcut = null;\n}\n\nif (null !== $shortcut) {\nif (is_array($shortcut)) {\n$shortcut = implode('|', $shortcut);\n}\n$shortcuts = preg_split('{(\\|)-?}', ltrim($shortcut, '-'));\n$shortcuts = array_filter($shortcuts);\n$shortcut = implode('|', $shortcuts);\n\nif (empty($shortcut)) {\nthrow new \\InvalidArgumentException('An option shortcut cannot be empty.');\n}\n}\n\nif (null === $mode) {\n$mode = self::VALUE_NONE;\n} elseif (!is_int($mode) || $mode > 15 || $mode < 1) {\nthrow new \\InvalidArgumentException(sprintf('Option mode \"%s\" is not valid.', $mode));\n}\n\n$this->name = $name;\n$this->shortcut = $shortcut;\n$this->mode = $mode;\n$this->description = $description;\n\nif ($this->isArray() && !$this->acceptValue()) {\nthrow new \\InvalidArgumentException('Impossible to have an option mode VALUE_IS_ARRAY if the option does not accept a value.');\n}\n\n$this->setDefault($default);\n}\n\n\n\n\n\n\npublic function getShortcut()\n{\nreturn $this->shortcut;\n}\n\n\n\n\n\n\npublic function getName()\n{\nreturn $this->name;\n}\n\n\n\n\n\n\npublic function acceptValue()\n{\nreturn $this->isValueRequired() || $this->isValueOptional();\n}\n\n\n\n\n\n\npublic function isValueRequired()\n{\nreturn self::VALUE_REQUIRED === (self::VALUE_REQUIRED & $this->mode);\n}\n\n\n\n\n\n\npublic function isValueOptional()\n{\nreturn self::VALUE_OPTIONAL === (self::VALUE_OPTIONAL & $this->mode);\n}\n\n\n\n\n\n\npublic function isArray()\n{\nreturn self::VALUE_IS_ARRAY === (self::VALUE_IS_ARRAY & $this->mode);\n}\n\n\n\n\n\n\n\n\npublic function setDefault($default = null)\n{\nif (self::VALUE_NONE === (self::VALUE_NONE & $this->mode) && null !== $default) {\nthrow new \\LogicException('Cannot set a default value when using InputOption::VALUE_NONE mode.');\n}\n\nif ($this->isArray()) {\nif (null === $default) {\n$default = array();\n} elseif (!is_array($default)) {\nthrow new \\LogicException('A default value for an array option must be an array.');\n}\n}\n\n$this->default = $this->acceptValue() ? $default : false;\n}\n\n\n\n\n\n\npublic function getDefault()\n{\nreturn $this->default;\n}\n\n\n\n\n\n\npublic function getDescription()\n{\nreturn $this->description;\n}\n\n\n\n\n\n\n\npublic function equals(InputOption $option)\n{\nreturn $option->getName() === $this->getName()\n&& $option->getShortcut() === $this->getShortcut()\n&& $option->getDefault() === $this->getDefault()\n&& $option->isArray() === $this->isArray()\n&& $option->isValueRequired() === $this->isValueRequired()\n&& $option->isValueOptional() === $this->isValueOptional()\n;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Console\\Input;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass ArgvInput extends Input\n{\nprivate $tokens;\nprivate $parsed;\n\n\n\n\n\n\n\n\n\npublic function __construct(array $argv = null, InputDefinition $definition = null)\n{\nif (null === $argv) {\n$argv = $_SERVER['argv'];\n}\n\n\n array_shift($argv);\n\n$this->tokens = $argv;\n\nparent::__construct($definition);\n}\n\nprotected function setTokens(array $tokens)\n{\n$this->tokens = $tokens;\n}\n\n\n\n\nprotected function parse()\n{\n$parseOptions = true;\n$this->parsed = $this->tokens;\nwhile (null !== $token = array_shift($this->parsed)) {\nif ($parseOptions && '' == $token) {\n$this->parseArgument($token);\n} elseif ($parseOptions && '--' == $token) {\n$parseOptions = false;\n} elseif ($parseOptions && 0 === strpos($token, '--')) {\n$this->parseLongOption($token);\n} elseif ($parseOptions && '-' === $token[0]) {\n$this->parseShortOption($token);\n} else {\n$this->parseArgument($token);\n}\n}\n}\n\n\n\n\n\n\nprivate function parseShortOption($token)\n{\n$name = substr($token, 1);\n\nif (strlen($name) > 1) {\nif ($this->definition->hasShortcut($name[0]) && $this->definition->getOptionForShortcut($name[0])->acceptValue()) {\n\n $this->addShortOption($name[0], substr($name, 1));\n} else {\n$this->parseShortOptionSet($name);\n}\n} else {\n$this->addShortOption($name, null);\n}\n}\n\n\n\n\n\n\n\n\nprivate function parseShortOptionSet($name)\n{\n$len = strlen($name);\nfor ($i = 0; $i < $len; $i++) {\nif (!$this->definition->hasShortcut($name[$i])) {\nthrow new \\RuntimeException(sprintf('The \"-%s\" option does not exist.', $name[$i]));\n}\n\n$option = $this->definition->getOptionForShortcut($name[$i]);\nif ($option->acceptValue()) {\n$this->addLongOption($option->getName(), $i === $len - 1 ? null : substr($name, $i + 1));\n\nbreak;\n} else {\n$this->addLongOption($option->getName(), true);\n}\n}\n}\n\n\n\n\n\n\nprivate function parseLongOption($token)\n{\n$name = substr($token, 2);\n\nif (false !== $pos = strpos($name, '=')) {\n$this->addLongOption(substr($name, 0, $pos), substr($name, $pos + 1));\n} else {\n$this->addLongOption($name, null);\n}\n}\n\n\n\n\n\n\n\n\nprivate function parseArgument($token)\n{\n$c = count($this->arguments);\n\n\n if ($this->definition->hasArgument($c)) {\n$arg = $this->definition->getArgument($c);\n$this->arguments[$arg->getName()] = $arg->isArray()? array($token) : $token;\n\n\n } elseif ($this->definition->hasArgument($c - 1) && $this->definition->getArgument($c - 1)->isArray()) {\n$arg = $this->definition->getArgument($c - 1);\n$this->arguments[$arg->getName()][] = $token;\n\n\n } else {\nthrow new \\RuntimeException('Too many arguments.');\n}\n}\n\n\n\n\n\n\n\n\n\nprivate function addShortOption($shortcut, $value)\n{\nif (!$this->definition->hasShortcut($shortcut)) {\nthrow new \\RuntimeException(sprintf('The \"-%s\" option does not exist.', $shortcut));\n}\n\n$this->addLongOption($this->definition->getOptionForShortcut($shortcut)->getName(), $value);\n}\n\n\n\n\n\n\n\n\n\nprivate function addLongOption($name, $value)\n{\nif (!$this->definition->hasOption($name)) {\nthrow new \\RuntimeException(sprintf('The \"--%s\" option does not exist.', $name));\n}\n\n$option = $this->definition->getOption($name);\n\n\n if (false === $value) {\n$value = null;\n}\n\nif (null === $value && $option->acceptValue() && count($this->parsed)) {\n\n \n $next = array_shift($this->parsed);\nif (isset($next[0]) && '-' !== $next[0]) {\n$value = $next;\n} elseif (empty($next)) {\n$value = '';\n} else {\narray_unshift($this->parsed, $next);\n}\n}\n\nif (null === $value) {\nif ($option->isValueRequired()) {\nthrow new \\RuntimeException(sprintf('The \"--%s\" option requires a value.', $name));\n}\n\nif (!$option->isArray()) {\n$value = $option->isValueOptional() ? $option->getDefault() : true;\n}\n}\n\nif ($option->isArray()) {\n$this->options[$name][] = $value;\n} else {\n$this->options[$name] = $value;\n}\n}\n\n\n\n\n\n\npublic function getFirstArgument()\n{\nforeach ($this->tokens as $token) {\nif ($token && '-' === $token[0]) {\ncontinue;\n}\n\nreturn $token;\n}\n}\n\n\n\n\n\n\n\n\n\n\n\npublic function hasParameterOption($values)\n{\n$values = (array) $values;\n\nforeach ($this->tokens as $v) {\nif (in_array($v, $values)) {\nreturn true;\n}\n}\n\nreturn false;\n}\n\n\n\n\n\n\n\n\n\n\n\n\npublic function getParameterOption($values, $default = false)\n{\n$values = (array) $values;\n\n$tokens = $this->tokens;\nwhile ($token = array_shift($tokens)) {\nforeach ($values as $value) {\nif (0 === strpos($token, $value)) {\nif (false !== $pos = strpos($token, '=')) {\nreturn substr($token, $pos + 1);\n}\n\nreturn array_shift($tokens);\n}\n}\n}\n\nreturn $default;\n}\n\n\n\n\n\n\npublic function __toString()\n{\n$self = $this;\n$tokens = array_map(function ($token) use ($self) {\nif (preg_match('{^(-[^=]+=)(.+)}', $token, $match)) {\nreturn $match[1] . $self->escapeToken($match[2]);\n}\n\nif ($token && $token[0] !== '-') {\nreturn $self->escapeToken($token);\n}\n\nreturn $token;\n}, $this->tokens);\n\nreturn implode(' ', $tokens);\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Console\\Input;\n\n\n\n\n\n\ninterface InputInterface\n{\n\n\n\n\n\npublic function getFirstArgument();\n\n\n\n\n\n\n\n\n\n\n\npublic function hasParameterOption($values);\n\n\n\n\n\n\n\n\n\n\n\n\npublic function getParameterOption($values, $default = false);\n\n\n\n\n\n\npublic function bind(InputDefinition $definition);\n\n\n\n\n\n\n\n\npublic function validate();\n\n\n\n\n\n\npublic function getArguments();\n\n\n\n\n\n\n\n\npublic function getArgument($name);\n\n\n\n\n\n\n\n\n\npublic function setArgument($name, $value);\n\n\n\n\n\n\n\n\npublic function hasArgument($name);\n\n\n\n\n\n\npublic function getOptions();\n\n\n\n\n\n\n\n\npublic function getOption($name);\n\n\n\n\n\n\n\n\n\npublic function setOption($name, $value);\n\n\n\n\n\n\n\n\npublic function hasOption($name);\n\n\n\n\n\n\npublic function isInteractive();\n\n\n\n\n\n\npublic function setInteractive($interactive);\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Console\\Input;\n\n\n\n\n\n\n\n\n\n\n\n\nclass ArrayInput extends Input\n{\nprivate $parameters;\n\n\n\n\n\n\n\n\n\npublic function __construct(array $parameters, InputDefinition $definition = null)\n{\n$this->parameters = $parameters;\n\nparent::__construct($definition);\n}\n\n\n\n\n\n\npublic function getFirstArgument()\n{\nforeach ($this->parameters as $key => $value) {\nif ($key && '-' === $key[0]) {\ncontinue;\n}\n\nreturn $value;\n}\n}\n\n\n\n\n\n\n\n\n\n\n\npublic function hasParameterOption($values)\n{\n$values = (array) $values;\n\nforeach ($this->parameters as $k => $v) {\nif (!is_int($k)) {\n$v = $k;\n}\n\nif (in_array($v, $values)) {\nreturn true;\n}\n}\n\nreturn false;\n}\n\n\n\n\n\n\n\n\n\n\n\n\npublic function getParameterOption($values, $default = false)\n{\n$values = (array) $values;\n\nforeach ($this->parameters as $k => $v) {\nif (is_int($k) && in_array($v, $values)) {\nreturn true;\n} elseif (in_array($k, $values)) {\nreturn $v;\n}\n}\n\nreturn $default;\n}\n\n\n\n\n\n\npublic function __toString()\n{\n$params = array();\nforeach ($this->parameters as $param => $val) {\nif ($param && '-' === $param[0]) {\n$params[] = $param . ('' != $val ? '='.$this->escapeToken($val) : '');\n} else {\n$params[] = $this->escapeToken($val);\n}\n}\n\nreturn implode(' ', $params);\n}\n\n\n\n\nprotected function parse()\n{\nforeach ($this->parameters as $key => $value) {\nif (0 === strpos($key, '--')) {\n$this->addLongOption(substr($key, 2), $value);\n} elseif ('-' === $key[0]) {\n$this->addShortOption(substr($key, 1), $value);\n} else {\n$this->addArgument($key, $value);\n}\n}\n}\n\n\n\n\n\n\n\n\n\nprivate function addShortOption($shortcut, $value)\n{\nif (!$this->definition->hasShortcut($shortcut)) {\nthrow new \\InvalidArgumentException(sprintf('The \"-%s\" option does not exist.', $shortcut));\n}\n\n$this->addLongOption($this->definition->getOptionForShortcut($shortcut)->getName(), $value);\n}\n\n\n\n\n\n\n\n\n\n\nprivate function addLongOption($name, $value)\n{\nif (!$this->definition->hasOption($name)) {\nthrow new \\InvalidArgumentException(sprintf('The \"--%s\" option does not exist.', $name));\n}\n\n$option = $this->definition->getOption($name);\n\nif (null === $value) {\nif ($option->isValueRequired()) {\nthrow new \\InvalidArgumentException(sprintf('The \"--%s\" option requires a value.', $name));\n}\n\n$value = $option->isValueOptional() ? $option->getDefault() : true;\n}\n\n$this->options[$name] = $value;\n}\n\n\n\n\n\n\n\n\n\nprivate function addArgument($name, $value)\n{\nif (!$this->definition->hasArgument($name)) {\nthrow new \\InvalidArgumentException(sprintf('The \"%s\" argument does not exist.', $name));\n}\n\n$this->arguments[$name] = $value;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Console\\Input;\n\nuse Symfony\\Component\\Console\\Descriptor\\TextDescriptor;\nuse Symfony\\Component\\Console\\Descriptor\\XmlDescriptor;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass InputDefinition\n{\nprivate $arguments;\nprivate $requiredCount;\nprivate $hasAnArrayArgument = false;\nprivate $hasOptional;\nprivate $options;\nprivate $shortcuts;\n\n\n\n\n\n\n\n\npublic function __construct(array $definition = array())\n{\n$this->setDefinition($definition);\n}\n\n\n\n\n\n\n\n\npublic function setDefinition(array $definition)\n{\n$arguments = array();\n$options = array();\nforeach ($definition as $item) {\nif ($item instanceof InputOption) {\n$options[] = $item;\n} else {\n$arguments[] = $item;\n}\n}\n\n$this->setArguments($arguments);\n$this->setOptions($options);\n}\n\n\n\n\n\n\n\n\npublic function setArguments($arguments = array())\n{\n$this->arguments = array();\n$this->requiredCount = 0;\n$this->hasOptional = false;\n$this->hasAnArrayArgument = false;\n$this->addArguments($arguments);\n}\n\n\n\n\n\n\n\n\npublic function addArguments($arguments = array())\n{\nif (null !== $arguments) {\nforeach ($arguments as $argument) {\n$this->addArgument($argument);\n}\n}\n}\n\n\n\n\n\n\n\n\n\n\npublic function addArgument(InputArgument $argument)\n{\nif (isset($this->arguments[$argument->getName()])) {\nthrow new \\LogicException(sprintf('An argument with name \"%s\" already exists.', $argument->getName()));\n}\n\nif ($this->hasAnArrayArgument) {\nthrow new \\LogicException('Cannot add an argument after an array argument.');\n}\n\nif ($argument->isRequired() && $this->hasOptional) {\nthrow new \\LogicException('Cannot add a required argument after an optional one.');\n}\n\nif ($argument->isArray()) {\n$this->hasAnArrayArgument = true;\n}\n\nif ($argument->isRequired()) {\n++$this->requiredCount;\n} else {\n$this->hasOptional = true;\n}\n\n$this->arguments[$argument->getName()] = $argument;\n}\n\n\n\n\n\n\n\n\n\n\n\n\npublic function getArgument($name)\n{\nif (!$this->hasArgument($name)) {\nthrow new \\InvalidArgumentException(sprintf('The \"%s\" argument does not exist.', $name));\n}\n\n$arguments = is_int($name) ? array_values($this->arguments) : $this->arguments;\n\nreturn $arguments[$name];\n}\n\n\n\n\n\n\n\n\n\n\npublic function hasArgument($name)\n{\n$arguments = is_int($name) ? array_values($this->arguments) : $this->arguments;\n\nreturn isset($arguments[$name]);\n}\n\n\n\n\n\n\n\n\npublic function getArguments()\n{\nreturn $this->arguments;\n}\n\n\n\n\n\n\npublic function getArgumentCount()\n{\nreturn $this->hasAnArrayArgument ? PHP_INT_MAX : count($this->arguments);\n}\n\n\n\n\n\n\npublic function getArgumentRequiredCount()\n{\nreturn $this->requiredCount;\n}\n\n\n\n\n\n\npublic function getArgumentDefaults()\n{\n$values = array();\nforeach ($this->arguments as $argument) {\n$values[$argument->getName()] = $argument->getDefault();\n}\n\nreturn $values;\n}\n\n\n\n\n\n\n\n\npublic function setOptions($options = array())\n{\n$this->options = array();\n$this->shortcuts = array();\n$this->addOptions($options);\n}\n\n\n\n\n\n\n\n\npublic function addOptions($options = array())\n{\nforeach ($options as $option) {\n$this->addOption($option);\n}\n}\n\n\n\n\n\n\n\n\n\n\npublic function addOption(InputOption $option)\n{\nif (isset($this->options[$option->getName()]) && !$option->equals($this->options[$option->getName()])) {\nthrow new \\LogicException(sprintf('An option named \"%s\" already exists.', $option->getName()));\n}\n\nif ($option->getShortcut()) {\nforeach (explode('|', $option->getShortcut()) as $shortcut) {\nif (isset($this->shortcuts[$shortcut]) && !$option->equals($this->options[$this->shortcuts[$shortcut]])) {\nthrow new \\LogicException(sprintf('An option with shortcut \"%s\" already exists.', $shortcut));\n}\n}\n}\n\n$this->options[$option->getName()] = $option;\nif ($option->getShortcut()) {\nforeach (explode('|', $option->getShortcut()) as $shortcut) {\n$this->shortcuts[$shortcut] = $option->getName();\n}\n}\n}\n\n\n\n\n\n\n\n\n\n\n\n\npublic function getOption($name)\n{\nif (!$this->hasOption($name)) {\nthrow new \\InvalidArgumentException(sprintf('The \"--%s\" option does not exist.', $name));\n}\n\nreturn $this->options[$name];\n}\n\n\n\n\n\n\n\n\n\n\npublic function hasOption($name)\n{\nreturn isset($this->options[$name]);\n}\n\n\n\n\n\n\n\n\npublic function getOptions()\n{\nreturn $this->options;\n}\n\n\n\n\n\n\n\n\npublic function hasShortcut($name)\n{\nreturn isset($this->shortcuts[$name]);\n}\n\n\n\n\n\n\n\n\npublic function getOptionForShortcut($shortcut)\n{\nreturn $this->getOption($this->shortcutToName($shortcut));\n}\n\n\n\n\n\n\npublic function getOptionDefaults()\n{\n$values = array();\nforeach ($this->options as $option) {\n$values[$option->getName()] = $option->getDefault();\n}\n\nreturn $values;\n}\n\n\n\n\n\n\n\n\n\n\nprivate function shortcutToName($shortcut)\n{\nif (!isset($this->shortcuts[$shortcut])) {\nthrow new \\InvalidArgumentException(sprintf('The \"-%s\" option does not exist.', $shortcut));\n}\n\nreturn $this->shortcuts[$shortcut];\n}\n\n\n\n\n\n\npublic function getSynopsis()\n{\n$elements = array();\nforeach ($this->getOptions() as $option) {\n$shortcut = $option->getShortcut() ? sprintf('-%s|', $option->getShortcut()) : '';\n$elements[] = sprintf('['.($option->isValueRequired() ? '%s--%s=\"...\"' : ($option->isValueOptional() ? '%s--%s[=\"...\"]' : '%s--%s')).']', $shortcut, $option->getName());\n}\n\nforeach ($this->getArguments() as $argument) {\n$elements[] = sprintf($argument->isRequired() ? '%s' : '[%s]', $argument->getName().($argument->isArray() ? '1' : ''));\n\nif ($argument->isArray()) {\n$elements[] = sprintf('... [%sN]', $argument->getName());\n}\n}\n\nreturn implode(' ', $elements);\n}\n\n\n\n\n\n\n\n\npublic function asText()\n{\n$descriptor = new TextDescriptor();\n\nreturn $descriptor->describe($this);\n}\n\n\n\n\n\n\n\n\n\n\npublic function asXml($asDom = false)\n{\n$descriptor = new XmlDescriptor();\n\nreturn $descriptor->describe($this, array('as_dom' => $asDom));\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Console;\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Input\\StringInput;\nuse Symfony\\Component\\Console\\Output\\ConsoleOutput;\nuse Symfony\\Component\\Process\\ProcessBuilder;\nuse Symfony\\Component\\Process\\PhpExecutableFinder;\n\n\n\n\n\n\n\n\n\n\nclass Shell\n{\nprivate $application;\nprivate $history;\nprivate $output;\nprivate $hasReadline;\nprivate $processIsolation;\n\n\n\n\n\n\n\n\n\npublic function __construct(Application $application)\n{\n$this->hasReadline = function_exists('readline');\n$this->application = $application;\n$this->history = getenv('HOME').'/.history_'.$application->getName();\n$this->output = new ConsoleOutput();\n$this->processIsolation = false;\n}\n\n\n\n\npublic function run()\n{\n$this->application->setAutoExit(false);\n$this->application->setCatchExceptions(true);\n\nif ($this->hasReadline) {\nreadline_read_history($this->history);\nreadline_completion_function(array($this, 'autocompleter'));\n}\n\n$this->output->writeln($this->getHeader());\n$php = null;\nif ($this->processIsolation) {\n$finder = new PhpExecutableFinder();\n$php = $finder->find();\n$this->output->writeln(<<<EOF\n<info>Running with process isolation, you should consider this:</info>\n  * each command is executed as separate process,\n  * commands don't support interactivity, all params must be passed explicitly,\n  * commands output is not colorized.\n\nEOF\n);\n}\n\nwhile (true) {\n$command = $this->readline();\n\nif (false === $command) {\n$this->output->writeln(\"\\n\");\n\nbreak;\n}\n\nif ($this->hasReadline) {\nreadline_add_history($command);\nreadline_write_history($this->history);\n}\n\nif ($this->processIsolation) {\n$pb = new ProcessBuilder();\n\n$process = $pb\n->add($php)\n->add($_SERVER['argv'][0])\n->add($command)\n->inheritEnvironmentVariables(true)\n->getProcess()\n;\n\n$output = $this->output;\n$process->run(function($type, $data) use ($output) {\n$output->writeln($data);\n});\n\n$ret = $process->getExitCode();\n} else {\n$ret = $this->application->run(new StringInput($command), $this->output);\n}\n\nif (0 !== $ret) {\n$this->output->writeln(sprintf('<error>The command terminated with an error status (%s)</error>', $ret));\n}\n}\n}\n\n\n\n\n\n\nprotected function getHeader()\n{\nreturn <<<EOF\n\nWelcome to the <info>{$this->application->getName()}</info> shell (<comment>{$this->application->getVersion()}</comment>).\n\nAt the prompt, type <comment>help</comment> for some help,\nor <comment>list</comment> to get a list of available commands.\n\nTo exit the shell, type <comment>^D</comment>.\n\nEOF;\n}\n\n\n\n\n\n\nprotected function getPrompt()\n{\n\n return $this->output->getFormatter()->format($this->application->getName().' > ');\n}\n\nprotected function getOutput()\n{\nreturn $this->output;\n}\n\nprotected function getApplication()\n{\nreturn $this->application;\n}\n\n\n\n\n\n\n\n\nprivate function autocompleter($text)\n{\n$info = readline_info();\n$text = substr($info['line_buffer'], 0, $info['end']);\n\nif ($info['point'] !== $info['end']) {\nreturn true;\n}\n\n\n if (false === strpos($text, ' ') || !$text) {\nreturn array_keys($this->application->all());\n}\n\n\n try {\n$command = $this->application->find(substr($text, 0, strpos($text, ' ')));\n} catch (\\Exception $e) {\nreturn true;\n}\n\n$list = array('--help');\nforeach ($command->getDefinition()->getOptions() as $option) {\n$list[] = '--'.$option->getName();\n}\n\nreturn $list;\n}\n\n\n\n\n\n\nprivate function readline()\n{\nif ($this->hasReadline) {\n$line = readline($this->getPrompt());\n} else {\n$this->output->write($this->getPrompt());\n$line = fgets(STDIN, 1024);\n$line = (!$line && strlen($line) == 0) ? false : rtrim($line);\n}\n\nreturn $line;\n}\n\npublic function getProcessIsolation()\n{\nreturn $this->processIsolation;\n}\n\npublic function setProcessIsolation($processIsolation)\n{\n$this->processIsolation = (Boolean) $processIsolation;\n\nif ($this->processIsolation && !class_exists('Symfony\\\\Component\\\\Process\\\\Process')) {\nthrow new \\RuntimeException('Unable to isolate processes as the Symfony Process Component is not installed.');\n}\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Console\\Output;\n\nuse Symfony\\Component\\Console\\Formatter\\OutputFormatterInterface;\nuse Symfony\\Component\\Console\\Formatter\\OutputFormatter;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nabstract class Output implements OutputInterface\n{\nprivate $verbosity;\nprivate $formatter;\n\n\n\n\n\n\n\n\n\n\npublic function __construct($verbosity = self::VERBOSITY_NORMAL, $decorated = null, OutputFormatterInterface $formatter = null)\n{\n$this->verbosity = null === $verbosity ? self::VERBOSITY_NORMAL : $verbosity;\n$this->formatter = null === $formatter ? new OutputFormatter() : $formatter;\n$this->formatter->setDecorated((Boolean) $decorated);\n}\n\n\n\n\n\n\n\n\npublic function setFormatter(OutputFormatterInterface $formatter)\n{\n$this->formatter = $formatter;\n}\n\n\n\n\n\n\n\n\npublic function getFormatter()\n{\nreturn $this->formatter;\n}\n\n\n\n\n\n\n\n\npublic function setDecorated($decorated)\n{\n$this->formatter->setDecorated((Boolean) $decorated);\n}\n\n\n\n\n\n\n\n\npublic function isDecorated()\n{\nreturn $this->formatter->isDecorated();\n}\n\n\n\n\n\n\n\n\npublic function setVerbosity($level)\n{\n$this->verbosity = (int) $level;\n}\n\n\n\n\n\n\n\n\npublic function getVerbosity()\n{\nreturn $this->verbosity;\n}\n\n\n\n\n\n\n\n\n\npublic function writeln($messages, $type = 0)\n{\n$this->write($messages, true, $type);\n}\n\n\n\n\n\n\n\n\n\n\n\n\npublic function write($messages, $newline = false, $type = 0)\n{\nif (self::VERBOSITY_QUIET === $this->verbosity) {\nreturn;\n}\n\n$messages = (array) $messages;\n\nforeach ($messages as $message) {\nswitch ($type) {\ncase OutputInterface::OUTPUT_NORMAL:\n$message = $this->formatter->format($message);\nbreak;\ncase OutputInterface::OUTPUT_RAW:\nbreak;\ncase OutputInterface::OUTPUT_PLAIN:\n$message = strip_tags($this->formatter->format($message));\nbreak;\ndefault:\nthrow new \\InvalidArgumentException(sprintf('Unknown output type given (%s)', $type));\n}\n\n$this->doWrite($message, $newline);\n}\n}\n\n\n\n\n\n\n\nabstract protected function doWrite($message, $newline);\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Console\\Output;\n\n\n\n\n\n\n\n\n\n\nclass NullOutput extends Output\n{\n\n\n\n\n\n\nprotected function doWrite($message, $newline)\n{\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Console\\Output;\n\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n\n\n\n\n\n\ninterface ConsoleOutputInterface extends OutputInterface\n{\n\n\n\npublic function getErrorOutput();\n\npublic function setErrorOutput(OutputInterface $error);\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Console\\Output;\n\nuse Symfony\\Component\\Console\\Formatter\\OutputFormatterInterface;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass StreamOutput extends Output\n{\nprivate $stream;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npublic function __construct($stream, $verbosity = self::VERBOSITY_NORMAL, $decorated = null, OutputFormatterInterface $formatter = null)\n{\nif (!is_resource($stream) || 'stream' !== get_resource_type($stream)) {\nthrow new \\InvalidArgumentException('The StreamOutput class needs a stream as its first argument.');\n}\n\n$this->stream = $stream;\n\nif (null === $decorated) {\n$decorated = $this->hasColorSupport();\n}\n\nparent::__construct($verbosity, $decorated, $formatter);\n}\n\n\n\n\n\n\npublic function getStream()\n{\nreturn $this->stream;\n}\n\n\n\n\n\n\n\n\n\nprotected function doWrite($message, $newline)\n{\nif (false === @fwrite($this->stream, $message.($newline ? PHP_EOL : ''))) {\n\n \n throw new \\RuntimeException('Unable to write output.');\n\n }\n\nfflush($this->stream);\n}\n\n\n\n\n\n\n\n\n\n\n\nprotected function hasColorSupport()\n{\n\n if (DIRECTORY_SEPARATOR == '\\\\') {\nreturn false !== getenv('ANSICON') || 'ON' === getenv('ConEmuANSI');\n}\n\nreturn function_exists('posix_isatty') && @posix_isatty($this->stream);\n\n }\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Console\\Output;\n\nuse Symfony\\Component\\Console\\Formatter\\OutputFormatterInterface;\n\n\n\n\n\n\n\n\ninterface OutputInterface\n{\nconst VERBOSITY_QUIET = 0;\nconst VERBOSITY_NORMAL = 1;\nconst VERBOSITY_VERBOSE = 2;\nconst VERBOSITY_VERY_VERBOSE = 3;\nconst VERBOSITY_DEBUG = 4;\n\nconst OUTPUT_NORMAL = 0;\nconst OUTPUT_RAW = 1;\nconst OUTPUT_PLAIN = 2;\n\n\n\n\n\n\n\n\n\n\n\n\npublic function write($messages, $newline = false, $type = 0);\n\n\n\n\n\n\n\n\n\npublic function writeln($messages, $type = 0);\n\n\n\n\n\n\n\n\npublic function setVerbosity($level);\n\n\n\n\n\n\n\n\npublic function getVerbosity();\n\n\n\n\n\n\n\n\npublic function setDecorated($decorated);\n\n\n\n\n\n\n\n\npublic function isDecorated();\n\n\n\n\n\n\n\n\npublic function setFormatter(OutputFormatterInterface $formatter);\n\n\n\n\n\n\n\n\npublic function getFormatter();\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Console\\Output;\n\nuse Symfony\\Component\\Console\\Formatter\\OutputFormatterInterface;\nuse Symfony\\Component\\Console\\Output\\ConsoleOutputInterface;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass ConsoleOutput extends StreamOutput implements ConsoleOutputInterface\n{\nprivate $stderr;\n\n\n\n\n\n\n\n\n\n\n\npublic function __construct($verbosity = self::VERBOSITY_NORMAL, $decorated = null, OutputFormatterInterface $formatter = null)\n{\n$outputStream = 'php://stdout';\nif (!$this->hasStdoutSupport()) {\n$outputStream = 'php://output';\n}\n\nparent::__construct(fopen($outputStream, 'w'), $verbosity, $decorated, $formatter);\n\n$this->stderr = new StreamOutput(fopen('php://stderr', 'w'), $verbosity, $decorated, $formatter);\n}\n\npublic function setDecorated($decorated)\n{\nparent::setDecorated($decorated);\n$this->stderr->setDecorated($decorated);\n}\n\npublic function setFormatter(OutputFormatterInterface $formatter)\n{\nparent::setFormatter($formatter);\n$this->stderr->setFormatter($formatter);\n}\n\npublic function setVerbosity($level)\n{\nparent::setVerbosity($level);\n$this->stderr->setVerbosity($level);\n}\n\n\n\n\npublic function getErrorOutput()\n{\nreturn $this->stderr;\n}\n\npublic function setErrorOutput(OutputInterface $error)\n{\n$this->stderr = $error;\n}\n\n\n\n\n\n\n\n\n\n\n\nprotected function hasStdoutSupport()\n{\nreturn ('OS400' != php_uname('s'));\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Console\\Descriptor;\n\n\n\n\n\n\ninterface DescriptorInterface\n{\n\n\n\n\n\n\n\n\npublic function describe($object, array $options = array());\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Console\\Descriptor;\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputDefinition;\nuse Symfony\\Component\\Console\\Input\\InputOption;\n\n\n\n\n\n\nclass TextDescriptor extends Descriptor\n{\n\n\n\nprotected function describeInputArgument(InputArgument $argument, array $options = array())\n{\nif (null !== $argument->getDefault() && (!is_array($argument->getDefault()) || count($argument->getDefault()))) {\n$default = sprintf('<comment> (default: %s)</comment>', $this->formatDefaultValue($argument->getDefault()));\n} else {\n$default = '';\n}\n\n$nameWidth = isset($options['name_width']) ? $options['name_width'] : strlen($argument->getName());\n$output = str_replace(\"\\n\", \"\\n\".str_repeat(' ', $nameWidth + 2), $argument->getDescription());\n$output = sprintf(\" <info>%-${nameWidth}s</info> %s%s\", $argument->getName(), $output, $default);\n\nreturn isset($options['raw_text']) && $options['raw_text'] ? strip_tags($output) : $output;\n}\n\n\n\n\nprotected function describeInputOption(InputOption $option, array $options = array())\n{\nif ($option->acceptValue() && null !== $option->getDefault() && (!is_array($option->getDefault()) || count($option->getDefault()))) {\n$default = sprintf('<comment> (default: %s)</comment>', $this->formatDefaultValue($option->getDefault()));\n} else {\n$default = '';\n}\n\n$nameWidth = isset($options['name_width']) ? $options['name_width'] : strlen($option->getName());\n$nameWithShortcutWidth = $nameWidth - strlen($option->getName()) - 2;\n\n$output = sprintf(\" <info>%s</info> %-${nameWithShortcutWidth}s%s%s%s\",\n'--'.$option->getName(),\n$option->getShortcut() ? sprintf('(-%s) ', $option->getShortcut()) : '',\nstr_replace(\"\\n\", \"\\n\".str_repeat(' ', $nameWidth + 2), $option->getDescription()),\n$default,\n$option->isArray() ? '<comment> (multiple values allowed)</comment>' : ''\n);\n\nreturn isset($options['raw_text']) && $options['raw_text'] ? strip_tags($output) : $output;\n}\n\n\n\n\nprotected function describeInputDefinition(InputDefinition $definition, array $options = array())\n{\n$nameWidth = 0;\nforeach ($definition->getOptions() as $option) {\n$nameLength = strlen($option->getName()) + 2;\nif ($option->getShortcut()) {\n$nameLength += strlen($option->getShortcut()) + 3;\n}\n$nameWidth = max($nameWidth, $nameLength);\n}\nforeach ($definition->getArguments() as $argument) {\n$nameWidth = max($nameWidth, strlen($argument->getName()));\n}\n++$nameWidth;\n\n$messages = array();\n\nif ($definition->getArguments()) {\n$messages[] = '<comment>Arguments:</comment>';\nforeach ($definition->getArguments() as $argument) {\n$messages[] = $this->describeInputArgument($argument, array('name_width' => $nameWidth));\n}\n$messages[] = '';\n}\n\nif ($definition->getOptions()) {\n$messages[] = '<comment>Options:</comment>';\nforeach ($definition->getOptions() as $option) {\n$messages[] = $this->describeInputOption($option, array('name_width' => $nameWidth));\n}\n$messages[] = '';\n}\n\n$output = implode(\"\\n\", $messages);\n\nreturn isset($options['raw_text']) && $options['raw_text'] ? strip_tags($output) : $output;\n}\n\n\n\n\nprotected function describeCommand(Command $command, array $options = array())\n{\n$command->getSynopsis();\n$command->mergeApplicationDefinition(false);\n$messages = array('<comment>Usage:</comment>', ' '.$command->getSynopsis(), '');\n\nif ($command->getAliases()) {\n$messages[] = '<comment>Aliases:</comment> <info>'.implode(', ', $command->getAliases()).'</info>';\n}\n\n$messages[] = $this->describeInputDefinition($command->getNativeDefinition());\n\nif ($help = $command->getProcessedHelp()) {\n$messages[] = '<comment>Help:</comment>';\n$messages[] = ' '.str_replace(\"\\n\", \"\\n \", $help).\"\\n\";\n}\n\n$output = implode(\"\\n\", $messages);\n\nreturn isset($options['raw_text']) && $options['raw_text'] ? strip_tags($output) : $output;\n}\n\n\n\n\nprotected function describeApplication(Application $application, array $options = array())\n{\n$describedNamespace = isset($options['namespace']) ? $options['namespace'] : null;\n$description = new ApplicationDescription($application, $describedNamespace);\n$messages = array();\n\nif (isset($options['raw_text']) && $options['raw_text']) {\n$width = $this->getColumnWidth($description->getCommands());\n\nforeach ($description->getCommands() as $command) {\n$messages[] = sprintf(\"%-${width}s %s\", $command->getName(), $command->getDescription());\n}\n} else {\n$width = $this->getColumnWidth($description->getCommands());\n\n$messages[] = $application->getHelp();\n$messages[] = '';\n\nif ($describedNamespace) {\n$messages[] = sprintf(\"<comment>Available commands for the \\\"%s\\\" namespace:</comment>\", $describedNamespace);\n} else {\n$messages[] = '<comment>Available commands:</comment>';\n}\n\n\n foreach ($description->getNamespaces() as $namespace) {\nif (!$describedNamespace && ApplicationDescription::GLOBAL_NAMESPACE !== $namespace['id']) {\n$messages[] = '<comment>'.$namespace['id'].'</comment>';\n}\n\nforeach ($namespace['commands'] as $name) {\n$messages[] = sprintf(\"  <info>%-${width}s</info> %s\", $name, $description->getCommand($name)->getDescription());\n}\n}\n}\n\n$output = implode(\"\\n\", $messages);\n\nreturn isset($options['raw_text']) && $options['raw_text'] ? strip_tags($output) : $output;\n}\n\n\n\n\n\n\n\n\nprivate function formatDefaultValue($default)\n{\nif (version_compare(PHP_VERSION, '5.4', '<')) {\nreturn str_replace('\\/', '/', json_encode($default));\n}\n\nreturn json_encode($default, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);\n}\n\n\n\n\n\n\nprivate function getColumnWidth(array $commands)\n{\n$width = 0;\nforeach ($commands as $command) {\n$width = strlen($command->getName()) > $width ? strlen($command->getName()) : $width;\n}\n\nreturn $width + 2;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Console\\Descriptor;\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputDefinition;\nuse Symfony\\Component\\Console\\Input\\InputOption;\n\n\n\n\n\n\nclass XmlDescriptor extends Descriptor\n{\n\n\n\nprotected function describeInputArgument(InputArgument $argument, array $options = array())\n{\n$dom = new \\DOMDocument('1.0', 'UTF-8');\n\n$dom->appendChild($objectXML = $dom->createElement('argument'));\n$objectXML->setAttribute('name', $argument->getName());\n$objectXML->setAttribute('is_required', $argument->isRequired() ? 1 : 0);\n$objectXML->setAttribute('is_array', $argument->isArray() ? 1 : 0);\n$objectXML->appendChild($descriptionXML = $dom->createElement('description'));\n$descriptionXML->appendChild($dom->createTextNode($argument->getDescription()));\n\n$objectXML->appendChild($defaultsXML = $dom->createElement('defaults'));\n$defaults = is_array($argument->getDefault()) ? $argument->getDefault() : (is_bool($argument->getDefault()) ? array(var_export($argument->getDefault(), true)) : ($argument->getDefault() ? array($argument->getDefault()) : array()));\nforeach ($defaults as $default) {\n$defaultsXML->appendChild($defaultXML = $dom->createElement('default'));\n$defaultXML->appendChild($dom->createTextNode($default));\n}\n\nreturn $this->output($dom, $options);\n}\n\n\n\n\nprotected function describeInputOption(InputOption $option, array $options = array())\n{\n$dom = new \\DOMDocument('1.0', 'UTF-8');\n\n$dom->appendChild($objectXML = $dom->createElement('option'));\n$objectXML->setAttribute('name', '--'.$option->getName());\n$pos = strpos($option->getShortcut(), '|');\nif (false !== $pos) {\n$objectXML->setAttribute('shortcut', '-'.substr($option->getShortcut(), 0, $pos));\n$objectXML->setAttribute('shortcuts', '-'.implode('|-', explode('|', $option->getShortcut())));\n} else {\n$objectXML->setAttribute('shortcut', $option->getShortcut() ? '-'.$option->getShortcut() : '');\n}\n$objectXML->setAttribute('accept_value', $option->acceptValue() ? 1 : 0);\n$objectXML->setAttribute('is_value_required', $option->isValueRequired() ? 1 : 0);\n$objectXML->setAttribute('is_multiple', $option->isArray() ? 1 : 0);\n$objectXML->appendChild($descriptionXML = $dom->createElement('description'));\n$descriptionXML->appendChild($dom->createTextNode($option->getDescription()));\n\nif ($option->acceptValue()) {\n$defaults = is_array($option->getDefault()) ? $option->getDefault() : (is_bool($option->getDefault()) ? array(var_export($option->getDefault(), true)) : ($option->getDefault() ? array($option->getDefault()) : array()));\n$objectXML->appendChild($defaultsXML = $dom->createElement('defaults'));\n\nif (!empty($defaults)) {\nforeach ($defaults as $default) {\n$defaultsXML->appendChild($defaultXML = $dom->createElement('default'));\n$defaultXML->appendChild($dom->createTextNode($default));\n}\n}\n}\n\nreturn $this->output($dom, $options);\n}\n\n\n\n\nprotected function describeInputDefinition(InputDefinition $definition, array $options = array())\n{\n$dom = new \\DOMDocument('1.0', 'UTF-8');\n$dom->appendChild($definitionXML = $dom->createElement('definition'));\n\n$definitionXML->appendChild($argumentsXML = $dom->createElement('arguments'));\nforeach ($definition->getArguments() as $argument) {\n$this->appendDocument($argumentsXML, $this->describeInputArgument($argument, array('as_dom' => true)));\n}\n\n$definitionXML->appendChild($optionsXML = $dom->createElement('options'));\nforeach ($definition->getOptions() as $option) {\n$this->appendDocument($optionsXML, $this->describeInputOption($option, array('as_dom' => true)));\n}\n\nreturn $this->output($dom, $options);\n}\n\n\n\n\nprotected function describeCommand(Command $command, array $options = array())\n{\n$dom = new \\DOMDocument('1.0', 'UTF-8');\n$dom->appendChild($commandXML = $dom->createElement('command'));\n\n$command->getSynopsis();\n$command->mergeApplicationDefinition(false);\n\n$commandXML->setAttribute('id', $command->getName());\n$commandXML->setAttribute('name', $command->getName());\n\n$commandXML->appendChild($usageXML = $dom->createElement('usage'));\n$usageXML->appendChild($dom->createTextNode(sprintf($command->getSynopsis(), '')));\n\n$commandXML->appendChild($descriptionXML = $dom->createElement('description'));\n$descriptionXML->appendChild($dom->createTextNode(str_replace(\"\\n\", \"\\n \", $command->getDescription())));\n\n$commandXML->appendChild($helpXML = $dom->createElement('help'));\n$helpXML->appendChild($dom->createTextNode(str_replace(\"\\n\", \"\\n \", $command->getProcessedHelp())));\n\n$commandXML->appendChild($aliasesXML = $dom->createElement('aliases'));\nforeach ($command->getAliases() as $alias) {\n$aliasesXML->appendChild($aliasXML = $dom->createElement('alias'));\n$aliasXML->appendChild($dom->createTextNode($alias));\n}\n\n$definitionXML = $this->describeInputDefinition($command->getNativeDefinition(), array('as_dom' => true));\n$this->appendDocument($commandXML, $definitionXML->getElementsByTagName('definition')->item(0));\n\nreturn $this->output($dom, $options);\n}\n\n\n\n\nprotected function describeApplication(Application $application, array $options = array())\n{\n$dom = new \\DOMDocument('1.0', 'UTF-8');\n$dom->appendChild($rootXml = $dom->createElement('symfony'));\n$rootXml->appendChild($commandsXML = $dom->createElement('commands'));\n\n$describedNamespace = isset($options['namespace']) ? $options['namespace'] : null;\n$description = new ApplicationDescription($application, $describedNamespace);\n\nif ($describedNamespace) {\n$commandsXML->setAttribute('namespace', $describedNamespace);\n}\n\nforeach ($description->getCommands() as $command) {\n$this->appendDocument($commandsXML, $this->describeCommand($command, array('as_dom' => true)));\n}\n\nif (!$describedNamespace) {\n$rootXml->appendChild($namespacesXML = $dom->createElement('namespaces'));\n\nforeach ($description->getNamespaces() as $namespace) {\n$namespacesXML->appendChild($namespaceArrayXML = $dom->createElement('namespace'));\n$namespaceArrayXML->setAttribute('id', $namespace['id']);\n\nforeach ($namespace['commands'] as $name) {\n$namespaceArrayXML->appendChild($commandXML = $dom->createElement('command'));\n$commandXML->appendChild($dom->createTextNode($name));\n}\n}\n}\n\nreturn $this->output($dom, $options);\n}\n\n\n\n\n\n\n\nprivate function appendDocument(\\DOMNode $parentNode, \\DOMNode $importedParent)\n{\nforeach ($importedParent->childNodes as $childNode) {\n$parentNode->appendChild($parentNode->ownerDocument->importNode($childNode, true));\n}\n}\n\n\n\n\n\n\n\n\n\nprivate function output(\\DOMDocument $dom, array $options)\n{\nif (isset($options['as_dom']) && $options['as_dom']) {\nreturn $dom;\n}\n\n$dom->formatOutput = true;\n\nreturn $dom->saveXML();\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Console\\Descriptor;\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputDefinition;\nuse Symfony\\Component\\Console\\Input\\InputOption;\n\n\n\n\n\n\nclass MarkdownDescriptor extends Descriptor\n{\n\n\n\nprotected function describeInputArgument(InputArgument $argument, array $options = array())\n{\nreturn '**'.$argument->getName().':**'.\"\\n\\n\"\n.'* Name: '.($argument->getName() ?: '<none>').\"\\n\"\n.'* Is required: '.($argument->isRequired() ? 'yes' : 'no').\"\\n\"\n.'* Is array: '.($argument->isArray() ? 'yes' : 'no').\"\\n\"\n.'* Description: '.($argument->getDescription() ?: '<none>').\"\\n\"\n.'* Default: `'.str_replace(\"\\n\", '', var_export($argument->getDefault(), true)).'`';\n}\n\n\n\n\nprotected function describeInputOption(InputOption $option, array $options = array())\n{\nreturn '**'.$option->getName().':**'.\"\\n\\n\"\n.'* Name: `--'.$option->getName().'`'.\"\\n\"\n.'* Shortcut: '.($option->getShortcut() ? '`-'.implode('|-', explode('|', $option->getShortcut())).'`' : '<none>').\"\\n\"\n.'* Accept value: '.($option->acceptValue() ? 'yes' : 'no').\"\\n\"\n.'* Is value required: '.($option->isValueRequired() ? 'yes' : 'no').\"\\n\"\n.'* Is multiple: '.($option->isArray() ? 'yes' : 'no').\"\\n\"\n.'* Description: '.($option->getDescription() ?: '<none>').\"\\n\"\n.'* Default: `'.str_replace(\"\\n\", '', var_export($option->getDefault(), true)).'`';\n}\n\n\n\n\nprotected function describeInputDefinition(InputDefinition $definition, array $options = array())\n{\n$blocks = array();\n\nif (count($definition->getArguments()) > 0) {\n$blocks[] = '### Arguments:';\nforeach ($definition->getArguments() as $argument) {\n$blocks[] = $this->describeInputArgument($argument);\n}\n}\n\nif (count($definition->getOptions()) > 0) {\n$blocks[] = '### Options:';\nforeach ($definition->getOptions() as $option) {\n$blocks[] = $this->describeInputOption($option);\n}\n}\n\nreturn implode(\"\\n\\n\", $blocks);\n}\n\n\n\n\nprotected function describeCommand(Command $command, array $options = array())\n{\n$command->getSynopsis();\n$command->mergeApplicationDefinition(false);\n\n$markdown = $command->getName().\"\\n\"\n.str_repeat('-', strlen($command->getName())).\"\\n\\n\"\n.'* Description: '.($command->getDescription() ?: '<none>').\"\\n\"\n.'* Usage: `'.$command->getSynopsis().'`'.\"\\n\"\n.'* Aliases: '.(count($command->getAliases()) ? '`'.implode('`, `', $command->getAliases()).'`' : '<none>');\n\nif ($help = $command->getProcessedHelp()) {\n$markdown .= \"\\n\\n\".$help;\n}\n\nif ($definitionMarkdown = $this->describeInputDefinition($command->getNativeDefinition())) {\n$markdown .= \"\\n\\n\".$definitionMarkdown;\n}\n\nreturn $markdown;\n}\n\n\n\n\nprotected function describeApplication(Application $application, array $options = array())\n{\n$describedNamespace = isset($options['namespace']) ? $options['namespace'] : null;\n$description = new ApplicationDescription($application, $describedNamespace);\n$blocks = array($application->getName().\"\\n\".str_repeat('=', strlen($application->getName())));\n\nforeach ($description->getNamespaces() as $namespace) {\nif (ApplicationDescription::GLOBAL_NAMESPACE !== $namespace['id']) {\n$blocks[] = '**'.$namespace['id'].':**';\n}\n\n$blocks[] = implode(\"\\n\", array_map(function ($commandName) {\nreturn '* '.$commandName;\n} , $namespace['commands']));\n}\n\nforeach ($description->getCommands() as $command) {\n$blocks[] = $this->describeCommand($command);\n}\n\nreturn implode(\"\\n\\n\", $blocks);\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Console\\Descriptor;\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Command\\Command;\n\n\n\n\nclass ApplicationDescription\n{\nconst GLOBAL_NAMESPACE = '_global';\n\n\n\n\nprivate $application;\n\n\n\n\nprivate $namespace;\n\n\n\n\nprivate $namespaces;\n\n\n\n\nprivate $commands;\n\n\n\n\nprivate $aliases;\n\n\n\n\n\n\n\npublic function __construct(Application $application, $namespace = null)\n{\n$this->application = $application;\n$this->namespace = $namespace;\n}\n\n\n\n\npublic function getNamespaces()\n{\nif (null === $this->namespaces) {\n$this->inspectApplication();\n}\n\nreturn $this->namespaces;\n}\n\n\n\n\npublic function getCommands()\n{\nif (null === $this->commands) {\n$this->inspectApplication();\n}\n\nreturn $this->commands;\n}\n\n\n\n\n\n\n\n\npublic function getCommand($name)\n{\nif (!isset($this->commands[$name]) && !isset($this->aliases[$name])) {\nthrow new \\InvalidArgumentException(sprintf('Command %s does not exist.', $name));\n}\n\nreturn isset($this->commands[$name]) ? $this->commands[$name] : $this->aliases[$name];\n}\n\nprivate function inspectApplication()\n{\n$this->commands = array();\n$this->namespaces = array();\n\n$all = $this->application->all($this->namespace ? $this->application->findNamespace($this->namespace) : null);\nforeach ($this->sortCommands($all) as $namespace => $commands) {\n$names = array();\n\n\nforeach ($commands as $name => $command) {\nif (!$command->getName()) {\ncontinue;\n}\n\nif ($command->getName() === $name) {\n$this->commands[$name] = $command;\n} else {\n$this->aliases[$name] = $command;\n}\n\n$names[] = $name;\n}\n\n$this->namespaces[$namespace] = array('id' => $namespace, 'commands' => $names);\n}\n}\n\n\n\n\n\n\nprivate function sortCommands(array $commands)\n{\n$namespacedCommands = array();\nforeach ($commands as $name => $command) {\n$key = $this->application->extractNamespace($name, 1);\nif (!$key) {\n$key = '_global';\n}\n\n$namespacedCommands[$key][$name] = $command;\n}\nksort($namespacedCommands);\n\nforeach ($namespacedCommands as &$commands) {\nksort($commands);\n}\n\nreturn $namespacedCommands;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Console\\Descriptor;\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputDefinition;\nuse Symfony\\Component\\Console\\Input\\InputOption;\n\n\n\n\nabstract class Descriptor implements DescriptorInterface\n{\npublic function describe($object, array $options = array())\n{\nswitch (true) {\ncase $object instanceof InputArgument:\nreturn $this->describeInputArgument($object, $options);\ncase $object instanceof InputOption:\nreturn $this->describeInputOption($object, $options);\ncase $object instanceof InputDefinition:\nreturn $this->describeInputDefinition($object, $options);\ncase $object instanceof Command:\nreturn $this->describeCommand($object, $options);\ncase $object instanceof Application:\nreturn $this->describeApplication($object, $options);\n}\n\nthrow new \\InvalidArgumentException(sprintf('Object of type \"%s\" is not describable.', get_class($object)));\n}\n\n\n\n\n\n\n\n\n\nabstract protected function describeInputArgument(InputArgument $argument, array $options = array());\n\n\n\n\n\n\n\n\n\nabstract protected function describeInputOption(InputOption $option, array $options = array());\n\n\n\n\n\n\n\n\n\nabstract protected function describeInputDefinition(InputDefinition $definition, array $options = array());\n\n\n\n\n\n\n\n\n\nabstract protected function describeCommand(Command $command, array $options = array());\n\n\n\n\n\n\n\n\n\nabstract protected function describeApplication(Application $application, array $options = array());\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Console\\Descriptor;\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputDefinition;\nuse Symfony\\Component\\Console\\Input\\InputOption;\n\n\n\n\n\n\nclass JsonDescriptor extends Descriptor\n{\n\n\n\nprotected function describeInputArgument(InputArgument $argument, array $options = array())\n{\nreturn $this->output(array(\n'name' => $argument->getName(),\n'is_required' => $argument->isRequired(),\n'is_array' => $argument->isArray(),\n'description' => $argument->getDescription(),\n'default' => $argument->getDefault(),\n), $options);\n}\n\n\n\n\nprotected function describeInputOption(InputOption $option, array $options = array())\n{\nreturn $this->output(array(\n'name' => '--'.$option->getName(),\n'shortcut' => $option->getShortcut() ? '-'.implode('|-', explode('|', $option->getShortcut())) : '',\n'accept_value' => $option->acceptValue(),\n'is_value_required' => $option->isValueRequired(),\n'is_multiple' => $option->isArray(),\n'description' => $option->getDescription(),\n'default' => $option->getDefault(),\n), $options);\n}\n\n\n\n\nprotected function describeInputDefinition(InputDefinition $definition, array $options = array())\n{\n$inputArguments = array();\nforeach ($definition->getArguments() as $name => $argument) {\n$inputArguments[$name] = $this->describeInputArgument($argument, array('as_array' => true));\n}\n\n$inputOptions = array();\nforeach ($definition->getOptions() as $name => $option) {\n$inputOptions[$name] = $this->describeInputOption($option, array('as_array' => true));\n}\n\nreturn $this->output(array('arguments' => $inputArguments, 'options' => $inputOptions), $options);\n}\n\n\n\n\nprotected function describeCommand(Command $command, array $options = array())\n{\n$command->getSynopsis();\n$command->mergeApplicationDefinition(false);\n\nreturn $this->output(array(\n'name' => $command->getName(),\n'usage' => $command->getSynopsis(),\n'description' => $command->getDescription(),\n'help' => $command->getProcessedHelp(),\n'aliases' => $command->getAliases(),\n'definition' => $this->describeInputDefinition($command->getNativeDefinition(), array('as_array' => true)),\n), $options);\n}\n\n\n\n\nprotected function describeApplication(Application $application, array $options = array())\n{\n$describedNamespace = isset($options['namespace']) ? $options['namespace'] : null;\n$description = new ApplicationDescription($application, $describedNamespace);\n$commands = array();\n\nforeach ($description->getCommands() as $command) {\n$commands[] = $this->describeCommand($command, array('as_array' => true));\n}\n\n$data = $describedNamespace\n? array('commands' => $commands, 'namespace' => $describedNamespace)\n: array('commands' => $commands, 'namespaces' => array_values($description->getNamespaces()));\n\nreturn $this->output($data, $options);\n}\n\n\n\n\n\n\n\n\n\nprivate function output(array $data, array $options)\n{\nif (isset($options['as_array']) && $options['as_array']) {\nreturn $data;\n}\n\nreturn json_encode($data, isset($options['json_encoding']) ? $options['json_encoding'] : 0);\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Console\\Helper;\n\n\n\n\n\n\n\n\ninterface HelperInterface\n{\n\n\n\n\n\n\n\npublic function setHelperSet(HelperSet $helperSet = null);\n\n\n\n\n\n\n\n\npublic function getHelperSet();\n\n\n\n\n\n\n\n\npublic function getName();\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Console\\Helper;\n\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse InvalidArgumentException;\n\n\n\n\n\n\nclass TableHelper extends Helper\n{\nconst LAYOUT_DEFAULT = 0;\nconst LAYOUT_BORDERLESS = 1;\n\n\n\n\n\n\nprivate $headers = array();\n\n\n\n\n\n\nprivate $rows = array();\n\n\n private $paddingChar;\nprivate $horizontalBorderChar;\nprivate $verticalBorderChar;\nprivate $crossingChar;\nprivate $cellHeaderFormat;\nprivate $cellRowFormat;\nprivate $borderFormat;\nprivate $padType;\n\n\n\n\n\n\nprivate $columnWidths = array();\n\n\n\n\n\n\nprivate $numberOfColumns;\n\n\n\n\nprivate $output;\n\npublic function __construct()\n{\n$this->setLayout(self::LAYOUT_DEFAULT);\n}\n\n\n\n\n\n\n\n\npublic function setLayout($layout)\n{\nswitch ($layout) {\ncase self::LAYOUT_BORDERLESS:\n$this\n->setPaddingChar(' ')\n->setHorizontalBorderChar('=')\n->setVerticalBorderChar(' ')\n->setCrossingChar(' ')\n->setCellHeaderFormat('<info>%s</info>')\n->setCellRowFormat('<comment>%s</comment>')\n->setBorderFormat('%s')\n->setPadType(STR_PAD_RIGHT)\n;\nbreak;\n\ncase self::LAYOUT_DEFAULT:\n$this\n->setPaddingChar(' ')\n->setHorizontalBorderChar('-')\n->setVerticalBorderChar('|')\n->setCrossingChar('+')\n->setCellHeaderFormat('<info>%s</info>')\n->setCellRowFormat('<comment>%s</comment>')\n->setBorderFormat('%s')\n->setPadType(STR_PAD_RIGHT)\n;\nbreak;\n\ndefault:\nthrow new InvalidArgumentException(sprintf('Invalid table layout \"%s\".', $layout));\nbreak;\n};\n\nreturn $this;\n}\n\npublic function setHeaders(array $headers)\n{\n$this->headers = array_values($headers);\n\nreturn $this;\n}\n\npublic function setRows(array $rows)\n{\n$this->rows = array();\n\nreturn $this->addRows($rows);\n}\n\npublic function addRows(array $rows)\n{\nforeach ($rows as $row) {\n$this->addRow($row);\n}\n\nreturn $this;\n}\n\npublic function addRow(array $row)\n{\n$this->rows[] = array_values($row);\n\nreturn $this;\n}\n\npublic function setRow($column, array $row)\n{\n$this->rows[$column] = $row;\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\npublic function setPaddingChar($paddingChar)\n{\n$this->paddingChar = $paddingChar;\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\npublic function setHorizontalBorderChar($horizontalBorderChar)\n{\n$this->horizontalBorderChar = $horizontalBorderChar;\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\npublic function setVerticalBorderChar($verticalBorderChar)\n{\n$this->verticalBorderChar = $verticalBorderChar;\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\npublic function setCrossingChar($crossingChar)\n{\n$this->crossingChar = $crossingChar;\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\npublic function setCellHeaderFormat($cellHeaderFormat)\n{\n$this->cellHeaderFormat = $cellHeaderFormat;\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\npublic function setCellRowFormat($cellRowFormat)\n{\n$this->cellRowFormat = $cellRowFormat;\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\npublic function setBorderFormat($borderFormat)\n{\n$this->borderFormat = $borderFormat;\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\npublic function setPadType($padType)\n{\n$this->padType = $padType;\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npublic function render(OutputInterface $output)\n{\n$this->output = $output;\n\n$this->renderRowSeparator();\n$this->renderRow($this->headers, $this->cellHeaderFormat);\nif (!empty($this->headers)) {\n$this->renderRowSeparator();\n}\nforeach ($this->rows as $row) {\n$this->renderRow($row, $this->cellRowFormat);\n}\nif (!empty($this->rows)) {\n$this->renderRowSeparator();\n}\n\n$this->cleanup();\n}\n\n\n\n\n\n\nprivate function renderRowSeparator()\n{\nif (0 === $count = $this->getNumberOfColumns()) {\nreturn;\n}\n\n$markup = $this->crossingChar;\nfor ($column = 0; $column < $count; $column++) {\n$markup .= str_repeat($this->horizontalBorderChar, $this->getColumnWidth($column))\n.$this->crossingChar\n;\n}\n\n$this->output->writeln(sprintf($this->borderFormat, $markup));\n}\n\n\n\n\nprivate function renderColumnSeparator()\n{\n$this->output->write(sprintf($this->borderFormat, $this->verticalBorderChar));\n}\n\n\n\n\n\n\n\n\n\nprivate function renderRow(array $row, $cellFormat)\n{\nif (empty($row)) {\nreturn;\n}\n\n$this->renderColumnSeparator();\nfor ($column = 0, $count = $this->getNumberOfColumns(); $column < $count; $column++) {\n$this->renderCell($row, $column, $cellFormat);\n$this->renderColumnSeparator();\n}\n$this->output->writeln('');\n}\n\n\n\n\n\n\n\n\nprivate function renderCell(array $row, $column, $cellFormat)\n{\n$cell = isset($row[$column]) ? $row[$column] : '';\n\n$this->output->write(sprintf(\n$cellFormat,\nstr_pad(\n$this->paddingChar.$cell.$this->paddingChar,\n$this->getColumnWidth($column),\n$this->paddingChar,\n$this->padType\n)\n));\n}\n\n\n\n\n\n\nprivate function getNumberOfColumns()\n{\nif (null !== $this->numberOfColumns) {\nreturn $this->numberOfColumns;\n}\n\n$columns = array(0);\n$columns[] = count($this->headers);\nforeach ($this->rows as $row) {\n$columns[] = count($row);\n}\n\nreturn $this->numberOfColumns = max($columns);\n}\n\n\n\n\n\n\n\n\nprivate function getColumnWidth($column)\n{\nif (isset($this->columnWidths[$column])) {\nreturn $this->columnWidths[$column];\n}\n\n$lengths = array(0);\n$lengths[] = $this->getCellWidth($this->headers, $column);\nforeach ($this->rows as $row) {\n$lengths[] = $this->getCellWidth($row, $column);\n}\n\nreturn $this->columnWidths[$column] = max($lengths) + 2;\n}\n\n\n\n\n\n\n\n\n\nprivate function getCellWidth(array $row, $column)\n{\nif ($column < 0) {\nreturn 0;\n}\n\nif (isset($row[$column])) {\nreturn $this->strlen($row[$column]);\n}\n\nreturn $this->getCellWidth($row, $column - 1);\n}\n\n\n\n\nprivate function cleanup()\n{\n$this->columnWidths = array();\n$this->numberOfColumns = null;\n}\n\n\n\n\npublic function getName()\n{\nreturn 'table';\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Console\\Helper;\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Descriptor\\DescriptorInterface;\nuse Symfony\\Component\\Console\\Descriptor\\JsonDescriptor;\nuse Symfony\\Component\\Console\\Descriptor\\MarkdownDescriptor;\nuse Symfony\\Component\\Console\\Descriptor\\TextDescriptor;\nuse Symfony\\Component\\Console\\Descriptor\\XmlDescriptor;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputDefinition;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n\n\n\n\n\nclass DescriptorHelper extends Helper\n{\n\n\n\nprivate $descriptors = array();\n\n\n\n\npublic function __construct()\n{\n$this\n->register('txt', new TextDescriptor())\n->register('xml', new XmlDescriptor())\n->register('json', new JsonDescriptor())\n->register('md', new MarkdownDescriptor())\n;\n}\n\n\n\n\n\n\n\n\n\npublic function describe(OutputInterface $output, $object, $format = null, $raw = false)\n{\n$options = array('raw_text' => $raw, 'format' => $format ?: 'txt');\n$type = !$raw && 'txt' === $options['format'] ? OutputInterface::OUTPUT_NORMAL : OutputInterface::OUTPUT_RAW;\n\nif (!isset($this->descriptors[$options['format']])) {\nthrow new \\InvalidArgumentException(sprintf('Unsupported format \"%s\".', $options['format']));\n}\n\n$descriptor = $this->descriptors[$options['format']];\n\n$output->writeln($descriptor->describe($object, $options), $type);\n}\n\n\n\n\n\n\n\n\n\npublic function register($format, DescriptorInterface $descriptor)\n{\n$this->descriptors[$format] = $descriptor;\n\nreturn $this;\n}\n\n\n\n\npublic function getName()\n{\nreturn 'descriptor';\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Console\\Helper;\n\nuse Symfony\\Component\\Console\\Formatter\\OutputFormatter;\n\n\n\n\n\n\nclass FormatterHelper extends Helper\n{\n\n\n\n\n\n\n\n\n\npublic function formatSection($section, $message, $style = 'info')\n{\nreturn sprintf('<%s>[%s]</%s> %s', $style, $section, $style, $message);\n}\n\n\n\n\n\n\n\n\n\n\npublic function formatBlock($messages, $style, $large = false)\n{\n$messages = (array) $messages;\n\n$len = 0;\n$lines = array();\nforeach ($messages as $message) {\n$message = OutputFormatter::escape($message);\n$lines[] = sprintf($large ? '  %s  ' : ' %s ', $message);\n$len = max($this->strlen($message) + ($large ? 4 : 2), $len);\n}\n\n$messages = $large ? array(str_repeat(' ', $len)) : array();\nforeach ($lines as $line) {\n$messages[] = $line.str_repeat(' ', $len - $this->strlen($line));\n}\nif ($large) {\n$messages[] = str_repeat(' ', $len);\n}\n\nforeach ($messages as &$message) {\n$message = sprintf('<%s>%s</%s>', $style, $message, $style);\n}\n\nreturn implode(\"\\n\", $messages);\n}\n\n\n\n\npublic function getName()\n{\nreturn 'formatter';\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Console\\Helper;\n\nuse Symfony\\Component\\Console\\Command\\Command;\n\n\n\n\n\n\nclass HelperSet\n{\nprivate $helpers;\nprivate $command;\n\n\n\n\n\n\npublic function __construct(array $helpers = array())\n{\n$this->helpers = array();\nforeach ($helpers as $alias => $helper) {\n$this->set($helper, is_int($alias) ? null : $alias);\n}\n}\n\n\n\n\n\n\n\npublic function set(HelperInterface $helper, $alias = null)\n{\n$this->helpers[$helper->getName()] = $helper;\nif (null !== $alias) {\n$this->helpers[$alias] = $helper;\n}\n\n$helper->setHelperSet($this);\n}\n\n\n\n\n\n\n\n\npublic function has($name)\n{\nreturn isset($this->helpers[$name]);\n}\n\n\n\n\n\n\n\n\n\n\npublic function get($name)\n{\nif (!$this->has($name)) {\nthrow new \\InvalidArgumentException(sprintf('The helper \"%s\" is not defined.', $name));\n}\n\nreturn $this->helpers[$name];\n}\n\n\n\n\n\n\npublic function setCommand(Command $command = null)\n{\n$this->command = $command;\n}\n\n\n\n\n\n\npublic function getCommand()\n{\nreturn $this->command;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Console\\Helper;\n\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle;\n\n\n\n\n\n\nclass DialogHelper extends Helper\n{\nprivate $inputStream;\nprivate static $shell;\nprivate static $stty;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npublic function select(OutputInterface $output, $question, $choices, $default = null, $attempts = false, $errorMessage = 'Value \"%s\" is invalid', $multiselect = false)\n{\n$width = max(array_map('strlen', array_keys($choices)));\n\n$messages = (array) $question;\nforeach ($choices as $key => $value) {\n$messages[] = sprintf(\"  [<info>%-${width}s</info>] %s\", $key, $value);\n}\n\n$output->writeln($messages);\n\n$result = $this->askAndValidate($output, '> ', function ($picked) use ($choices, $errorMessage, $multiselect) {\n\n $selectedChoices = str_replace(\" \", \"\", $picked);\n\nif ($multiselect) {\n\n if(!preg_match('/^[a-zA-Z0-9_-]+(?:,[a-zA-Z0-9_-]+)*$/', $selectedChoices, $matches)) {\nthrow new \\InvalidArgumentException(sprintf($errorMessage, $picked));\n}\n$selectedChoices = explode(\",\", $selectedChoices);\n} else {\n$selectedChoices = array($picked);\n}\n\n$multiselectChoices = array();\n\nforeach ($selectedChoices as $value) {\nif (empty($choices[$value])) {\nthrow new \\InvalidArgumentException(sprintf($errorMessage, $value));\n}\narray_push($multiselectChoices, $value);\n}\n\nif ($multiselect){\nreturn $multiselectChoices;\n} \n\nreturn $picked;\n}, $attempts, $default);\n\nreturn $result;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\npublic function ask(OutputInterface $output, $question, $default = null, array $autocomplete = null)\n{\n$output->write($question);\n\n$inputStream = $this->inputStream ?: STDIN;\n\nif (null === $autocomplete || !$this->hasSttyAvailable()) {\n$ret = fgets($inputStream, 4096);\nif (false === $ret) {\nthrow new \\RuntimeException('Aborted');\n}\n$ret = trim($ret);\n} else {\n$ret = '';\n\n$i = 0;\n$ofs = -1;\n$matches = $autocomplete;\n$numMatches = count($matches);\n\n$sttyMode = shell_exec('stty -g');\n\n\n shell_exec('stty -icanon -echo');\n\n\n $output->getFormatter()->setStyle('hl', new OutputFormatterStyle('black', 'white'));\n\n\n while (!feof($inputStream)) {\n$c = fread($inputStream, 1);\n\n\n if (\"\\177\" === $c) {\nif (0 === $numMatches && 0 !== $i) {\n$i--;\n\n $output->write(\"\\033[1D\");\n}\n\nif ($i === 0) {\n$ofs = -1;\n$matches = $autocomplete;\n$numMatches = count($matches);\n} else {\n$numMatches = 0;\n}\n\n\n $ret = substr($ret, 0, $i);\n} elseif (\"\\033\" === $c) { \n $c .= fread($inputStream, 2);\n\n\n if ('A' === $c[2] || 'B' === $c[2]) {\nif ('A' === $c[2] && -1 === $ofs) {\n$ofs = 0;\n}\n\nif (0 === $numMatches) {\ncontinue;\n}\n\n$ofs += ('A' === $c[2]) ? -1 : 1;\n$ofs = ($numMatches + $ofs) % $numMatches;\n}\n} elseif (ord($c) < 32) {\nif (\"\\t\" === $c || \"\\n\" === $c) {\nif ($numMatches > 0 && -1 !== $ofs) {\n$ret = $matches[$ofs];\n\n $output->write(substr($ret, $i));\n$i = strlen($ret);\n}\n\nif (\"\\n\" === $c) {\n$output->write($c);\nbreak;\n}\n\n$numMatches = 0;\n}\n\ncontinue;\n} else {\n$output->write($c);\n$ret .= $c;\n$i++;\n\n$numMatches = 0;\n$ofs = 0;\n\nforeach ($autocomplete as $value) {\n\n if (0 === strpos($value, $ret) && $i !== strlen($value)) {\n$matches[$numMatches++] = $value;\n}\n}\n}\n\n\n $output->write(\"\\033[K\");\n\nif ($numMatches > 0 && -1 !== $ofs) {\n\n $output->write(\"\\0337\");\n\n $output->write('<hl>'.substr($matches[$ofs], $i).'</hl>');\n\n $output->write(\"\\0338\");\n}\n}\n\n\n shell_exec(sprintf('stty %s', $sttyMode));\n}\n\nreturn strlen($ret) > 0 ? $ret : $default;\n}\n\n\n\n\n\n\n\n\n\n\n\n\npublic function askConfirmation(OutputInterface $output, $question, $default = true)\n{\n$answer = 'z';\nwhile ($answer && !in_array(strtolower($answer[0]), array('y', 'n'))) {\n$answer = $this->ask($output, $question);\n}\n\nif (false === $default) {\nreturn $answer && 'y' == strtolower($answer[0]);\n}\n\nreturn !$answer || 'y' == strtolower($answer[0]);\n}\n\n\n\n\n\n\n\n\n\n\n\n\npublic function askHiddenResponse(OutputInterface $output, $question, $fallback = true)\n{\nif (defined('PHP_WINDOWS_VERSION_BUILD')) {\n$exe = __DIR__.'/../Resources/bin/hiddeninput.exe';\n\n\n if ('phar:' === substr(__FILE__, 0, 5)) {\n$tmpExe = sys_get_temp_dir().'/hiddeninput.exe';\ncopy($exe, $tmpExe);\n$exe = $tmpExe;\n}\n\n$output->write($question);\n$value = rtrim(shell_exec($exe));\n$output->writeln('');\n\nif (isset($tmpExe)) {\nunlink($tmpExe);\n}\n\nreturn $value;\n}\n\nif ($this->hasSttyAvailable()) {\n$output->write($question);\n\n$sttyMode = shell_exec('stty -g');\n\nshell_exec('stty -echo');\n$value = fgets($this->inputStream ?: STDIN, 4096);\nshell_exec(sprintf('stty %s', $sttyMode));\n\nif (false === $value) {\nthrow new \\RuntimeException('Aborted');\n}\n\n$value = trim($value);\n$output->writeln('');\n\nreturn $value;\n}\n\nif (false !== $shell = $this->getShell()) {\n$output->write($question);\n$readCmd = $shell === 'csh' ? 'set mypassword = $<' : 'read -r mypassword';\n$command = sprintf(\"/usr/bin/env %s -c 'stty -echo; %s; stty echo; echo \\$mypassword'\", $shell, $readCmd);\n$value = rtrim(shell_exec($command));\n$output->writeln('');\n\nreturn $value;\n}\n\nif ($fallback) {\nreturn $this->ask($output, $question);\n}\n\nthrow new \\RuntimeException('Unable to hide the response');\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npublic function askAndValidate(OutputInterface $output, $question, $validator, $attempts = false, $default = null, array $autocomplete = null)\n{\n$that = $this;\n\n$interviewer = function() use ($output, $question, $default, $autocomplete, $that) {\nreturn $that->ask($output, $question, $default, $autocomplete);\n};\n\nreturn $this->validateAttempts($interviewer, $output, $validator, $attempts);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npublic function askHiddenResponseAndValidate(OutputInterface $output, $question, $validator, $attempts = false, $fallback = true)\n{\n$that = $this;\n\n$interviewer = function() use ($output, $question, $fallback, $that) {\nreturn $that->askHiddenResponse($output, $question, $fallback);\n};\n\nreturn $this->validateAttempts($interviewer, $output, $validator, $attempts);\n}\n\n\n\n\n\n\n\n\npublic function setInputStream($stream)\n{\n$this->inputStream = $stream;\n}\n\n\n\n\n\n\npublic function getInputStream()\n{\nreturn $this->inputStream;\n}\n\n\n\n\npublic function getName()\n{\nreturn 'dialog';\n}\n\n\n\n\n\n\nprivate function getShell()\n{\nif (null !== self::$shell) {\nreturn self::$shell;\n}\n\nself::$shell = false;\n\nif (file_exists('/usr/bin/env')) {\n\n $test = \"/usr/bin/env %s -c 'echo OK' 2> /dev/null\";\nforeach (array('bash', 'zsh', 'ksh', 'csh') as $sh) {\nif ('OK' === rtrim(shell_exec(sprintf($test, $sh)))) {\nself::$shell = $sh;\nbreak;\n}\n}\n}\n\nreturn self::$shell;\n}\n\nprivate function hasSttyAvailable()\n{\nif (null !== self::$stty) {\nreturn self::$stty;\n}\n\nexec('stty 2>&1', $output, $exitcode);\n\nreturn self::$stty = $exitcode === 0;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nprivate function validateAttempts($interviewer, OutputInterface $output, $validator, $attempts)\n{\n$error = null;\nwhile (false === $attempts || $attempts--) {\nif (null !== $error) {\n$output->writeln($this->getHelperSet()->get('formatter')->formatBlock($error->getMessage(), 'error'));\n}\n\ntry {\nreturn call_user_func($validator, $interviewer());\n} catch (\\Exception $error) {\n}\n}\n\nthrow $error;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Console\\Helper;\n\n\n\n\n\n\nabstract class Helper implements HelperInterface\n{\nprotected $helperSet = null;\n\n\n\n\n\n\npublic function setHelperSet(HelperSet $helperSet = null)\n{\n$this->helperSet = $helperSet;\n}\n\n\n\n\n\n\npublic function getHelperSet()\n{\nreturn $this->helperSet;\n}\n\n\n\n\n\n\n\n\nprotected function strlen($string)\n{\nif (!function_exists('mb_strlen')) {\nreturn strlen($string);\n}\n\nif (false === $encoding = mb_detect_encoding($string)) {\nreturn strlen($string);\n}\n\nreturn mb_strlen($string, $encoding);\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Console\\Helper;\n\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n\n\n\n\n\n\nclass ProgressHelper extends Helper\n{\nconst FORMAT_QUIET = ' %percent%%';\nconst FORMAT_NORMAL = ' %current%/%max% [%bar%] %percent%%';\nconst FORMAT_VERBOSE = ' %current%/%max% [%bar%] %percent%% Elapsed: %elapsed%';\nconst FORMAT_QUIET_NOMAX = ' %current%';\nconst FORMAT_NORMAL_NOMAX = ' %current% [%bar%]';\nconst FORMAT_VERBOSE_NOMAX = ' %current% [%bar%] Elapsed: %elapsed%';\n\n\n private $barWidth = 28;\nprivate $barChar = '=';\nprivate $emptyBarChar = '-';\nprivate $progressChar = '>';\nprivate $format = null;\nprivate $redrawFreq = 1;\n\nprivate $lastMessagesLength;\nprivate $barCharOriginal;\n\n\n\n\nprivate $output;\n\n\n\n\n\n\nprivate $current;\n\n\n\n\n\n\nprivate $max;\n\n\n\n\n\n\nprivate $startTime;\n\n\n\n\n\n\nprivate $defaultFormatVars = array(\n'current',\n'max',\n'bar',\n'percent',\n'elapsed',\n);\n\n\n\n\n\n\nprivate $formatVars;\n\n\n\n\n\n\nprivate $widths = array(\n'current' => 4,\n'max' => 4,\n'percent' => 3,\n'elapsed' => 6,\n);\n\n\n\n\n\n\nprivate $timeFormats = array(\narray(0, '???'),\narray(2, '1 sec'),\narray(59, 'secs', 1),\narray(60, '1 min'),\narray(3600, 'mins', 60),\narray(5400, '1 hr'),\narray(86400, 'hrs', 3600),\narray(129600, '1 day'),\narray(604800, 'days', 86400),\n);\n\n\n\n\n\n\npublic function setBarWidth($size)\n{\n$this->barWidth = (int) $size;\n}\n\n\n\n\n\n\npublic function setBarCharacter($char)\n{\n$this->barChar = $char;\n}\n\n\n\n\n\n\npublic function setEmptyBarCharacter($char)\n{\n$this->emptyBarChar = $char;\n}\n\n\n\n\n\n\npublic function setProgressCharacter($char)\n{\n$this->progressChar = $char;\n}\n\n\n\n\n\n\npublic function setFormat($format)\n{\n$this->format = $format;\n}\n\n\n\n\n\n\npublic function setRedrawFrequency($freq)\n{\n$this->redrawFreq = (int) $freq;\n}\n\n\n\n\n\n\n\npublic function start(OutputInterface $output, $max = null)\n{\n$this->startTime = time();\n$this->current = 0;\n$this->max = (int) $max;\n$this->output = $output;\n\nif (null === $this->format) {\nswitch ($output->getVerbosity()) {\ncase OutputInterface::VERBOSITY_QUIET:\n$this->format = self::FORMAT_QUIET_NOMAX;\nif ($this->max > 0) {\n$this->format = self::FORMAT_QUIET;\n}\nbreak;\ncase OutputInterface::VERBOSITY_VERBOSE:\ncase OutputInterface::VERBOSITY_VERY_VERBOSE:\ncase OutputInterface::VERBOSITY_DEBUG:\n$this->format = self::FORMAT_VERBOSE_NOMAX;\nif ($this->max > 0) {\n$this->format = self::FORMAT_VERBOSE;\n}\nbreak;\ndefault:\n$this->format = self::FORMAT_NORMAL_NOMAX;\nif ($this->max > 0) {\n$this->format = self::FORMAT_NORMAL;\n}\nbreak;\n}\n}\n\n$this->initialize();\n}\n\n\n\n\n\n\n\n\n\npublic function advance($step = 1, $redraw = false)\n{\nif (null === $this->startTime) {\nthrow new \\LogicException('You must start the progress bar before calling advance().');\n}\n\nif (0 === $this->current) {\n$redraw = true;\n}\n\n$this->current += $step;\nif ($redraw || 0 === $this->current % $this->redrawFreq) {\n$this->display();\n}\n}\n\n\n\n\n\n\n\n\n\npublic function setCurrent($current, $redraw = false)\n{\nif (null === $this->startTime) {\nthrow new \\LogicException('You must start the progress bar before calling setCurrent().');\n}\n\n$current = (int) $current;\n\nif ($current < $this->current) {\nthrow new \\LogicException('You can\\'t regress the progress bar');\n}\n\nif (0 === $this->current) {\n$redraw = true;\n}\n\n$this->current = $current;\nif ($redraw || 0 === $this->current % $this->redrawFreq) {\n$this->display();\n}\n}\n\n\n\n\n\n\n\n\npublic function display($finish = false)\n{\nif (null === $this->startTime) {\nthrow new \\LogicException('You must start the progress bar before calling display().');\n}\n\n$message = $this->format;\nforeach ($this->generate($finish) as $name => $value) {\n$message = str_replace(\"%{$name}%\", $value, $message);\n}\n$this->overwrite($this->output, $message);\n}\n\n\n\n\npublic function finish()\n{\nif (null === $this->startTime) {\nthrow new \\LogicException('You must start the progress bar before calling finish().');\n}\n\nif (null !== $this->startTime) {\nif (!$this->max) {\n$this->barChar = $this->barCharOriginal;\n$this->display(true);\n}\n$this->startTime = null;\n$this->output->writeln('');\n$this->output = null;\n}\n}\n\n\n\n\nprivate function initialize()\n{\n$this->formatVars = array();\nforeach ($this->defaultFormatVars as $var) {\nif (false !== strpos($this->format, \"%{$var}%\")) {\n$this->formatVars[$var] = true;\n}\n}\n\nif ($this->max > 0) {\n$this->widths['max'] = $this->strlen($this->max);\n$this->widths['current'] = $this->widths['max'];\n} else {\n$this->barCharOriginal = $this->barChar;\n$this->barChar = $this->emptyBarChar;\n}\n}\n\n\n\n\n\n\n\n\nprivate function generate($finish = false)\n{\n$vars = array();\n$percent = 0;\nif ($this->max > 0) {\n$percent = (double) round($this->current / $this->max, 2);\n}\n\nif (isset($this->formatVars['bar'])) {\n$completeBars = 0;\n$emptyBars = 0;\nif ($this->max > 0) {\n$completeBars = floor($percent * $this->barWidth);\n} else {\nif (!$finish) {\n$completeBars = floor($this->current % $this->barWidth);\n} else {\n$completeBars = $this->barWidth;\n}\n}\n\n$emptyBars = $this->barWidth - $completeBars - $this->strlen($this->progressChar);\n$bar = str_repeat($this->barChar, $completeBars);\nif ($completeBars < $this->barWidth) {\n$bar .= $this->progressChar;\n$bar .= str_repeat($this->emptyBarChar, $emptyBars);\n}\n\n$vars['bar'] = $bar;\n}\n\nif (isset($this->formatVars['elapsed'])) {\n$elapsed = time() - $this->startTime;\n$vars['elapsed'] = str_pad($this->humaneTime($elapsed), $this->widths['elapsed'], ' ', STR_PAD_LEFT);\n}\n\nif (isset($this->formatVars['current'])) {\n$vars['current'] = str_pad($this->current, $this->widths['current'], ' ', STR_PAD_LEFT);\n}\n\nif (isset($this->formatVars['max'])) {\n$vars['max'] = $this->max;\n}\n\nif (isset($this->formatVars['percent'])) {\n$vars['percent'] = str_pad($percent * 100, $this->widths['percent'], ' ', STR_PAD_LEFT);\n}\n\nreturn $vars;\n}\n\n\n\n\n\n\n\n\nprivate function humaneTime($secs)\n{\n$text = '';\nforeach ($this->timeFormats as $format) {\nif ($secs < $format[0]) {\nif (count($format) == 2) {\n$text = $format[1];\nbreak;\n} else {\n$text = ceil($secs / $format[2]).' '.$format[1];\nbreak;\n}\n}\n}\n\nreturn $text;\n}\n\n\n\n\n\n\n\nprivate function overwrite(OutputInterface $output, $message)\n{\n$length = $this->strlen($message);\n\n\n if (null !== $this->lastMessagesLength && $this->lastMessagesLength > $length) {\n$message = str_pad($message, $this->lastMessagesLength, \"\\x20\", STR_PAD_RIGHT);\n}\n\n\n $output->write(\"\\x0D\");\n$output->write($message);\n\n$this->lastMessagesLength = $this->strlen($message);\n}\n\n\n\n\npublic function getName()\n{\nreturn 'progress';\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Console\\Event;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\EventDispatcher\\Event;\n\n\n\n\n\n\nclass ConsoleEvent extends Event\n{\nprotected $command;\n\nprivate $input;\nprivate $output;\n\npublic function __construct(Command $command, InputInterface $input, OutputInterface $output)\n{\n$this->command = $command;\n$this->input = $input;\n$this->output = $output;\n}\n\n\n\n\n\n\npublic function getCommand()\n{\nreturn $this->command;\n}\n\n\n\n\n\n\npublic function getInput()\n{\nreturn $this->input;\n}\n\n\n\n\n\n\npublic function getOutput()\n{\nreturn $this->output;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Console\\Event;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n\n\n\n\n\nclass ConsoleTerminateEvent extends ConsoleEvent\n{\n\n\n\n\n\nprivate $exitCode;\n\npublic function __construct(Command $command, InputInterface $input, OutputInterface $output, $exitCode)\n{\nparent::__construct($command, $input, $output);\n\n$this->setExitCode($exitCode);\n}\n\n\n\n\n\n\npublic function setExitCode($exitCode)\n{\n$this->exitCode = $exitCode;\n}\n\n\n\n\n\n\npublic function getExitCode()\n{\nreturn $this->exitCode;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Console\\Event;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n\n\n\n\n\nclass ConsoleForExceptionEvent extends ConsoleEvent\n{\nprivate $exception;\nprivate $exitCode;\n\npublic function __construct(Command $command, InputInterface $input, OutputInterface $output, \\Exception $exception, $exitCode)\n{\nparent::__construct($command, $input, $output);\n\n$this->setException($exception);\n$this->exitCode = $exitCode;\n}\n\n\n\n\n\n\npublic function getException()\n{\nreturn $this->exception;\n}\n\n\n\n\n\n\n\n\npublic function setException(\\Exception $exception)\n{\n$this->exception = $exception;\n}\n\n\n\n\n\n\npublic function getExitCode()\n{\nreturn $this->exitCode;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Console\\Event;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n\n\n\n\n\nclass ConsoleCommandEvent extends ConsoleEvent\n{\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Console;\n\n\n\n\n\n\nfinal class ConsoleEvents\n{\n\n\n\n\n\n\n\n\n\n\nconst COMMAND = 'console.command';\n\n\n\n\n\n\n\n\n\n\nconst TERMINATE = 'console.terminate';\n\n\n\n\n\n\n\n\n\n\n\nconst EXCEPTION = 'console.exception';\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Finder;\n\nuse Symfony\\Component\\Finder\\Adapter\\AdapterInterface;\nuse Symfony\\Component\\Finder\\Adapter\\GnuFindAdapter;\nuse Symfony\\Component\\Finder\\Adapter\\BsdFindAdapter;\nuse Symfony\\Component\\Finder\\Adapter\\PhpAdapter;\nuse Symfony\\Component\\Finder\\Exception\\ExceptionInterface;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass Finder implements \\IteratorAggregate, \\Countable\n{\nconst IGNORE_VCS_FILES = 1;\nconst IGNORE_DOT_FILES = 2;\n\nprivate $mode = 0;\nprivate $names = array();\nprivate $notNames = array();\nprivate $exclude = array();\nprivate $filters = array();\nprivate $depths = array();\nprivate $sizes = array();\nprivate $followLinks = false;\nprivate $sort = false;\nprivate $ignore = 0;\nprivate $dirs = array();\nprivate $dates = array();\nprivate $iterators = array();\nprivate $contains = array();\nprivate $notContains = array();\nprivate $adapters = array();\nprivate $paths = array();\nprivate $notPaths = array();\n\nprivate static $vcsPatterns = array('.svn', '_svn', 'CVS', '_darcs', '.arch-params', '.monotone', '.bzr', '.git', '.hg');\n\n\n\n\npublic function __construct()\n{\n$this->ignore = static::IGNORE_VCS_FILES | static::IGNORE_DOT_FILES;\n\n$this\n->addAdapter(new GnuFindAdapter())\n->addAdapter(new BsdFindAdapter())\n->addAdapter(new PhpAdapter(), -50)\n->setAdapter('php')\n;\n}\n\n\n\n\n\n\n\n\npublic static function create()\n{\nreturn new static();\n}\n\n\n\n\n\n\n\n\n\npublic function addAdapter(Adapter\\AdapterInterface $adapter, $priority = 0)\n{\n$this->adapters[$adapter->getName()] = array(\n'adapter' => $adapter,\n'priority' => $priority,\n'selected' => false,\n);\n\nreturn $this->sortAdapters();\n}\n\n\n\n\n\n\npublic function useBestAdapter()\n{\n$this->resetAdapterSelection();\n\nreturn $this->sortAdapters();\n}\n\n\n\n\n\n\n\n\n\n\npublic function setAdapter($name)\n{\nif (!isset($this->adapters[$name])) {\nthrow new \\InvalidArgumentException(sprintf('Adapter \"%s\" does not exist.', $name));\n}\n\n$this->resetAdapterSelection();\n$this->adapters[$name]['selected'] = true;\n\nreturn $this->sortAdapters();\n}\n\n\n\n\n\n\npublic function removeAdapters()\n{\n$this->adapters = array();\n\nreturn $this;\n}\n\n\n\n\n\n\npublic function getAdapters()\n{\nreturn array_values(array_map(function(array $adapter) {\nreturn $adapter['adapter'];\n}, $this->adapters));\n}\n\n\n\n\n\n\n\n\npublic function directories()\n{\n$this->mode = Iterator\\FileTypeFilterIterator::ONLY_DIRECTORIES;\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\npublic function files()\n{\n$this->mode = Iterator\\FileTypeFilterIterator::ONLY_FILES;\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npublic function depth($level)\n{\n$this->depths[] = new Comparator\\NumberComparator($level);\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npublic function date($date)\n{\n$this->dates[] = new Comparator\\DateComparator($date);\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npublic function name($pattern)\n{\n$this->names[] = $pattern;\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\n\n\n\n\npublic function notName($pattern)\n{\n$this->notNames[] = $pattern;\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npublic function contains($pattern)\n{\n$this->contains[] = $pattern;\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npublic function notContains($pattern)\n{\n$this->notContains[] = $pattern;\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npublic function path($pattern)\n{\n$this->paths[] = $pattern;\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npublic function notPath($pattern)\n{\n$this->notPaths[] = $pattern;\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npublic function size($size)\n{\n$this->sizes[] = new Comparator\\NumberComparator($size);\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\n\n\n\n\npublic function exclude($dirs)\n{\n$this->exclude = array_merge($this->exclude, (array) $dirs);\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\n\n\n\n\npublic function ignoreDotFiles($ignoreDotFiles)\n{\nif ($ignoreDotFiles) {\n$this->ignore = $this->ignore | static::IGNORE_DOT_FILES;\n} else {\n$this->ignore = $this->ignore & ~static::IGNORE_DOT_FILES;\n}\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\n\n\n\n\npublic function ignoreVCS($ignoreVCS)\n{\nif ($ignoreVCS) {\n$this->ignore = $this->ignore | static::IGNORE_VCS_FILES;\n} else {\n$this->ignore = $this->ignore & ~static::IGNORE_VCS_FILES;\n}\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\npublic static function addVCSPattern($pattern)\n{\nforeach ((array) $pattern as $p) {\nself::$vcsPatterns[] = $p;\n}\n\nself::$vcsPatterns = array_unique(self::$vcsPatterns);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npublic function sort(\\Closure $closure)\n{\n$this->sort = $closure;\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\n\n\n\n\npublic function sortByName()\n{\n$this->sort = Iterator\\SortableIterator::SORT_BY_NAME;\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\n\n\n\n\npublic function sortByType()\n{\n$this->sort = Iterator\\SortableIterator::SORT_BY_TYPE;\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npublic function sortByAccessedTime()\n{\n$this->sort = Iterator\\SortableIterator::SORT_BY_ACCESSED_TIME;\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npublic function sortByChangedTime()\n{\n$this->sort = Iterator\\SortableIterator::SORT_BY_CHANGED_TIME;\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npublic function sortByModifiedTime()\n{\n$this->sort = Iterator\\SortableIterator::SORT_BY_MODIFIED_TIME;\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npublic function filter(\\Closure $closure)\n{\n$this->filters[] = $closure;\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\npublic function followLinks()\n{\n$this->followLinks = true;\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\n\n\n\n\npublic function in($dirs)\n{\n$resolvedDirs = array();\n\nforeach ((array) $dirs as $dir) {\nif (is_dir($dir)) {\n$resolvedDirs[] = $dir;\n} elseif ($glob = glob($dir, GLOB_ONLYDIR)) {\n$resolvedDirs = array_merge($resolvedDirs, $glob);\n} else {\nthrow new \\InvalidArgumentException(sprintf('The \"%s\" directory does not exist.', $dir));\n}\n}\n\n$this->dirs = array_merge($this->dirs, $resolvedDirs);\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\n\n\npublic function getIterator()\n{\nif (0 === count($this->dirs) && 0 === count($this->iterators)) {\nthrow new \\LogicException('You must call one of in() or append() methods before iterating over a Finder.');\n}\n\nif (1 === count($this->dirs) && 0 === count($this->iterators)) {\nreturn $this->searchInDirectory($this->dirs[0]);\n}\n\n$iterator = new \\AppendIterator();\nforeach ($this->dirs as $dir) {\n$iterator->append($this->searchInDirectory($dir));\n}\n\nforeach ($this->iterators as $it) {\n$iterator->append($it);\n}\n\nreturn $iterator;\n}\n\n\n\n\n\n\n\n\n\n\n\n\npublic function append($iterator)\n{\nif ($iterator instanceof \\IteratorAggregate) {\n$this->iterators[] = $iterator->getIterator();\n} elseif ($iterator instanceof \\Iterator) {\n$this->iterators[] = $iterator;\n} elseif ($iterator instanceof \\Traversable || is_array($iterator)) {\n$it = new \\ArrayIterator();\nforeach ($iterator as $file) {\n$it->append($file instanceof \\SplFileInfo ? $file : new \\SplFileInfo($file));\n}\n$this->iterators[] = $it;\n} else {\nthrow new \\InvalidArgumentException('Finder::append() method wrong argument type.');\n}\n\nreturn $this;\n}\n\n\n\n\n\n\npublic function count()\n{\nreturn iterator_count($this->getIterator());\n}\n\n\n\n\nprivate function sortAdapters()\n{\nuasort($this->adapters, function (array $a, array $b) {\nif ($a['selected'] || $b['selected']) {\nreturn $a['selected'] ? -1 : 1;\n}\n\nreturn $a['priority'] > $b['priority'] ? -1 : 1;\n});\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\nprivate function searchInDirectory($dir)\n{\nif (static::IGNORE_VCS_FILES === (static::IGNORE_VCS_FILES & $this->ignore)) {\n$this->exclude = array_merge($this->exclude, self::$vcsPatterns);\n}\n\nif (static::IGNORE_DOT_FILES === (static::IGNORE_DOT_FILES & $this->ignore)) {\n$this->notPaths[] = '#(^|/)\\..+(/|$)#';\n}\n\nforeach ($this->adapters as $adapter) {\nif ($adapter['adapter']->isSupported()) {\ntry {\nreturn $this\n->buildAdapter($adapter['adapter'])\n->searchInDirectory($dir);\n} catch (ExceptionInterface $e) {}\n}\n}\n\nthrow new \\RuntimeException('No supported adapter found.');\n}\n\n\n\n\n\n\nprivate function buildAdapter(AdapterInterface $adapter)\n{\nreturn $adapter\n->setFollowLinks($this->followLinks)\n->setDepths($this->depths)\n->setMode($this->mode)\n->setExclude($this->exclude)\n->setNames($this->names)\n->setNotNames($this->notNames)\n->setContains($this->contains)\n->setNotContains($this->notContains)\n->setSizes($this->sizes)\n->setDates($this->dates)\n->setFilters($this->filters)\n->setSort($this->sort)\n->setPath($this->paths)\n->setNotPath($this->notPaths);\n}\n\n\n\n\nprivate function resetAdapterSelection()\n{\n$this->adapters = array_map(function (array $properties) {\n$properties['selected'] = false;\n\nreturn $properties;\n}, $this->adapters);\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Finder\\Shell;\n\n\n\n\nclass Command\n{\n\n\n\nprivate $parent;\n\n\n\n\nprivate $bits;\n\n\n\n\nprivate $labels;\n\n\n\n\n\n\npublic function __construct(Command $parent = null)\n{\n$this->parent = $parent;\n$this->bits = array();\n$this->labels = array();\n}\n\n\n\n\n\n\npublic function __toString()\n{\nreturn $this->join();\n}\n\n\n\n\n\n\n\n\npublic static function create(Command $parent = null)\n{\nreturn new self($parent);\n}\n\n\n\n\n\n\n\n\npublic static function escape($input)\n{\nreturn escapeshellcmd($input);\n}\n\n\n\n\n\n\n\n\npublic static function quote($input)\n{\nreturn escapeshellarg($input);\n}\n\n\n\n\n\n\n\n\npublic function add($bit)\n{\n$this->bits[] = $bit;\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\npublic function top($bit)\n{\narray_unshift($this->bits, $bit);\n\nforeach ($this->labels as $label => $index) {\n$this->labels[$label] += 1;\n}\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\npublic function arg($arg)\n{\n$this->bits[] = self::quote($arg);\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\npublic function cmd($esc)\n{\n$this->bits[] = self::escape($esc);\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\n\n\npublic function ins($label)\n{\nif (isset($this->labels[$label])) {\nthrow new \\RuntimeException('Label \"'.$label.'\" already exists.');\n}\n\n$this->bits[] = self::create($this);\n$this->labels[$label] = count($this->bits)-1;\n\nreturn $this->bits[$this->labels[$label]];\n}\n\n\n\n\n\n\n\n\n\n\npublic function get($label)\n{\nif (!isset($this->labels[$label])) {\nthrow new \\RuntimeException('Label \"'.$label.'\" does not exists.');\n}\n\nreturn $this->bits[$this->labels[$label]];\n}\n\n\n\n\n\n\n\n\npublic function end()\n{\nif (null === $this->parent) {\nthrow new \\RuntimeException('Calling end on root command doesn\\'t make sense.');\n}\n\nreturn $this->parent;\n}\n\n\n\n\n\n\npublic function length()\n{\nreturn count($this->bits);\n}\n\n\n\n\n\n\n\n\npublic function execute()\n{\nexec($this->join(), $output, $code);\n\nif (0 !== $code) {\nthrow new \\RuntimeException('Execution failed with return code: '.$code.'.');\n}\n\nreturn $output ?: array();\n}\n\n\n\n\n\n\npublic function join()\n{\nreturn implode(' ', array_filter(\narray_map(function($bit) {\nreturn $bit instanceof Command ? $bit->join() : ($bit ?: null);\n}, $this->bits),\nfunction($bit) { return null !== $bit; }\n));\n}\n\n\n\n\n\n\n\n\n\npublic function addAtIndex($bit, $index)\n{\narray_splice($this->bits, $index, 0, $bit);\n\nreturn $this;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Finder\\Shell;\n\n\n\n\nclass Shell\n{\nconst TYPE_UNIX = 1;\nconst TYPE_DARWIN = 2;\nconst TYPE_CYGWIN = 3;\nconst TYPE_WINDOWS = 4;\nconst TYPE_BSD = 5;\n\n\n\n\nprivate $type;\n\n\n\n\n\n\npublic function getType()\n{\nif (null === $this->type) {\n$this->type = $this->guessType();\n}\n\nreturn $this->type;\n}\n\n\n\n\n\n\n\n\npublic function testCommand($command)\n{\nif (self::TYPE_WINDOWS === $this->type) {\n\n return false;\n}\n\nif (!function_exists('exec')) {\nreturn false;\n}\n\n\n exec('command -v '.$command, $output, $code);\n\nreturn 0 === $code && count($output) > 0;\n}\n\n\n\n\n\n\nprivate function guessType()\n{\n$os = strtolower(PHP_OS);\n\nif (false !== strpos($os, 'cygwin')) {\nreturn self::TYPE_CYGWIN;\n}\n\nif (false !== strpos($os, 'darwin')) {\nreturn self::TYPE_DARWIN;\n}\n\nif (false !== strpos($os, 'bsd')) {\nreturn self::TYPE_BSD;\n}\n\nif (0 === strpos($os, 'win')) {\nreturn self::TYPE_WINDOWS;\n}\n\nreturn self::TYPE_UNIX;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Finder\\Expression;\n\n\n\n\nclass Regex implements ValueInterface\n{\nconst START_FLAG = '^';\nconst END_FLAG = '$';\nconst BOUNDARY = '~';\nconst JOKER = '.*';\nconst ESCAPING = '\\\\';\n\n\n\n\nprivate $pattern;\n\n\n\n\nprivate $options;\n\n\n\n\nprivate $startFlag;\n\n\n\n\nprivate $endFlag;\n\n\n\n\nprivate $startJoker;\n\n\n\n\nprivate $endJoker;\n\n\n\n\n\n\n\n\npublic static function create($expr)\n{\nif (preg_match('/^(.{3,}?)([imsxuADU]*)$/', $expr, $m)) {\n$start = substr($m[1], 0, 1);\n$end = substr($m[1], -1);\n\nif (($start === $end && !preg_match('/[*?[:alnum:] \\\\\\\\]/', $start)) || ($start === '{' && $end === '}')) {\nreturn new self(substr($m[1], 1, -1), $m[2], $end);\n}\n}\n\nthrow new \\InvalidArgumentException('Given expression is not a regex.');\n}\n\n\n\n\n\n\npublic function __construct($pattern, $options = '', $delimiter = null)\n{\nif (null !== $delimiter) {\n\n $pattern = str_replace('\\\\'.$delimiter, $delimiter, $pattern);\n}\n\n$this->parsePattern($pattern);\n$this->options = $options;\n}\n\n\n\n\npublic function __toString()\n{\nreturn $this->render();\n}\n\n\n\n\npublic function render()\n{\nreturn self::BOUNDARY\n.$this->renderPattern()\n.self::BOUNDARY\n.$this->options;\n}\n\n\n\n\npublic function renderPattern()\n{\nreturn ($this->startFlag ? self::START_FLAG : '')\n.($this->startJoker ? self::JOKER : '')\n.str_replace(self::BOUNDARY, '\\\\'.self::BOUNDARY, $this->pattern)\n.($this->endJoker ? self::JOKER : '')\n.($this->endFlag ? self::END_FLAG : '');\n}\n\n\n\n\npublic function isCaseSensitive()\n{\nreturn !$this->hasOption('i');\n}\n\n\n\n\npublic function getType()\n{\nreturn Expression::TYPE_REGEX;\n}\n\n\n\n\npublic function prepend($expr)\n{\n$this->pattern = $expr.$this->pattern;\n\nreturn $this;\n}\n\n\n\n\npublic function append($expr)\n{\n$this->pattern .= $expr;\n\nreturn $this;\n}\n\n\n\n\n\n\npublic function hasOption($option)\n{\nreturn false !== strpos($this->options, $option);\n}\n\n\n\n\n\n\npublic function addOption($option)\n{\nif (!$this->hasOption($option)) {\n$this->options.= $option;\n}\n\nreturn $this;\n}\n\n\n\n\n\n\npublic function removeOption($option)\n{\n$this->options = str_replace($option, '', $this->options);\n\nreturn $this;\n}\n\n\n\n\n\n\npublic function setStartFlag($startFlag)\n{\n$this->startFlag = $startFlag;\n\nreturn $this;\n}\n\n\n\n\npublic function hasStartFlag()\n{\nreturn $this->startFlag;\n}\n\n\n\n\n\n\npublic function setEndFlag($endFlag)\n{\n$this->endFlag = (bool) $endFlag;\n\nreturn $this;\n}\n\n\n\n\npublic function hasEndFlag()\n{\nreturn $this->endFlag;\n}\n\n\n\n\n\n\npublic function setStartJoker($startJoker)\n{\n$this->startJoker = $startJoker;\n\nreturn $this;\n}\n\n\n\n\npublic function hasStartJoker()\n{\nreturn $this->startJoker;\n}\n\n\n\n\n\n\npublic function setEndJoker($endJoker)\n{\n$this->endJoker = (bool) $endJoker;\n\nreturn $this;\n}\n\n\n\n\npublic function hasEndJoker()\n{\nreturn $this->endJoker;\n}\n\n\n\n\n\n\npublic function replaceJokers($replacement)\n{\n$replace = function ($subject) use ($replacement) {\n$subject = $subject[0];\n$replace = 0 === substr_count($subject, '\\\\') % 2;\n\nreturn $replace ? str_replace('.', $replacement, $subject) : $subject;\n};\n\n$this->pattern = preg_replace_callback('~[\\\\\\\\]*\\\\.~', $replace, $this->pattern);\n\nreturn $this;\n}\n\n\n\n\nprivate function parsePattern($pattern)\n{\nif ($this->startFlag = self::START_FLAG === substr($pattern, 0, 1)) {\n$pattern = substr($pattern, 1);\n}\n\nif ($this->startJoker = self::JOKER === substr($pattern, 0, 2)) {\n$pattern = substr($pattern, 2);\n}\n\nif ($this->endFlag = (self::END_FLAG === substr($pattern, -1) && self::ESCAPING !== substr($pattern, -2, -1))) {\n$pattern = substr($pattern, 0, -1);\n}\n\nif ($this->endJoker = (self::JOKER === substr($pattern, -2) && self::ESCAPING !== substr($pattern, -3, -2))) {\n$pattern = substr($pattern, 0, -2);\n}\n\n$this->pattern = $pattern;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Finder\\Expression;\n\n\n\n\nclass Glob implements ValueInterface\n{\n\n\n\nprivate $pattern;\n\n\n\n\npublic function __construct($pattern)\n{\n$this->pattern = $pattern;\n}\n\n\n\n\npublic function render()\n{\nreturn $this->pattern;\n}\n\n\n\n\npublic function renderPattern()\n{\nreturn $this->pattern;\n}\n\n\n\n\npublic function getType()\n{\nreturn Expression::TYPE_GLOB;\n}\n\n\n\n\npublic function isCaseSensitive()\n{\nreturn true;\n}\n\n\n\n\npublic function prepend($expr)\n{\n$this->pattern = $expr.$this->pattern;\n\nreturn $this;\n}\n\n\n\n\npublic function append($expr)\n{\n$this->pattern .= $expr;\n\nreturn $this;\n}\n\n\n\n\n\n\npublic function isExpandable()\n{\nreturn false !== strpos($this->pattern, '{')\n&& false !== strpos($this->pattern, '}');\n}\n\n\n\n\n\n\n\npublic function toRegex($strictLeadingDot = true, $strictWildcardSlash = true)\n{\n$firstByte = true;\n$escaping = false;\n$inCurlies = 0;\n$regex = '';\n$sizeGlob = strlen($this->pattern);\nfor ($i = 0; $i < $sizeGlob; $i++) {\n$car = $this->pattern[$i];\nif ($firstByte) {\nif ($strictLeadingDot && '.' !== $car) {\n$regex .= '(?=[^\\.])';\n}\n\n$firstByte = false;\n}\n\nif ('/' === $car) {\n$firstByte = true;\n}\n\nif ('.' === $car || '(' === $car || ')' === $car || '|' === $car || '+' === $car || '^' === $car || '$' === $car) {\n$regex .= \"\\\\$car\";\n} elseif ('*' === $car) {\n$regex .= $escaping ? '\\\\*' : ($strictWildcardSlash ? '[^/]*' : '.*');\n} elseif ('?' === $car) {\n$regex .= $escaping ? '\\\\?' : ($strictWildcardSlash ? '[^/]' : '.');\n} elseif ('{' === $car) {\n$regex .= $escaping ? '\\\\{' : '(';\nif (!$escaping) {\n++$inCurlies;\n}\n} elseif ('}' === $car && $inCurlies) {\n$regex .= $escaping ? '}' : ')';\nif (!$escaping) {\n--$inCurlies;\n}\n} elseif (',' === $car && $inCurlies) {\n$regex .= $escaping ? ',' : '|';\n} elseif ('\\\\' === $car) {\nif ($escaping) {\n$regex .= '\\\\\\\\';\n$escaping = false;\n} else {\n$escaping = true;\n}\n\ncontinue;\n} else {\n$regex .= $car;\n}\n$escaping = false;\n}\n\nreturn new Regex('^'.$regex.'$');\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Finder\\Expression;\n\n\n\n\nclass Expression implements ValueInterface\n{\nconst TYPE_REGEX = 1;\nconst TYPE_GLOB = 2;\n\n\n\n\nprivate $value;\n\n\n\n\n\n\npublic static function create($expr)\n{\nreturn new self($expr);\n}\n\n\n\n\npublic function __construct($expr)\n{\ntry {\n$this->value = Regex::create($expr);\n} catch (\\InvalidArgumentException $e) {\n$this->value = new Glob($expr);\n}\n}\n\n\n\n\npublic function __toString()\n{\nreturn $this->render();\n}\n\n\n\n\npublic function render()\n{\nreturn $this->value->render();\n}\n\n\n\n\npublic function renderPattern()\n{\nreturn $this->value->renderPattern();\n}\n\n\n\n\npublic function isCaseSensitive()\n{\nreturn $this->value->isCaseSensitive();\n}\n\n\n\n\npublic function getType()\n{\nreturn $this->value->getType();\n}\n\n\n\n\npublic function prepend($expr)\n{\n$this->value->prepend($expr);\n\nreturn $this;\n}\n\n\n\n\npublic function append($expr)\n{\n$this->value->append($expr);\n\nreturn $this;\n}\n\n\n\n\npublic function isRegex()\n{\nreturn self::TYPE_REGEX === $this->value->getType();\n}\n\n\n\n\npublic function isGlob()\n{\nreturn self::TYPE_GLOB === $this->value->getType();\n}\n\n\n\n\n\n\npublic function getGlob()\n{\nif (self::TYPE_GLOB !== $this->value->getType()) {\nthrow new \\LogicException('Regex cant be transformed to glob.');\n}\n\nreturn $this->value;\n}\n\n\n\n\npublic function getRegex()\n{\nreturn self::TYPE_REGEX === $this->value->getType() ? $this->value : $this->value->toRegex();\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Finder\\Expression;\n\n\n\n\ninterface ValueInterface\n{\n\n\n\n\n\npublic function render();\n\n\n\n\n\n\npublic function renderPattern();\n\n\n\n\n\n\npublic function isCaseSensitive();\n\n\n\n\n\n\npublic function getType();\n\n\n\n\n\n\npublic function prepend($expr);\n\n\n\n\n\n\npublic function append($expr);\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Finder\\Adapter;\n\n\n\n\ninterface AdapterInterface\n{\n\n\n\n\n\npublic function setFollowLinks($followLinks);\n\n\n\n\n\n\npublic function setMode($mode);\n\n\n\n\n\n\npublic function setExclude(array $exclude);\n\n\n\n\n\n\npublic function setDepths(array $depths);\n\n\n\n\n\n\npublic function setNames(array $names);\n\n\n\n\n\n\npublic function setNotNames(array $notNames);\n\n\n\n\n\n\npublic function setContains(array $contains);\n\n\n\n\n\n\npublic function setNotContains(array $notContains);\n\n\n\n\n\n\npublic function setSizes(array $sizes);\n\n\n\n\n\n\npublic function setDates(array $dates);\n\n\n\n\n\n\npublic function setFilters(array $filters);\n\n\n\n\n\n\npublic function setSort($sort);\n\n\n\n\n\n\npublic function setPath(array $paths);\n\n\n\n\n\n\npublic function setNotPath(array $notPaths);\n\n\n\n\n\n\npublic function searchInDirectory($dir);\n\n\n\n\n\n\npublic function isSupported();\n\n\n\n\n\n\npublic function getName();\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Finder\\Adapter;\n\nuse Symfony\\Component\\Finder\\Shell\\Shell;\nuse Symfony\\Component\\Finder\\Shell\\Command;\nuse Symfony\\Component\\Finder\\Iterator\\SortableIterator;\nuse Symfony\\Component\\Finder\\Expression\\Expression;\n\n\n\n\n\n\nclass BsdFindAdapter extends AbstractFindAdapter\n{\n\n\n\npublic function getName()\n{\nreturn 'bsd_find';\n}\n\n\n\n\nprotected function canBeUsed()\n{\nreturn in_array($this->shell->getType(), array(Shell::TYPE_BSD, Shell::TYPE_DARWIN)) && parent::canBeUsed();\n}\n\n\n\n\nprotected function buildFormatSorting(Command $command, $sort)\n{\nswitch ($sort) {\ncase SortableIterator::SORT_BY_NAME:\n$command->ins('sort')->add('| sort');\n\nreturn;\ncase SortableIterator::SORT_BY_TYPE:\n$format = '%HT';\nbreak;\ncase SortableIterator::SORT_BY_ACCESSED_TIME:\n$format = '%a';\nbreak;\ncase SortableIterator::SORT_BY_CHANGED_TIME:\n$format = '%c';\nbreak;\ncase SortableIterator::SORT_BY_MODIFIED_TIME:\n$format = '%m';\nbreak;\ndefault:\nthrow new \\InvalidArgumentException('Unknown sort options: '.$sort.'.');\n}\n\n$command\n->add('-print0 | xargs -0 stat -f')\n->arg($format.'%t%N')\n->add('| sort | cut -f 2');\n}\n\n\n\n\nprotected function buildFindCommand(Command $command, $dir)\n{\nparent::buildFindCommand($command, $dir)->addAtIndex('-E', 1);\n\nreturn $command;\n}\n\n\n\n\nprotected function buildContentFiltering(Command $command, array $contains, $not = false)\n{\nforeach ($contains as $contain) {\n$expr = Expression::create($contain);\n\n\n $command\n->add('| grep -v \\'^$\\'')\n->add('| xargs -I{} grep -I')\n->add($expr->isCaseSensitive() ? null : '-i')\n->add($not ? '-L' : '-l')\n->add('-Ee')->arg($expr->renderPattern())\n->add('{}')\n;\n}\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Finder\\Adapter;\n\nuse Symfony\\Component\\Finder\\Shell\\Shell;\nuse Symfony\\Component\\Finder\\Shell\\Command;\nuse Symfony\\Component\\Finder\\Iterator\\SortableIterator;\nuse Symfony\\Component\\Finder\\Expression\\Expression;\n\n\n\n\n\n\nclass GnuFindAdapter extends AbstractFindAdapter\n{\n\n\n\npublic function getName()\n{\nreturn 'gnu_find';\n}\n\n\n\n\nprotected function buildFormatSorting(Command $command, $sort)\n{\nswitch ($sort) {\ncase SortableIterator::SORT_BY_NAME:\n$command->ins('sort')->add('| sort');\n\nreturn;\ncase SortableIterator::SORT_BY_TYPE:\n$format = '%y';\nbreak;\ncase SortableIterator::SORT_BY_ACCESSED_TIME:\n$format = '%A@';\nbreak;\ncase SortableIterator::SORT_BY_CHANGED_TIME:\n$format = '%C@';\nbreak;\ncase SortableIterator::SORT_BY_MODIFIED_TIME:\n$format = '%T@';\nbreak;\ndefault:\nthrow new \\InvalidArgumentException('Unknown sort options: '.$sort.'.');\n}\n\n$command\n->get('find')\n->add('-printf')\n->arg($format.' %h/%f\\\\n')\n->add('| sort | cut')\n->arg('-d ')\n->arg('-f2-')\n;\n}\n\n\n\n\nprotected function canBeUsed()\n{\nreturn $this->shell->getType() === Shell::TYPE_UNIX && parent::canBeUsed();\n}\n\n\n\n\nprotected function buildFindCommand(Command $command, $dir)\n{\nreturn parent::buildFindCommand($command, $dir)->add('-regextype posix-extended');\n}\n\n\n\n\nprotected function buildContentFiltering(Command $command, array $contains, $not = false)\n{\nforeach ($contains as $contain) {\n$expr = Expression::create($contain);\n\n\n $command\n->add('| xargs -I{} -r grep -I')\n->add($expr->isCaseSensitive() ? null : '-i')\n->add($not ? '-L' : '-l')\n->add('-Ee')->arg($expr->renderPattern())\n->add('{}')\n;\n}\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Finder\\Adapter;\n\n\n\n\n\n\nabstract class AbstractAdapter implements AdapterInterface\n{\nprotected $followLinks = false;\nprotected $mode = 0;\nprotected $minDepth = 0;\nprotected $maxDepth = PHP_INT_MAX;\nprotected $exclude = array();\nprotected $names = array();\nprotected $notNames = array();\nprotected $contains = array();\nprotected $notContains = array();\nprotected $sizes = array();\nprotected $dates = array();\nprotected $filters = array();\nprotected $sort = false;\nprotected $paths = array();\nprotected $notPaths = array();\n\nprivate static $areSupported = array();\n\n\n\n\npublic function isSupported()\n{\n$name = $this->getName();\n\nif (!array_key_exists($name, self::$areSupported)) {\nself::$areSupported[$name] = $this->canBeUsed();\n}\n\nreturn self::$areSupported[$name];\n}\n\n\n\n\npublic function setFollowLinks($followLinks)\n{\n$this->followLinks = $followLinks;\n\nreturn $this;\n}\n\n\n\n\npublic function setMode($mode)\n{\n$this->mode = $mode;\n\nreturn $this;\n}\n\n\n\n\npublic function setDepths(array $depths)\n{\n$this->minDepth = 0;\n$this->maxDepth = PHP_INT_MAX;\n\nforeach ($depths as $comparator) {\nswitch ($comparator->getOperator()) {\ncase '>':\n$this->minDepth = $comparator->getTarget() + 1;\nbreak;\ncase '>=':\n$this->minDepth = $comparator->getTarget();\nbreak;\ncase '<':\n$this->maxDepth = $comparator->getTarget() - 1;\nbreak;\ncase '<=':\n$this->maxDepth = $comparator->getTarget();\nbreak;\ndefault:\n$this->minDepth = $this->maxDepth = $comparator->getTarget();\n}\n}\n\nreturn $this;\n}\n\n\n\n\npublic function setExclude(array $exclude)\n{\n$this->exclude = $exclude;\n\nreturn $this;\n}\n\n\n\n\npublic function setNames(array $names)\n{\n$this->names = $names;\n\nreturn $this;\n}\n\n\n\n\npublic function setNotNames(array $notNames)\n{\n$this->notNames = $notNames;\n\nreturn $this;\n}\n\n\n\n\npublic function setContains(array $contains)\n{\n$this->contains = $contains;\n\nreturn $this;\n}\n\n\n\n\npublic function setNotContains(array $notContains)\n{\n$this->notContains = $notContains;\n\nreturn $this;\n}\n\n\n\n\npublic function setSizes(array $sizes)\n{\n$this->sizes = $sizes;\n\nreturn $this;\n}\n\n\n\n\npublic function setDates(array $dates)\n{\n$this->dates = $dates;\n\nreturn $this;\n}\n\n\n\n\npublic function setFilters(array $filters)\n{\n$this->filters = $filters;\n\nreturn $this;\n}\n\n\n\n\npublic function setSort($sort)\n{\n$this->sort = $sort;\n\nreturn $this;\n}\n\n\n\n\npublic function setPath(array $paths)\n{\n$this->paths = $paths;\n\nreturn $this;\n}\n\n\n\n\npublic function setNotPath(array $notPaths)\n{\n$this->notPaths = $notPaths;\n\nreturn $this;\n}\n\n\n\n\n\n\n\n\n\n\n\n\nabstract protected function canBeUsed();\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Finder\\Adapter;\n\nuse Symfony\\Component\\Finder\\Iterator;\nuse Symfony\\Component\\Finder\\Shell\\Shell;\nuse Symfony\\Component\\Finder\\Expression\\Expression;\nuse Symfony\\Component\\Finder\\Shell\\Command;\nuse Symfony\\Component\\Finder\\Iterator\\SortableIterator;\nuse Symfony\\Component\\Finder\\Comparator\\NumberComparator;\nuse Symfony\\Component\\Finder\\Comparator\\DateComparator;\n\n\n\n\n\n\nabstract class AbstractFindAdapter extends AbstractAdapter\n{\n\n\n\nprotected $shell;\n\n\n\n\npublic function __construct()\n{\n$this->shell = new Shell();\n}\n\n\n\n\npublic function searchInDirectory($dir)\n{\n\n $dir = realpath($dir);\n\n\n if (Iterator\\FileTypeFilterIterator::ONLY_DIRECTORIES === $this->mode && ($this->contains || $this->notContains)) {\nreturn new Iterator\\FilePathsIterator(array(), $dir);\n}\n\n$command = Command::create();\n$find = $this->buildFindCommand($command, $dir);\n\nif ($this->followLinks) {\n$find->add('-follow');\n}\n\n$find->add('-mindepth')->add($this->minDepth + 1);\n\nif (PHP_INT_MAX !== $this->maxDepth) {\n$find->add('-maxdepth')->add($this->maxDepth + 1);\n}\n\nif (Iterator\\FileTypeFilterIterator::ONLY_DIRECTORIES === $this->mode) {\n$find->add('-type d');\n} elseif (Iterator\\FileTypeFilterIterator::ONLY_FILES === $this->mode) {\n$find->add('-type f');\n}\n\n$this->buildNamesFiltering($find, $this->names);\n$this->buildNamesFiltering($find, $this->notNames, true);\n$this->buildPathsFiltering($find, $dir, $this->paths);\n$this->buildPathsFiltering($find, $dir, $this->notPaths, true);\n$this->buildSizesFiltering($find, $this->sizes);\n$this->buildDatesFiltering($find, $this->dates);\n\n$useGrep = $this->shell->testCommand('grep') && $this->shell->testCommand('xargs');\n$useSort = is_int($this->sort) && $this->shell->testCommand('sort') && $this->shell->testCommand('cut');\n\nif ($useGrep && ($this->contains || $this->notContains)) {\n$grep = $command->ins('grep');\n$this->buildContentFiltering($grep, $this->contains);\n$this->buildContentFiltering($grep, $this->notContains, true);\n}\n\nif ($useSort) {\n$this->buildSorting($command, $this->sort);\n}\n\n$paths = $this->shell->testCommand('uniq') ? $command->add('| uniq')->execute() : array_unique($command->execute());\n$iterator = new Iterator\\FilePathsIterator($paths, $dir);\n\nif ($this->exclude) {\n$iterator = new Iterator\\ExcludeDirectoryFilterIterator($iterator, $this->exclude);\n}\n\nif (!$useGrep && ($this->contains || $this->notContains)) {\n$iterator = new Iterator\\FilecontentFilterIterator($iterator, $this->contains, $this->notContains);\n}\n\nif ($this->filters) {\n$iterator = new Iterator\\CustomFilterIterator($iterator, $this->filters);\n}\n\nif (!$useSort && $this->sort) {\n$iteratorAggregate = new Iterator\\SortableIterator($iterator, $this->sort);\n$iterator = $iteratorAggregate->getIterator();\n}\n\nreturn $iterator;\n}\n\n\n\n\nprotected function canBeUsed()\n{\nreturn $this->shell->testCommand('find');\n}\n\n\n\n\n\n\n\nprotected function buildFindCommand(Command $command, $dir)\n{\nreturn $command\n->ins('find')\n->add('find ')\n->arg($dir)\n->add('-noleaf'); \n }\n\n\n\n\n\n\nprivate function buildNamesFiltering(Command $command, array $names, $not = false)\n{\nif (0 === count($names)) {\nreturn;\n}\n\n$command->add($not ? '-not' : null)->cmd('(');\n\nforeach ($names as $i => $name) {\n$expr = Expression::create($name);\n\n\n if ($expr->isGlob() && $expr->getGlob()->isExpandable()) {\n$expr = Expression::create($expr->getGlob()->toRegex(false));\n}\n\n\n \n \n if ($expr->isRegex()) {\n$regex = $expr->getRegex();\n$regex->prepend($regex->hasStartFlag() ? '/' : '/[^/]*')\n->setStartFlag(false)\n->setStartJoker(true)\n->replaceJokers('[^/]');\nif (!$regex->hasEndFlag() || $regex->hasEndJoker()) {\n$regex->setEndJoker(false)->append('[^/]*');\n}\n}\n\n$command\n->add($i > 0 ? '-or' : null)\n->add($expr->isRegex()\n? ($expr->isCaseSensitive() ? '-regex' : '-iregex')\n: ($expr->isCaseSensitive() ? '-name' : '-iname')\n)\n->arg($expr->renderPattern());\n}\n\n$command->cmd(')');\n}\n\n\n\n\n\n\n\nprivate function buildPathsFiltering(Command $command, $dir, array $paths, $not = false)\n{\nif (0 === count($paths)) {\nreturn;\n}\n\n$command->add($not ? '-not' : null)->cmd('(');\n\nforeach ($paths as $i => $path) {\n$expr = Expression::create($path);\n\n\n if ($expr->isGlob() && $expr->getGlob()->isExpandable()) {\n$expr = Expression::create($expr->getGlob()->toRegex(false));\n}\n\n\n if ($expr->isRegex()) {\n$regex = $expr->getRegex();\n$regex->prepend($regex->hasStartFlag() ? $dir.DIRECTORY_SEPARATOR : '.*')->setEndJoker(!$regex->hasEndFlag());\n} else {\n$expr->prepend('*')->append('*');\n}\n\n$command\n->add($i > 0 ? '-or' : null)\n->add($expr->isRegex()\n? ($expr->isCaseSensitive() ? '-regex' : '-iregex')\n: ($expr->isCaseSensitive() ? '-path' : '-ipath')\n)\n->arg($expr->renderPattern());\n}\n\n$command->cmd(')');\n}\n\n\n\n\n\nprivate function buildSizesFiltering(Command $command, array $sizes)\n{\nforeach ($sizes as $i => $size) {\n$command->add($i > 0 ? '-and' : null);\n\nswitch ($size->getOperator()) {\ncase '<=':\n$command->add('-size -' . ($size->getTarget() + 1) . 'c');\nbreak;\ncase '>=':\n$command->add('-size +'. ($size->getTarget() - 1) . 'c');\nbreak;\ncase '>':\n$command->add('-size +' . $size->getTarget() . 'c');\nbreak;\ncase '!=':\n$command->add('-size -' . $size->getTarget() . 'c');\n$command->add('-size +' . $size->getTarget() . 'c');\ncase '<':\ndefault:\n$command->add('-size -' . $size->getTarget() . 'c');\n}\n}\n}\n\n\n\n\n\nprivate function buildDatesFiltering(Command $command, array $dates)\n{\nforeach ($dates as $i => $date) {\n$command->add($i > 0 ? '-and' : null);\n\n$mins = (int) round((time()-$date->getTarget()) / 60);\n\nif (0 > $mins) {\n\n $command->add(' -mmin -0');\n\n return;\n}\n\nswitch ($date->getOperator()) {\ncase '<=':\n$command->add('-mmin +' . ($mins - 1));\nbreak;\ncase '>=':\n$command->add('-mmin -' . ($mins + 1));\nbreak;\ncase '>':\n$command->add('-mmin -' . $mins);\nbreak;\ncase '!=':\n$command->add('-mmin +' . $mins.' -or -mmin -' . $mins);\nbreak;\ncase '<':\ndefault:\n$command->add('-mmin +' . $mins);\n}\n}\n}\n\n\n\n\n\n\n\nprivate function buildSorting(Command $command, $sort)\n{\n$this->buildFormatSorting($command, $sort);\n}\n\n\n\n\n\nabstract protected function buildFormatSorting(Command $command, $sort);\n\n\n\n\n\n\nabstract protected function buildContentFiltering(Command $command, array $contains, $not = false);\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Finder\\Adapter;\n\nuse Symfony\\Component\\Finder\\Iterator;\n\n\n\n\n\n\nclass PhpAdapter extends AbstractAdapter\n{\n\n\n\npublic function searchInDirectory($dir)\n{\n$flags = \\RecursiveDirectoryIterator::SKIP_DOTS;\n\nif ($this->followLinks) {\n$flags |= \\RecursiveDirectoryIterator::FOLLOW_SYMLINKS;\n}\n\n$iterator = new \\RecursiveIteratorIterator(\nnew Iterator\\RecursiveDirectoryIterator($dir, $flags),\n\\RecursiveIteratorIterator::SELF_FIRST\n);\n\nif ($this->minDepth > 0 || $this->maxDepth < PHP_INT_MAX) {\n$iterator = new Iterator\\DepthRangeFilterIterator($iterator, $this->minDepth, $this->maxDepth);\n}\n\nif ($this->mode) {\n$iterator = new Iterator\\FileTypeFilterIterator($iterator, $this->mode);\n}\n\nif ($this->exclude) {\n$iterator = new Iterator\\ExcludeDirectoryFilterIterator($iterator, $this->exclude);\n}\n\nif ($this->names || $this->notNames) {\n$iterator = new Iterator\\FilenameFilterIterator($iterator, $this->names, $this->notNames);\n}\n\nif ($this->contains || $this->notContains) {\n$iterator = new Iterator\\FilecontentFilterIterator($iterator, $this->contains, $this->notContains);\n}\n\nif ($this->sizes) {\n$iterator = new Iterator\\SizeRangeFilterIterator($iterator, $this->sizes);\n}\n\nif ($this->dates) {\n$iterator = new Iterator\\DateRangeFilterIterator($iterator, $this->dates);\n}\n\nif ($this->filters) {\n$iterator = new Iterator\\CustomFilterIterator($iterator, $this->filters);\n}\n\nif ($this->sort) {\n$iteratorAggregate = new Iterator\\SortableIterator($iterator, $this->sort);\n$iterator = $iteratorAggregate->getIterator();\n}\n\nif ($this->paths || $this->notPaths) {\n$iterator = new Iterator\\PathFilterIterator($iterator, $this->paths, $this->notPaths);\n}\n\nreturn $iterator;\n}\n\n\n\n\npublic function getName()\n{\nreturn 'php';\n}\n\n\n\n\nprotected function canBeUsed()\n{\nreturn true;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Finder;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass Glob\n{\n\n\n\n\n\n\n\n\n\npublic static function toRegex($glob, $strictLeadingDot = true, $strictWildcardSlash = true)\n{\n$firstByte = true;\n$escaping = false;\n$inCurlies = 0;\n$regex = '';\n$sizeGlob = strlen($glob);\nfor ($i = 0; $i < $sizeGlob; $i++) {\n$car = $glob[$i];\nif ($firstByte) {\nif ($strictLeadingDot && '.' !== $car) {\n$regex .= '(?=[^\\.])';\n}\n\n$firstByte = false;\n}\n\nif ('/' === $car) {\n$firstByte = true;\n}\n\nif ('.' === $car || '(' === $car || ')' === $car || '|' === $car || '+' === $car || '^' === $car || '$' === $car) {\n$regex .= \"\\\\$car\";\n} elseif ('*' === $car) {\n$regex .= $escaping ? '\\\\*' : ($strictWildcardSlash ? '[^/]*' : '.*');\n} elseif ('?' === $car) {\n$regex .= $escaping ? '\\\\?' : ($strictWildcardSlash ? '[^/]' : '.');\n} elseif ('{' === $car) {\n$regex .= $escaping ? '\\\\{' : '(';\nif (!$escaping) {\n++$inCurlies;\n}\n} elseif ('}' === $car && $inCurlies) {\n$regex .= $escaping ? '}' : ')';\nif (!$escaping) {\n--$inCurlies;\n}\n} elseif (',' === $car && $inCurlies) {\n$regex .= $escaping ? ',' : '|';\n} elseif ('\\\\' === $car) {\nif ($escaping) {\n$regex .= '\\\\\\\\';\n$escaping = false;\n} else {\n$escaping = true;\n}\n\ncontinue;\n} else {\n$regex .= $car;\n}\n$escaping = false;\n}\n\nreturn '#^'.$regex.'$#';\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Finder\\Iterator;\n\n\n\n\n\n\nclass DepthRangeFilterIterator extends FilterIterator\n{\nprivate $minDepth = 0;\n\n\n\n\n\n\n\n\npublic function __construct(\\RecursiveIteratorIterator $iterator, $minDepth = 0, $maxDepth = PHP_INT_MAX)\n{\n$this->minDepth = $minDepth;\n$iterator->setMaxDepth(PHP_INT_MAX === $maxDepth ? -1 : $maxDepth);\n\nparent::__construct($iterator);\n}\n\n\n\n\n\n\npublic function accept()\n{\nreturn $this->getInnerIterator()->getDepth() >= $this->minDepth;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Finder\\Iterator;\n\n\n\n\n\n\nclass SortableIterator implements \\IteratorAggregate\n{\nconst SORT_BY_NAME = 1;\nconst SORT_BY_TYPE = 2;\nconst SORT_BY_ACCESSED_TIME = 3;\nconst SORT_BY_CHANGED_TIME = 4;\nconst SORT_BY_MODIFIED_TIME = 5;\n\nprivate $iterator;\nprivate $sort;\n\n\n\n\n\n\n\n\n\npublic function __construct(\\Traversable $iterator, $sort)\n{\n$this->iterator = $iterator;\n\nif (self::SORT_BY_NAME === $sort) {\n$this->sort = function ($a, $b) {\nreturn strcmp($a->getRealpath(), $b->getRealpath());\n};\n} elseif (self::SORT_BY_TYPE === $sort) {\n$this->sort = function ($a, $b) {\nif ($a->isDir() && $b->isFile()) {\nreturn -1;\n} elseif ($a->isFile() && $b->isDir()) {\nreturn 1;\n}\n\nreturn strcmp($a->getRealpath(), $b->getRealpath());\n};\n} elseif (self::SORT_BY_ACCESSED_TIME === $sort) {\n$this->sort = function ($a, $b) {\nreturn ($a->getATime() > $b->getATime());\n};\n} elseif (self::SORT_BY_CHANGED_TIME === $sort) {\n$this->sort = function ($a, $b) {\nreturn ($a->getCTime() > $b->getCTime());\n};\n} elseif (self::SORT_BY_MODIFIED_TIME === $sort) {\n$this->sort = function ($a, $b) {\nreturn ($a->getMTime() > $b->getMTime());\n};\n} elseif (is_callable($sort)) {\n$this->sort = $sort;\n} else {\nthrow new \\InvalidArgumentException('The SortableIterator takes a PHP callback or a valid built-in sort algorithm as an argument.');\n}\n}\n\npublic function getIterator()\n{\n$array = iterator_to_array($this->iterator, true);\nuasort($array, $this->sort);\n\nreturn new \\ArrayIterator($array);\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Finder\\Iterator;\n\n\n\n\n\n\n\nclass FilecontentFilterIterator extends MultiplePcreFilterIterator\n{\n\n\n\n\n\npublic function accept()\n{\nif (!$this->matchRegexps && !$this->noMatchRegexps) {\nreturn true;\n}\n\n$fileinfo = $this->current();\n\nif ($fileinfo->isDir() || !$fileinfo->isReadable()) {\nreturn false;\n}\n\n$content = $fileinfo->getContents();\nif (!$content) {\nreturn false;\n}\n\n\n foreach ($this->noMatchRegexps as $regex) {\nif (preg_match($regex, $content)) {\nreturn false;\n}\n}\n\n\n $match = true;\nif ($this->matchRegexps) {\n$match = false;\nforeach ($this->matchRegexps as $regex) {\nif (preg_match($regex, $content)) {\nreturn true;\n}\n}\n}\n\nreturn $match;\n}\n\n\n\n\n\n\n\n\nprotected function toRegex($str)\n{\nreturn $this->isRegex($str) ? $str : '/'.preg_quote($str, '/').'/';\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Finder\\Iterator;\n\nuse Symfony\\Component\\Finder\\SplFileInfo;\n\n\n\n\n\n\nclass FilePathsIterator extends \\ArrayIterator\n{\n\n\n\nprivate $baseDir;\n\n\n\n\nprivate $baseDirLength;\n\n\n\n\nprivate $subPath;\n\n\n\n\nprivate $subPathname;\n\n\n\n\nprivate $current;\n\n\n\n\n\npublic function __construct(array $paths, $baseDir)\n{\n$this->baseDir = $baseDir;\n$this->baseDirLength = strlen($baseDir);\n\nparent::__construct($paths);\n}\n\n\n\n\n\n\n\npublic function __call($name, array $arguments)\n{\nreturn call_user_func_array(array($this->current(), $name), $arguments);\n}\n\n\n\n\n\n\npublic function current()\n{\nreturn $this->current;\n}\n\n\n\n\npublic function key()\n{\nreturn $this->current->getPathname();\n}\n\npublic function next()\n{\nparent::next();\n$this->buildProperties();\n}\n\npublic function rewind()\n{\nparent::rewind();\n$this->buildProperties();\n}\n\n\n\n\npublic function getSubPath()\n{\nreturn $this->subPath;\n}\n\n\n\n\npublic function getSubPathname()\n{\nreturn $this->subPathname;\n}\n\nprivate function buildProperties()\n{\n$absolutePath = parent::current();\n\nif ($this->baseDir === substr($absolutePath, 0, $this->baseDirLength)) {\n$this->subPathname = ltrim(substr($absolutePath, $this->baseDirLength), '/\\\\');\n$dir = dirname($this->subPathname);\n$this->subPath = '.' === $dir ? '' : $dir;\n} else {\n$this->subPath = $this->subPathname = '';\n}\n\n$this->current = new SplFileInfo(parent::current(), $this->subPath, $this->subPathname);\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Finder\\Iterator;\n\nuse Symfony\\Component\\Finder\\Comparator\\NumberComparator;\n\n\n\n\n\n\nclass SizeRangeFilterIterator extends FilterIterator\n{\nprivate $comparators = array();\n\n\n\n\n\n\n\npublic function __construct(\\Iterator $iterator, array $comparators)\n{\n$this->comparators = $comparators;\n\nparent::__construct($iterator);\n}\n\n\n\n\n\n\npublic function accept()\n{\n$fileinfo = $this->current();\nif (!$fileinfo->isFile()) {\nreturn true;\n}\n\n$filesize = $fileinfo->getSize();\nforeach ($this->comparators as $compare) {\nif (!$compare->test($filesize)) {\nreturn false;\n}\n}\n\nreturn true;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Finder\\Iterator;\n\n\n\n\n\n\nclass ExcludeDirectoryFilterIterator extends FilterIterator\n{\nprivate $patterns;\n\n\n\n\n\n\n\npublic function __construct(\\Iterator $iterator, array $directories)\n{\n$this->patterns = array();\nforeach ($directories as $directory) {\n$this->patterns[] = '#(^|/)'.preg_quote($directory, '#').'(/|$)#';\n}\n\nparent::__construct($iterator);\n}\n\n\n\n\n\n\npublic function accept()\n{\n$path = $this->isDir() ? $this->current()->getRelativePathname() : $this->current()->getRelativePath();\n$path = strtr($path, '\\\\', '/');\nforeach ($this->patterns as $pattern) {\nif (preg_match($pattern, $path)) {\nreturn false;\n}\n}\n\nreturn true;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Finder\\Iterator;\n\n\n\n\n\n\n\n\nabstract class FilterIterator extends \\FilterIterator\n{\n\n\n\n\n\n\npublic function rewind()\n{\n$iterator = $this;\nwhile ($iterator instanceof \\OuterIterator) {\nif ($iterator->getInnerIterator() instanceof \\FilesystemIterator) {\n$iterator->getInnerIterator()->next();\n$iterator->getInnerIterator()->rewind();\n}\n$iterator = $iterator->getInnerIterator();\n}\n\nparent::rewind();\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Finder\\Iterator;\n\nuse Symfony\\Component\\Finder\\Expression\\Expression;\n\n\n\n\n\n\nabstract class MultiplePcreFilterIterator extends FilterIterator\n{\nprotected $matchRegexps;\nprotected $noMatchRegexps;\n\n\n\n\n\n\n\n\npublic function __construct(\\Iterator $iterator, array $matchPatterns, array $noMatchPatterns)\n{\n$this->matchRegexps = array();\nforeach ($matchPatterns as $pattern) {\n$this->matchRegexps[] = $this->toRegex($pattern);\n}\n\n$this->noMatchRegexps = array();\nforeach ($noMatchPatterns as $pattern) {\n$this->noMatchRegexps[] = $this->toRegex($pattern);\n}\n\nparent::__construct($iterator);\n}\n\n\n\n\n\n\n\n\nprotected function isRegex($str)\n{\nreturn Expression::create($str)->isRegex();\n}\n\n\n\n\n\n\n\n\nabstract protected function toRegex($str);\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Finder\\Iterator;\n\n\n\n\n\n\n\n\n\nclass CustomFilterIterator extends FilterIterator\n{\nprivate $filters = array();\n\n\n\n\n\n\n\n\n\npublic function __construct(\\Iterator $iterator, array $filters)\n{\nforeach ($filters as $filter) {\nif (!is_callable($filter)) {\nthrow new \\InvalidArgumentException('Invalid PHP callback.');\n}\n}\n$this->filters = $filters;\n\nparent::__construct($iterator);\n}\n\n\n\n\n\n\npublic function accept()\n{\n$fileinfo = $this->current();\n\nforeach ($this->filters as $filter) {\nif (false === call_user_func($filter, $fileinfo)) {\nreturn false;\n}\n}\n\nreturn true;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Finder\\Iterator;\n\nuse Symfony\\Component\\Finder\\Expression\\Expression;\n\n\n\n\n\n\nclass FilenameFilterIterator extends MultiplePcreFilterIterator\n{\n\n\n\n\n\n\npublic function accept()\n{\n$filename = $this->current()->getFilename();\n\n\n foreach ($this->noMatchRegexps as $regex) {\nif (preg_match($regex, $filename)) {\nreturn false;\n}\n}\n\n\n $match = true;\nif ($this->matchRegexps) {\n$match = false;\nforeach ($this->matchRegexps as $regex) {\nif (preg_match($regex, $filename)) {\nreturn true;\n}\n}\n}\n\nreturn $match;\n}\n\n\n\n\n\n\n\n\n\n\n\nprotected function toRegex($str)\n{\nreturn Expression::create($str)->getRegex()->render();\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Finder\\Iterator;\n\nuse Symfony\\Component\\Finder\\Comparator\\DateComparator;\n\n\n\n\n\n\nclass DateRangeFilterIterator extends FilterIterator\n{\nprivate $comparators = array();\n\n\n\n\n\n\n\npublic function __construct(\\Iterator $iterator, array $comparators)\n{\n$this->comparators = $comparators;\n\nparent::__construct($iterator);\n}\n\n\n\n\n\n\npublic function accept()\n{\n$fileinfo = $this->current();\n\nif (!$fileinfo->isFile()) {\nreturn true;\n}\n\n$filedate = $fileinfo->getMTime();\nforeach ($this->comparators as $compare) {\nif (!$compare->test($filedate)) {\nreturn false;\n}\n}\n\nreturn true;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Finder\\Iterator;\n\n\n\n\n\n\nclass FileTypeFilterIterator extends FilterIterator\n{\nconst ONLY_FILES = 1;\nconst ONLY_DIRECTORIES = 2;\n\nprivate $mode;\n\n\n\n\n\n\n\npublic function __construct(\\Iterator $iterator, $mode)\n{\n$this->mode = $mode;\n\nparent::__construct($iterator);\n}\n\n\n\n\n\n\npublic function accept()\n{\n$fileinfo = $this->current();\nif (self::ONLY_DIRECTORIES === (self::ONLY_DIRECTORIES & $this->mode) && $fileinfo->isFile()) {\nreturn false;\n} elseif (self::ONLY_FILES === (self::ONLY_FILES & $this->mode) && $fileinfo->isDir()) {\nreturn false;\n}\n\nreturn true;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Finder\\Iterator;\n\nuse Symfony\\Component\\Finder\\SplFileInfo;\n\n\n\n\n\n\nclass RecursiveDirectoryIterator extends \\RecursiveDirectoryIterator\n{\npublic function __construct($path, $flags)\n{\nif ($flags & (self::CURRENT_AS_PATHNAME | self::CURRENT_AS_SELF)) {\nthrow new \\RuntimeException('This iterator only support returning current as fileinfo.');\n}\n\nparent::__construct($path, $flags);\n}\n\n\n\n\n\n\npublic function current()\n{\nreturn new SplFileInfo(parent::current()->getPathname(), $this->getSubPath(), $this->getSubPathname());\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Finder\\Iterator;\n\n\n\n\n\n\n\nclass PathFilterIterator extends MultiplePcreFilterIterator\n{\n\n\n\n\n\n\npublic function accept()\n{\n$filename = $this->current()->getRelativePathname();\n\nif (defined('PHP_WINDOWS_VERSION_MAJOR')) {\n$filename = strtr($filename, '\\\\', '/');\n}\n\n\n foreach ($this->noMatchRegexps as $regex) {\nif (preg_match($regex, $filename)) {\nreturn false;\n}\n}\n\n\n $match = true;\nif ($this->matchRegexps) {\n$match = false;\nforeach ($this->matchRegexps as $regex) {\nif (preg_match($regex, $filename)) {\nreturn true;\n}\n}\n}\n\nreturn $match;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nprotected function toRegex($str)\n{\nreturn $this->isRegex($str) ? $str : '/'.preg_quote($str, '/').'/';\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Finder\\Comparator;\n\n\n\n\n\n\nclass DateComparator extends Comparator\n{\n\n\n\n\n\n\n\n\npublic function __construct($test)\n{\nif (!preg_match('#^\\s*(==|!=|[<>]=?|after|since|before|until)?\\s*(.+?)\\s*$#i', $test, $matches)) {\nthrow new \\InvalidArgumentException(sprintf('Don\\'t understand \"%s\" as a date test.', $test));\n}\n\ntry {\n$date = new \\DateTime($matches[2]);\n$target = $date->format('U');\n} catch (\\Exception $e) {\nthrow new \\InvalidArgumentException(sprintf('\"%s\" is not a valid date.', $matches[2]));\n}\n\n$operator = isset($matches[1]) ? $matches[1] : '==';\nif ('since' === $operator || 'after' === $operator) {\n$operator = '>';\n}\n\nif ('until' === $operator || 'before' === $operator) {\n$operator = '<';\n}\n\n$this->setOperator($operator);\n$this->setTarget($target);\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Finder\\Comparator;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass NumberComparator extends Comparator\n{\n\n\n\n\n\n\n\npublic function __construct($test)\n{\nif (!preg_match('#^\\s*(==|!=|[<>]=?)?\\s*([0-9\\.]+)\\s*([kmg]i?)?\\s*$#i', $test, $matches)) {\nthrow new \\InvalidArgumentException(sprintf('Don\\'t understand \"%s\" as a number test.', $test));\n}\n\n$target = $matches[2];\nif (!is_numeric($target)) {\nthrow new \\InvalidArgumentException(sprintf('Invalid number \"%s\".', $target));\n}\nif (isset($matches[3])) {\n\n switch (strtolower($matches[3])) {\ncase 'k':\n$target *= 1000;\nbreak;\ncase 'ki':\n$target *= 1024;\nbreak;\ncase 'm':\n$target *= 1000000;\nbreak;\ncase 'mi':\n$target *= 1024*1024;\nbreak;\ncase 'g':\n$target *= 1000000000;\nbreak;\ncase 'gi':\n$target *= 1024*1024*1024;\nbreak;\n}\n}\n\n$this->setTarget($target);\n$this->setOperator(isset($matches[1]) ? $matches[1] : '==');\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Finder\\Comparator;\n\n\n\n\n\n\nclass Comparator\n{\nprivate $target;\nprivate $operator = '==';\n\n\n\n\n\n\npublic function getTarget()\n{\nreturn $this->target;\n}\n\n\n\n\n\n\npublic function setTarget($target)\n{\n$this->target = $target;\n}\n\n\n\n\n\n\npublic function getOperator()\n{\nreturn $this->operator;\n}\n\n\n\n\n\n\n\n\npublic function setOperator($operator)\n{\nif (!$operator) {\n$operator = '==';\n}\n\nif (!in_array($operator, array('>', '<', '>=', '<=', '==', '!='))) {\nthrow new \\InvalidArgumentException(sprintf('Invalid operator \"%s\".', $operator));\n}\n\n$this->operator = $operator;\n}\n\n\n\n\n\n\n\n\npublic function test($test)\n{\nswitch ($this->operator) {\ncase '>':\nreturn $test > $this->target;\ncase '>=':\nreturn $test >= $this->target;\ncase '<':\nreturn $test < $this->target;\ncase '<=':\nreturn $test <= $this->target;\ncase '!=':\nreturn $test != $this->target;\n}\n\nreturn $test == $this->target;\n}\n}\n<?php\n\nnamespace Symfony\\Component\\Finder\\Exception;\n\n\n\n\ninterface ExceptionInterface\n{\n\n\n\npublic function getAdapter();\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Finder\\Exception;\n\n\n\n\nclass OperationNotPermitedException extends AdapterFailureException\n{\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Finder\\Exception;\n\nuse Symfony\\Component\\Finder\\Adapter\\AdapterInterface;\n\n\n\n\n\n\nclass AdapterFailureException extends \\RuntimeException implements ExceptionInterface\n{\n\n\n\nprivate $adapter;\n\n\n\n\n\n\npublic function __construct(AdapterInterface $adapter, $message = null, \\Exception $previous = null)\n{\n$this->adapter = $adapter;\nparent::__construct($message ?: 'Search failed with \"'.$adapter->getName().'\" adapter.', $previous);\n}\n\n\n\n\npublic function getAdapter()\n{\nreturn $this->adapter;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Finder\\Exception;\n\nuse Symfony\\Component\\Finder\\Adapter\\AdapterInterface;\nuse Symfony\\Component\\Finder\\Shell\\Command;\n\n\n\n\nclass ShellCommandFailureException extends AdapterFailureException\n{\n\n\n\nprivate $command;\n\n\n\n\n\n\npublic function __construct(AdapterInterface $adapter, Command $command, \\Exception $previous = null)\n{\n$this->command = $command;\nparent::__construct($adapter, 'Shell command failed: \"'.$command->join().'\".', $previous);\n}\n\n\n\n\npublic function getCommand()\n{\nreturn $this->command;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Symfony\\Component\\Finder;\n\n\n\n\n\n\nclass SplFileInfo extends \\SplFileInfo\n{\nprivate $relativePath;\nprivate $relativePathname;\n\n\n\n\n\n\n\n\npublic function __construct($file, $relativePath, $relativePathname)\n{\nparent::__construct($file);\n$this->relativePath = $relativePath;\n$this->relativePathname = $relativePathname;\n}\n\n\n\n\n\n\npublic function getRelativePath()\n{\nreturn $this->relativePath;\n}\n\n\n\n\n\n\npublic function getRelativePathname()\n{\nreturn $this->relativePathname;\n}\n\n\n\n\n\n\n\n\npublic function getContents()\n{\n$level = error_reporting(0);\n$content = file_get_contents($this->getRealpath());\nerror_reporting($level);\nif (false === $content) {\n$error = error_get_last();\nthrow new \\RuntimeException($error['message']);\n}\n\nreturn $content;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Seld\\JsonLint;\n\nclass Undefined\n{\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Seld\\JsonLint;\n\nuse stdClass;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass JsonParser\n{\nconst DETECT_KEY_CONFLICTS = 1;\nconst ALLOW_DUPLICATE_KEYS = 2;\n\nprivate $flags;\nprivate $stack;\nprivate $vstack; \n private $lstack; \n\nprivate $yy;\nprivate $symbols = array(\n'error' => 2,\n'JSONString' => 3,\n'STRING' => 4,\n'JSONNumber' => 5,\n'NUMBER' => 6,\n'JSONNullLiteral' => 7,\n'NULL' => 8,\n'JSONBooleanLiteral' => 9,\n'TRUE' => 10,\n'FALSE' => 11,\n'JSONText' => 12,\n'JSONValue' => 13,\n'EOF' => 14,\n'JSONObject' => 15,\n'JSONArray' => 16,\n'{' => 17,\n'}' => 18,\n'JSONMemberList' => 19,\n'JSONMember' => 20,\n':' => 21,\n',' => 22,\n'[' => 23,\n']' => 24,\n'JSONElementList' => 25,\n'$accept' => 0,\n'$end' => 1,\n);\n\nprivate $terminals_ = array(\n2 => \"error\",\n4 => \"STRING\",\n6 => \"NUMBER\",\n8 => \"NULL\",\n10 => \"TRUE\",\n11 => \"FALSE\",\n14 => \"EOF\",\n17 => \"{\",\n18 => \"}\",\n21 => \":\",\n22 => \",\",\n23 => \"[\",\n24 => \"]\",\n);\n\nprivate $productions_ = array(\n0,\narray(3, 1),\narray(5, 1),\narray(7, 1),\narray(9, 1),\narray(9, 1),\narray(12, 2),\narray(13, 1),\narray(13, 1),\narray(13, 1),\narray(13, 1),\narray(13, 1),\narray(13, 1),\narray(15, 2),\narray(15, 3),\narray(20, 3),\narray(19, 1),\narray(19, 3),\narray(16, 2),\narray(16, 3),\narray(25, 1),\narray(25, 3)\n);\n\nprivate $table = array(array(3 => 5, 4 => array(1,12), 5 => 6, 6 => array(1,13), 7 => 3, 8 => array(1,9), 9 => 4, 10 => array(1,10), 11 => array(1,11), 12 => 1, 13 => 2, 15 => 7, 16 => 8, 17 => array(1,14), 23 => array(1,15)), array( 1 => array(3)), array( 14 => array(1,16)), array( 14 => array(2,7), 18 => array(2,7), 22 => array(2,7), 24 => array(2,7)), array( 14 => array(2,8), 18 => array(2,8), 22 => array(2,8), 24 => array(2,8)), array( 14 => array(2,9), 18 => array(2,9), 22 => array(2,9), 24 => array(2,9)), array( 14 => array(2,10), 18 => array(2,10), 22 => array(2,10), 24 => array(2,10)), array( 14 => array(2,11), 18 => array(2,11), 22 => array(2,11), 24 => array(2,11)), array( 14 => array(2,12), 18 => array(2,12), 22 => array(2,12), 24 => array(2,12)), array( 14 => array(2,3), 18 => array(2,3), 22 => array(2,3), 24 => array(2,3)), array( 14 => array(2,4), 18 => array(2,4), 22 => array(2,4), 24 => array(2,4)), array( 14 => array(2,5), 18 => array(2,5), 22 => array(2,5), 24 => array(2,5)), array( 14 => array(2,1), 18 => array(2,1), 21 => array(2,1), 22 => array(2,1), 24 => array(2,1)), array( 14 => array(2,2), 18 => array(2,2), 22 => array(2,2), 24 => array(2,2)), array( 3 => 20, 4 => array(1,12), 18 => array(1,17), 19 => 18, 20 => 19 ), array( 3 => 5, 4 => array(1,12), 5 => 6, 6 => array(1,13), 7 => 3, 8 => array(1,9), 9 => 4, 10 => array(1,10), 11 => array(1,11), 13 => 23, 15 => 7, 16 => 8, 17 => array(1,14), 23 => array(1,15), 24 => array(1,21), 25 => 22 ), array( 1 => array(2,6)), array( 14 => array(2,13), 18 => array(2,13), 22 => array(2,13), 24 => array(2,13)), array( 18 => array(1,24), 22 => array(1,25)), array( 18 => array(2,16), 22 => array(2,16)), array( 21 => array(1,26)), array( 14 => array(2,18), 18 => array(2,18), 22 => array(2,18), 24 => array(2,18)), array( 22 => array(1,28), 24 => array(1,27)), array( 22 => array(2,20), 24 => array(2,20)), array( 14 => array(2,14), 18 => array(2,14), 22 => array(2,14), 24 => array(2,14)), array( 3 => 20, 4 => array(1,12), 20 => 29 ), array( 3 => 5, 4 => array(1,12), 5 => 6, 6 => array(1,13), 7 => 3, 8 => array(1,9), 9 => 4, 10 => array(1,10), 11 => array(1,11), 13 => 30, 15 => 7, 16 => 8, 17 => array(1,14), 23 => array(1,15)), array( 14 => array(2,19), 18 => array(2,19), 22 => array(2,19), 24 => array(2,19)), array( 3 => 5, 4 => array(1,12), 5 => 6, 6 => array(1,13), 7 => 3, 8 => array(1,9), 9 => 4, 10 => array(1,10), 11 => array(1,11), 13 => 31, 15 => 7, 16 => 8, 17 => array(1,14), 23 => array(1,15)), array( 18 => array(2,17), 22 => array(2,17)), array( 18 => array(2,15), 22 => array(2,15)), array( 22 => array(2,21), 24 => array(2,21)),\n);\n\nprivate $defaultActions = array(\n16 => array(2, 6)\n);\n\n\n\n\n\npublic function lint($input)\n{\ntry {\n$this->parse($input);\n} catch (ParsingException $e) {\nreturn $e;\n}\n}\n\n\n\n\n\n\npublic function parse($input, $flags = 0)\n{\n$this->flags = $flags;\n\n$this->stack = array(0);\n$this->vstack = array(null);\n$this->lstack = array();\n\n$yytext = '';\n$yylineno = 0;\n$yyleng = 0;\n$recovering = 0;\n$TERROR = 2;\n$EOF = 1;\n\n$this->lexer = new Lexer();\n$this->lexer->setInput($input);\n\n$yyloc = $this->lexer->yylloc;\n$this->lstack[] = $yyloc;\n\n$symbol = null;\n$preErrorSymbol = null;\n$state = null;\n$action = null;\n$a = null;\n$r = null;\n$yyval = new stdClass;\n$p = null;\n$len = null;\n$newState = null;\n$expected = null;\n$errStr = null;\n\nwhile (true) {\n\n $state = $this->stack[count($this->stack)-1];\n\n\n if (isset($this->defaultActions[$state])) {\n$action = $this->defaultActions[$state];\n} else {\nif ($symbol == null) {\n$symbol = $this->lex();\n}\n\n $action = isset($this->table[$state][$symbol]) ? $this->table[$state][$symbol] : false;\n}\n\n\n if (!$action || !$action[0]) {\nif (!$recovering) {\n\n $expected = array();\nforeach ($this->table[$state] as $p => $ignore) {\nif (isset($this->terminals_[$p]) && $p > 2) {\n$expected[] = \"'\" . $this->terminals_[$p] . \"'\";\n}\n}\n\n$message = null;\nif (in_array(\"'STRING'\", $expected) && in_array(substr($this->lexer->match, 0, 1), array('\"', \"'\"))) {\n$message = \"Invalid string\";\nif (\"'\" === substr($this->lexer->match, 0, 1)) {\n$message .= \", it appears you used single quotes instead of double quotes\";\n} elseif (preg_match('{\".+?(\\\\\\\\[^\"bfnrt/\\\\\\\\u])}', $this->lexer->getUpcomingInput(), $match)) {\n$message .= \", it appears you have an unescaped backslash at: \".$match[1];\n} elseif (preg_match('{\"(?:[^\"]+|\\\\\\\\\")*$}m', $this->lexer->getUpcomingInput())) {\n$message .= \", it appears you forgot to terminated the string, or attempted to write a multiline string which is invalid\";\n}\n}\n\n$errStr = 'Parse error on line ' . ($yylineno+1) . \":\\n\";\n$errStr .= $this->lexer->showPosition() . \"\\n\";\nif ($message) {\n$errStr .= $message;\n} else {\n$errStr .= (count($expected) > 1) ? \"Expected one of: \" : \"Expected: \";\n$errStr .= implode(', ', $expected);\n}\n\nif (',' === substr(trim($this->lexer->getPastInput()), -1)) {\n$errStr .= \" - It appears you have an extra trailing comma\";\n}\n\n$this->parseError($errStr, array(\n'text' => $this->lexer->match,\n'token' => !empty($this->terminals_[$symbol]) ? $this->terminals_[$symbol] : $symbol,\n'line' => $this->lexer->yylineno,\n'loc' => $yyloc,\n'expected' => $expected,\n));\n}\n\n\n if ($recovering == 3) {\nif ($symbol == $EOF) {\nthrow new ParsingException($errStr ?: 'Parsing halted.');\n}\n\n\n $yyleng = $this->lexer->yyleng;\n$yytext = $this->lexer->yytext;\n$yylineno = $this->lexer->yylineno;\n$yyloc = $this->lexer->yylloc;\n$symbol = $this->lex();\n}\n\n\n while (true) {\n\n if (array_key_exists($TERROR, $this->table[$state])) {\nbreak;\n}\nif ($state == 0) {\nthrow new ParsingException($errStr ?: 'Parsing halted.');\n}\n$this->popStack(1);\n$state = $this->stack[count($this->stack)-1];\n}\n\n$preErrorSymbol = $symbol; \n $symbol = $TERROR; \n $state = $this->stack[count($this->stack)-1];\n$action = isset($this->table[$state][$TERROR]) ? $this->table[$state][$TERROR] : false;\n$recovering = 3; \n }\n\n\n if (is_array($action[0]) && count($action) > 1) {\nthrow new ParsingException('Parse Error: multiple actions possible at state: ' . $state . ', token: ' . $symbol);\n}\n\nswitch ($action[0]) {\ncase 1: \n $this->stack[] = $symbol;\n$this->vstack[] = $this->lexer->yytext;\n$this->lstack[] = $this->lexer->yylloc;\n$this->stack[] = $action[1]; \n $symbol = null;\nif (!$preErrorSymbol) { \n $yyleng = $this->lexer->yyleng;\n$yytext = $this->lexer->yytext;\n$yylineno = $this->lexer->yylineno;\n$yyloc = $this->lexer->yylloc;\nif ($recovering > 0) {\n$recovering--;\n}\n} else { \n $symbol = $preErrorSymbol;\n$preErrorSymbol = null;\n}\nbreak;\n\ncase 2: \n $len = $this->productions_[$action[1]][1];\n\n\n $yyval->token = $this->vstack[count($this->vstack) - $len]; \n \n $yyval->store = array( \n 'first_line' => $this->lstack[count($this->lstack) - ($len ?: 1)]['first_line'],\n'last_line' => $this->lstack[count($this->lstack) - 1]['last_line'],\n'first_column' => $this->lstack[count($this->lstack) - ($len ?: 1)]['first_column'],\n'last_column' => $this->lstack[count($this->lstack) - 1]['last_column'],\n);\n$r = $this->performAction($yyval, $yytext, $yyleng, $yylineno, $action[1], $this->vstack, $this->lstack);\n\nif (!$r instanceof Undefined) {\nreturn $r;\n}\n\nif ($len) {\n$this->popStack($len);\n}\n\n$this->stack[] = $this->productions_[$action[1]][0]; \n $this->vstack[] = $yyval->token;\n$this->lstack[] = $yyval->store;\n$newState = $this->table[$this->stack[count($this->stack)-2]][$this->stack[count($this->stack)-1]];\n$this->stack[] = $newState;\nbreak;\n\ncase 3: \n\nreturn true;\n}\n}\n\nreturn true;\n}\n\nprotected function parseError($str, $hash)\n{\nthrow new ParsingException($str, $hash);\n}\n\n\n \n \n private function performAction(stdClass $yyval, $yytext, $yyleng, $yylineno, $yystate, &$tokens)\n{\n\n $len = count($tokens) - 1;\nswitch ($yystate) {\ncase 1:\n$yytext = preg_replace_callback('{(?:\\\\\\\\[\"bfnrt/\\\\\\\\]|\\\\\\\\u[a-fA-F0-9]{4})}', array($this, 'stringInterpolation'), $yytext);\n$yyval->token = $yytext;\nbreak;\ncase 2:\nif (strpos($yytext, 'e') !== false || strpos($yytext, 'E') !== false) {\n$yyval->token = floatval($yytext);\n} else {\n$yyval->token = strpos($yytext, '.') === false ? intval($yytext) : floatval($yytext);\n}\nbreak;\ncase 3:\n$yyval->token = null;\nbreak;\ncase 4:\n$yyval->token = true;\nbreak;\ncase 5:\n$yyval->token = false;\nbreak;\ncase 6:\nreturn $yyval->token = $tokens[$len-1];\ncase 13:\n$yyval->token = new stdClass;\nbreak;\ncase 14:\n$yyval->token = $tokens[$len-1];\nbreak;\ncase 15:\n$yyval->token = array($tokens[$len-2], $tokens[$len]);\nbreak;\ncase 16:\n$yyval->token = new stdClass;\n$property = $tokens[$len][0] === '' ? '_empty_' : $tokens[$len][0];\n$yyval->token->$property = $tokens[$len][1];\nbreak;\ncase 17:\n$yyval->token = $tokens[$len-2];\n$key = $tokens[$len][0] === '' ? '_empty_' : $tokens[$len][0];\nif (($this->flags & self::DETECT_KEY_CONFLICTS) && isset($tokens[$len-2]->{$key})) {\n$errStr = 'Parse error on line ' . ($yylineno+1) . \":\\n\";\n$errStr .= $this->lexer->showPosition() . \"\\n\";\n$errStr .= \"Duplicate key: \".$tokens[$len][0];\nthrow new ParsingException($errStr);\n} elseif (($this->flags & self::ALLOW_DUPLICATE_KEYS) && isset($tokens[$len-2]->{$key})) {\n$duplicateCount = 1;\ndo {\n$duplicateKey = $key . '.' . $duplicateCount++;\n} while (isset($tokens[$len-2]->$duplicateKey));\n$key = $duplicateKey;\n}\n$tokens[$len-2]->$key = $tokens[$len][1];\nbreak;\ncase 18:\n$yyval->token = array();\nbreak;\ncase 19:\n$yyval->token = $tokens[$len-1];\nbreak;\ncase 20:\n$yyval->token = array($tokens[$len]);\nbreak;\ncase 21:\n$tokens[$len-2][] = $tokens[$len];\n$yyval->token = $tokens[$len-2];\nbreak;\n}\n\nreturn new Undefined();\n}\n\nprivate function stringInterpolation($match)\n{\nswitch ($match[0]) {\ncase '\\\\\\\\':\nreturn '\\\\';\ncase '\\\"':\nreturn '\"';\ncase '\\b':\nreturn chr(8);\ncase '\\f':\nreturn chr(12);\ncase '\\n':\nreturn \"\\n\";\ncase '\\r':\nreturn \"\\r\";\ncase '\\t':\nreturn \"\\t\";\ncase '\\/':\nreturn \"/\";\ndefault:\nreturn html_entity_decode('&#x'.ltrim(substr($match[0], 2), '0').';', 0, 'UTF-8');\n}\n}\n\nprivate function popStack($n)\n{\n$this->stack = array_slice($this->stack, 0, - (2 * $n));\n$this->vstack = array_slice($this->vstack, 0, - $n);\n$this->lstack = array_slice($this->lstack, 0, - $n);\n}\n\nprivate function lex()\n{\n$token = $this->lexer->lex() ?: 1; \n \n if (!is_numeric($token)) {\n$token = isset($this->symbols[$token]) ? $this->symbols[$token] : $token;\n}\n\nreturn $token;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Seld\\JsonLint;\n\n\n\n\n\n\nclass Lexer\n{\nprivate $EOF = 1;\nprivate $rules = array(\n0 => '/^\\s+/',\n1 => '/^-?([0-9]|[1-9][0-9]+)(\\.[0-9]+)?([eE][+-]?[0-9]+)?\\b/',\n2 => '{^\"(\\\\\\\\[\"bfnrt/\\\\\\\\]|\\\\\\\\u[a-fA-F0-9]{4}|[^\\0-\\x09\\x0a-\\x1f\\\\\\\\\"])*\"}',\n3 => '/^\\{/',\n4 => '/^\\}/',\n5 => '/^\\[/',\n6 => '/^\\]/',\n7 => '/^,/',\n8 => '/^:/',\n9 => '/^true\\b/',\n10 => '/^false\\b/',\n11 => '/^null\\b/',\n12 => '/^$/',\n13 => '/^./',\n);\n\nprivate $conditions = array(\n\"INITIAL\" => array(\n\"rules\" => array(0,1,2,3,4,5,6,7,8,9,10,11,12,13),\n\"inclusive\" => true,\n),\n);\n\nprivate $conditionStack;\nprivate $input;\nprivate $more;\nprivate $done;\nprivate $matched;\n\npublic $match;\npublic $yylineno;\npublic $yyleng;\npublic $yytext;\npublic $yylloc;\n\npublic function lex()\n{\n$r = $this->next();\nif (!$r instanceof Undefined) {\nreturn $r;\n}\n\nreturn $this->lex();\n}\n\npublic function setInput($input)\n{\n$this->input = $input;\n$this->more = false;\n$this->done = false;\n$this->yylineno = $this->yyleng = 0;\n$this->yytext = $this->matched = $this->match = '';\n$this->conditionStack = array('INITIAL');\n$this->yylloc = array('first_line' => 1, 'first_column' => 0, 'last_line' => 1, 'last_column' => 0);\n\nreturn $this;\n}\n\npublic function showPosition()\n{\n$pre = str_replace(\"\\n\", '', $this->getPastInput());\n$c = str_repeat('-', strlen($pre)); \n\nreturn $pre . str_replace(\"\\n\", '', $this->getUpcomingInput()) . \"\\n\" . $c . \"^\";\n}\n\npublic function getPastInput()\n{\n$past = substr($this->matched, 0, strlen($this->matched) - strlen($this->match));\n\nreturn (strlen($past) > 20 ? '...' : '') . substr($past, -20);\n}\n\npublic function getUpcomingInput()\n{\n$next = $this->match;\nif (strlen($next) < 20) {\n$next .= substr($this->input, 0, 20 - strlen($next));\n}\n\nreturn substr($next, 0, 20) . (strlen($next) > 20 ? '...' : '');\n}\n\nprotected function parseError($str, $hash)\n{\nthrow new \\Exception($str);\n}\n\nprivate function next()\n{\nif ($this->done) {\nreturn $this->EOF;\n}\nif (!$this->input) {\n$this->done = true;\n}\n\n$token = null;\n$match = null;\n$col = null;\n$lines = null;\n\nif (!$this->more) {\n$this->yytext = '';\n$this->match = '';\n}\n\n$rules = $this->getCurrentRules();\n$rulesLen = count($rules);\n\nfor ($i=0; $i < $rulesLen; $i++) {\nif (preg_match($this->rules[$rules[$i]], $this->input, $match)) {\npreg_match_all('/\\n.*/', $match[0], $lines);\n$lines = $lines[0];\nif ($lines) {\n$this->yylineno += count($lines);\n}\n\n$this->yylloc = array(\n'first_line' => $this->yylloc['last_line'],\n'last_line' => $this->yylineno+1,\n'first_column' => $this->yylloc['last_column'],\n'last_column' => $lines ? strlen($lines[count($lines) - 1]) - 1 : $this->yylloc['last_column'] + strlen($match[0]),\n);\n$this->yytext .= $match[0];\n$this->match .= $match[0];\n$this->matches = $match;\n$this->yyleng = strlen($this->yytext);\n$this->more = false;\n$this->input = substr($this->input, strlen($match[0]));\n$this->matched .= $match[0];\n$token = $this->performAction($rules[$i], $this->conditionStack[count($this->conditionStack)-1]);\nif ($token) {\nreturn $token;\n}\n\nreturn new Undefined();\n}\n}\n\nif ($this->input === \"\") {\nreturn $this->EOF;\n}\n\n$this->parseError(\n'Lexical error on line ' . ($this->yylineno+1) . \". Unrecognized text.\\n\" . $this->showPosition(),\narray(\n'text' => \"\",\n'token' => null,\n'line' => $this->yylineno,\n)\n);\n}\n\nprivate function begin($condition)\n{\n$this->conditionStack[] = $condition;\n}\n\nprivate function popState()\n{\nreturn array_pop($this->conditionStack);\n}\n\nprivate function getCurrentRules()\n{\nreturn $this->conditions[$this->conditionStack[count($this->conditionStack)-1]]['rules'];\n}\n\nprivate function performAction($avoiding_name_collisions, $YY_START)\n{\n$YYSTATE = $YY_START;\nswitch ($avoiding_name_collisions) {\ncase 0:\nbreak;\ncase 1:\nreturn 6;\nbreak;\ncase 2:\n$this->yytext = substr($this->yytext, 1, $this->yyleng-2);\n\nreturn 4;\ncase 3:\nreturn 17;\ncase 4:\nreturn 18;\ncase 5:\nreturn 23;\ncase 6:\nreturn 24;\ncase 7:\nreturn 22;\ncase 8:\nreturn 21;\ncase 9:\nreturn 10;\ncase 10:\nreturn 11;\ncase 11:\nreturn 8;\ncase 12:\nreturn 14;\ncase 13:\nreturn 'INVALID';\n}\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\nnamespace Seld\\JsonLint;\n\nclass ParsingException extends \\Exception\n{\nprotected $details;\n\npublic function __construct($message, $details = array())\n{\n$this->details = $details;\nparent::__construct($message);\n}\n\npublic function getDetails()\n{\nreturn $this->details;\n}\n}\n<?php\n\nnamespace JsonSchema\\Constraints;\n\n\n\n\n\n\n\nclass Undefined extends Constraint\n{\n\n\n\nfunction check($value, $schema = null, $path = null, $i = null)\n{\nif (!is_object($schema)) {\nreturn;\n}\n\n$path = $this->incrementPath($path, $i);\n\n\n $this->validateCommonProperties($value, $schema, $path);\n\n\n $this->validateTypes($value, $schema, $path, $i);\n\n\n}\n\n\n\n\n\n\n\n\n\npublic function validateTypes($value, $schema = null, $path = null, $i = null)\n{\n\n if (is_array($value)) {\n$this->checkArray($value, $schema, $path, $i);\n}\n\n\n if (is_object($value) && isset($schema->properties)) {\n$this->checkObject($value, $schema->properties, $path, isset($schema->additionalProperties) ? $schema->additionalProperties : null);\n}\n\n\n if (is_string($value)) {\n$this->checkString($value, $schema, $path, $i);\n}\n\n\n if (is_numeric($value)) {\n$this->checkNumber($value, $schema, $path, $i);\n}\n\n\n if (isset($schema->enum)) {\n$this->checkEnum($value, $schema, $path, $i);\n}\n}\n\n\n\n\n\n\n\n\n\nprotected function validateCommonProperties($value, $schema = null, $path = null, $i = null)\n{\n\n if (isset($schema->extends)) {\n$this->checkUndefined($value, $schema->extends, $path, $i);\n}\n\n\n if (is_object($value) && $value instanceOf Undefined) {\nif (isset($schema->required) && $schema->required) {\n$this->addError($path, \"is missing and it is required\");\n}\n} else {\n$this->checkType($value, $schema, $path);\n}\n\n\n if (isset($schema->disallow)) {\n$initErrors = $this->getErrors();\n\n$this->checkUndefined($value, $schema->disallow, $path);\n\n\n if (count($this->getErrors()) == count($initErrors)) {\n$this->addError($path, \" disallowed value was matched\");\n} else {\n$this->errors = $initErrors;\n}\n}\n}\n}<?php\n\nnamespace JsonSchema\\Constraints;\n\n\n\n\n\n\n\nclass Type extends Constraint\n{\n\n\n\nfunction check($value = null, $schema = null, $path = null, $i = null)\n{\n$type = isset($schema->type) ? $schema->type : null;\n$isValid = true;\n\nif (is_array($type)) {\n\n $validatedOneType = false;\n$errors = array();\nforeach ($type as $tp) {\n$validator = new Type($this->checkMode);\n$subSchema = new \\stdClass();\n$subSchema->type = $tp;\n$validator->check($value, $subSchema, $path, null);\n$error = $validator->getErrors();\n\nif (!count($error)) {\n$validatedOneType = true;\nbreak;\n} else {\n$errors = $error;\n}\n}\nif (!$validatedOneType) {\nreturn $this->addErrors($errors);\n}\n} elseif (is_object($type)) {\n$this->checkUndefined($value, $type, $path);\n} else {\n$isValid = $this->validateType($value, $type);\n}\n\nif ($isValid === false) {\n$this->addError($path, gettype($value) . \" value found, but a \" . $type . \" is required\");\n}\n}\n\n\n\n\n\n\n\n\n\nprotected function validateType($value, $type)\n{\n\n if (!$type) {\nreturn true;\n}\n\nswitch ($type) {\ncase 'integer' :\nreturn (integer)$value == $value ? true : is_int($value);\ncase 'number' :\nreturn is_numeric($value);\ncase 'boolean' :\nreturn is_bool($value);\ncase 'object' :\nreturn is_object($value);\n\n case 'array' :\nreturn is_array($value);\ncase 'string' :\nreturn is_string($value);\ncase 'null' :\nreturn is_null($value);\ncase 'any' :\nreturn true;\ndefault:\nthrow new \\InvalidArgumentException((is_object($value) ? 'object' : $value) . ' is a invalid type for ' . $type);\n}\n}\n}<?php\n\nnamespace JsonSchema\\Constraints;\n\n\n\n\n\n\n\nclass Schema extends Constraint\n{\n\n\n\npublic function check($element, $schema = null, $path = null, $i = null)\n{\nif ($schema !== null) {\n\n $this->checkUndefined($element, $schema, '', '');\n} elseif (isset($element->{$this->inlineSchemaProperty})) {\n\n $this->checkUndefined($element, $element->{$this->inlineSchemaProperty}, '', '');\n} else {\nthrow new \\InvalidArgumentException('no schema found to verify against');\n}\n}\n}<?php\n\nnamespace JsonSchema\\Constraints;\n\n\n\n\n\n\n\nclass Number extends Constraint\n{\n\n\n\npublic function check($element, $schema = null, $path = null, $i = null)\n{\n\n if (isset($schema->minimum) && $element < $schema->minimum) {\n$this->addError($path, \"must have a minimum value of \" . $schema->minimum);\n}\n\n\n if (isset($schema->maximum) && $element > $schema->maximum) {\n$this->addError($path, \"must have a maximum value of \" . $schema->maximum);\n}\n\n\n if (isset($schema->divisibleBy) && $element % $schema->divisibleBy != 0) {\n$this->addError($path, \"is not divisible by \" . $schema->divisibleBy);\n}\n}\n}<?php\n\nnamespace JsonSchema\\Constraints;\n\n\n\n\n\n\n\nclass Object extends Constraint\n{\n\n\n\nfunction check($element, $definition = null, $path = null, $additionalProp = null)\n{\n\n $this->validateDefinition($element, $definition, $path);\n\n\n $this->validateElement($element, $definition, $path, $additionalProp);\n}\n\n\n\n\n\n\n\n\n\npublic function validateElement($element, $objectDefinition = null, $path = null, $additionalProp = null)\n{\nforeach ($element as $i => $value) {\n\n$property = $this->getProperty($element, $i, new Undefined());\n$definition = $this->getProperty($objectDefinition, $i);\n\n\n if ($this->getProperty($definition, 'required') && !$property) {\n$this->addError($path, \"the property \" . $i . \" is required\");\n}\n\n\n if ($additionalProp === false && $this->inlineSchemaProperty !== $i && !$definition) {\n$this->addError($path, \"The property \" . $i . \" is not defined and the definition does not allow additional properties\");\n}\n\n\n if ($additionalProp && !$definition) {\n$this->checkUndefined($value, $additionalProp, $path, $i);\n}\n\n\n $require = $this->getProperty($definition, 'requires');\nif ($require && !$this->getProperty($element, $require)) {\n$this->addError($path, \"the presence of the property \" . $i . \" requires that \" . $require . \" also be present\");\n}\n\n\n $this->checkUndefined($value, $definition ? : new \\stdClass(), $path, $i);\n}\n}\n\n\n\n\n\n\n\n\npublic function validateDefinition($element, $objectDefinition = null, $path = null)\n{\nforeach ($objectDefinition as $i => $value) {\n$property = $this->getProperty($element, $i, new Undefined());\n$definition = $this->getProperty($objectDefinition, $i);\n$this->checkUndefined($property, $definition, $path, $i);\n}\n}\n\n\n\n\n\n\n\n\n\nprotected function getProperty($element, $property, $fallback = null)\n{\nif (is_array($element) ) {\nreturn array_key_exists($property, $element) ? $element[$property] : $fallback;\n} else {\nreturn isset($element->$property) ? $element->$property : $fallback;\n}\n}\n}<?php\n\nnamespace JsonSchema\\Constraints;\n\n\n\n\n\n\ninterface ConstraintInterface\n{\n\n\n\n\n\nfunction getErrors();\n\n\n\n\n\n\nfunction addErrors(array $errors);\n\n\n\n\n\n\n\nfunction addError($path, $message);\n\n\n\n\n\n\nfunction isValid();\n\n\n\n\n\n\n\n\n\n\nfunction check($value, $schema = null, $path = null, $i = null);\n}<?php\n\nnamespace JsonSchema\\Constraints;\n\n\n\n\n\n\n\nabstract class Constraint implements ConstraintInterface\n{\nprotected $checkMode = self::CHECK_MODE_NORMAL;\nprotected $errors = array();\nprotected $inlineSchemaProperty = '$schema';\n\nconst CHECK_MODE_NORMAL = 1;\nconst CHECK_MODE_TYPE_CAST = 2;\n\n\n\n\npublic function __construct($checkMode = self::CHECK_MODE_NORMAL)\n{\n$this->checkMode = $checkMode;\n}\n\n\n\n\npublic function addError($path, $message)\n{\n$this->errors[] = array(\n'property' => $path,\n'message' => $message\n);\n}\n\n\n\n\npublic function addErrors(array $errors)\n{\n$this->errors = array_merge($this->errors, $errors);\n}\n\n\n\n\npublic function getErrors()\n{\nreturn array_unique($this->errors, SORT_REGULAR);\n}\n\n\n\n\n\n\n\n\nprotected function incrementPath($path, $i)\n{\nif ($path !== '') {\nif (is_int($i)) {\n$path .= '[' . $i . ']';\n} else if ($i == '') {\n$path .= '';\n} else {\n$path .= '.' . $i;\n}\n} else {\n$path = $i;\n}\n\nreturn $path;\n}\n\n\n\n\n\n\n\n\n\nprotected function checkArray($value, $schema = null, $path = null, $i = null)\n{\n$validator = new Collection($this->checkMode);\n$validator->check($value, $schema, $path, $i);\n\n$this->addErrors($validator->getErrors());\n}\n\n\n\n\n\n\n\n\n\nprotected function checkObject($value, $schema = null, $path = null, $i = null)\n{\n$validator = new Object($this->checkMode);\n$validator->check($value, $schema, $path, $i);\n\n$this->addErrors($validator->getErrors());\n}\n\n\n\n\n\n\n\n\n\nprotected function checkType($value, $schema = null, $path = null, $i = null)\n{\n$validator = new Type($this->checkMode);\n$validator->check($value, $schema, $path, $i);\n\n$this->addErrors($validator->getErrors());\n}\n\n\n\n\n\n\n\n\n\nprotected function checkUndefined($value, $schema = null, $path = null, $i = null)\n{\n$validator = new Undefined($this->checkMode);\n$validator->check($value, $schema, $path, $i);\n\n$this->addErrors($validator->getErrors());\n}\n\n\n\n\n\n\n\n\n\nprotected function checkString($value, $schema = null, $path = null, $i = null)\n{\n$validator = new String($this->checkMode);\n$validator->check($value, $schema, $path, $i);\n\n$this->addErrors($validator->getErrors());\n}\n\n\n\n\n\n\n\n\n\nprotected function checkNumber($value, $schema = null, $path = null, $i = null)\n{\n$validator = new Number($this->checkMode);\n$validator->check($value, $schema, $path, $i);\n\n$this->addErrors($validator->getErrors());\n}\n\n\n\n\n\n\n\n\n\nprotected function checkEnum($value, $schema = null, $path = null, $i = null)\n{\n$validator = new Enum($this->checkMode);\n$validator->check($value, $schema, $path, $i);\n\n$this->addErrors($validator->getErrors());\n}\n\n\n\n\npublic function isValid()\n{\nreturn !$this->getErrors();\n}\n}<?php\n\nnamespace JsonSchema\\Constraints;\n\n\n\n\n\n\n\nclass Collection extends Constraint\n{\n\n\n\npublic function check($value, $schema = null, $path = null, $i = null)\n{\n\n if (isset($schema->minItems) && count($value) < $schema->minItems) {\n$this->addError($path, \"There must be a minimum of \" . $schema->minItems . \" in the array\");\n}\n\n if (isset($schema->maxItems) && count($value) > $schema->maxItems) {\n$this->addError($path, \"There must be a maximum of \" . $schema->maxItems . \" in the array\");\n}\n\n \n if (isset($schema->uniqueItems) && array_unique($value) != $value) {\n$this->addError($path, \"There are no duplicates allowed in the array\");\n}\n\n\n if (isset($schema->items)) {\n$this->validateItems($value, $schema, $path, $i);\n}\n}\n\n\n\n\n\n\n\n\n\nprotected function validateItems($value, $schema = null, $path = null, $i = null)\n{\nif (!is_array($schema->items)) {\n\n foreach ($value as $k => $v) {\n$initErrors = $this->getErrors();\n\n\n if (!isset($schema->additionalItems) || $schema->additionalItems === false) {\n$this->checkUndefined($v, $schema->items, $path, $k);\n}\n\n\n if (count($initErrors) < count($this->getErrors()) && (isset($schema->additionalItems) && $schema->additionalItems !== false)) {\n$secondErrors = $this->getErrors();\n$this->checkUndefined($v, $schema->additionalItems, $path, $k);\n}\n\n\n if (isset($secondErrors) && count($secondErrors) < $this->getErrors()) {\n$this->errors = $secondErrors;\n} elseif (isset($secondErrors) && count($secondErrors) == count($this->getErrors())) {\n$this->errors = $initErrors;\n}\n}\n} else {\n\n foreach ($value as $k => $v) {\nif (array_key_exists($k, $schema->items)) {\n$this->checkUndefined($v, $schema->items[$k], $path, $k);\n} else {\n\n if (array_key_exists('additionalItems', $schema) && $schema->additionalItems !== false) {\n$this->checkUndefined($v, $schema->additionalItems, $path, $k);\n} else {\n$this->addError(\n$path,\n'The item ' . $i . '[' . $k . '] is not defined in the objTypeDef and the objTypeDef does not allow additional properties'\n);\n}\n}\n}\n\n\n for ($k = count($value); $k < count($schema->items); $k++) {\n$this->checkUndefined(new Undefined(), $schema->items[$k], $path, $k);\n}\n}\n}\n}<?php\n\nnamespace JsonSchema\\Constraints;\n\n\n\n\n\n\n\nclass Enum extends Constraint\n{\n\n\n\npublic function check($element, $schema = null, $path = null, $i = null)\n{\nforeach ($schema->enum as $possibleValue) {\nif ($possibleValue == $element) {\n$found = true;\nbreak;\n}\n}\n\nif (!isset($found)) {\n$this->addError($path, \"does not have a value in the enumeration \" . implode(', ', $schema->enum));\n}\n}\n}<?php\n\nnamespace JsonSchema\\Constraints;\n\n\n\n\n\n\n\nclass String extends Constraint\n{\n\n\n\npublic function check($element, $schema = null, $path = null, $i = null)\n{\n\n if (isset($schema->maxLength) && strlen($element) > $schema->maxLength) {\n$this->addError($path, \"must be at most \" . $schema->maxLength . \" characters long\");\n}\n\n\n if (isset($schema->minLength) && strlen($element) < $schema->minLength) {\n$this->addError($path, \"must be at least \" . $schema->minLength . \" characters long\");\n}\n\n\n if (isset($schema->pattern) && !preg_match('/' . $schema->pattern . '/', $element)) {\n$this->addError($path, \"does not match the regex pattern \" . $schema->pattern);\n}\n}\n}<?php\n\nnamespace JsonSchema;\n\nuse JsonSchema\\Constraints\\Schema;\nuse JsonSchema\\Constraints\\Constraint;\n\n\n\n\n\n\n\n\nclass Validator extends Constraint\n{\n\n\n\n\n\n\n\nfunction check($value, $schema = null, $path = null, $i = null)\n{\n$validator = new Schema($this->checkMode);\n$validator->check($value, $schema);\n$this->addErrors($validator->getErrors());\n}\n}<?php\n\n\n\nrequire_once __DIR__ . '/composer' . '/autoload_real.php';\n\nreturn ComposerAutoloaderInit46e43f0773f321ca0044ed66326fe138::getLoader();\n<?php\n\n\n\n$vendorDir = dirname(dirname(__FILE__));\n$baseDir = dirname($vendorDir);\n\nreturn array(\n'Symfony\\\\Component\\\\Process\\\\' => array($vendorDir . '/symfony/process'),\n'Symfony\\\\Component\\\\Finder\\\\' => array($vendorDir . '/symfony/finder'),\n'Symfony\\\\Component\\\\Console\\\\' => array($vendorDir . '/symfony/console'),\n'Seld\\\\JsonLint' => array($vendorDir . '/seld/jsonlint/src'),\n'JsonSchema' => array($vendorDir . '/justinrainbow/json-schema/src'),\n'Composer' => array($baseDir . '/src'),\n);\n<?php\n\n\n\n$vendorDir = dirname(dirname(__FILE__));\n$baseDir = dirname($vendorDir);\n\nreturn array(\n);\n<?php\n\n\n\nclass ComposerAutoloaderInit46e43f0773f321ca0044ed66326fe138\n{\nprivate static $loader;\n\npublic static function loadClassLoader($class)\n{\nif ('Composer\\Autoload\\ClassLoader' === $class) {\nrequire __DIR__ . '/ClassLoader.php';\n}\n}\n\npublic static function getLoader()\n{\nif (null !== self::$loader) {\nreturn self::$loader;\n}\n\nspl_autoload_register(array('ComposerAutoloaderInit46e43f0773f321ca0044ed66326fe138', 'loadClassLoader'), true, true);\nself::$loader = $loader = new \\Composer\\Autoload\\ClassLoader();\nspl_autoload_unregister(array('ComposerAutoloaderInit46e43f0773f321ca0044ed66326fe138', 'loadClassLoader'));\n\n$vendorDir = dirname(__DIR__);\n$baseDir = dirname($vendorDir);\n\n$map = require __DIR__ . '/autoload_namespaces.php';\nforeach ($map as $namespace => $path) {\n$loader->set($namespace, $path);\n}\n\n$classMap = require __DIR__ . '/autoload_classmap.php';\nif ($classMap) {\n$loader->addClassMap($classMap);\n}\n\n$loader->register(true);\n\nreturn $loader;\n}\n}\n<?php\n\n\n\n\n\n\n\n\n\n\n\nnamespace Composer\\Autoload;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass ClassLoader\n{\nprivate $prefixes = array();\nprivate $fallbackDirs = array();\nprivate $useIncludePath = false;\nprivate $classMap = array();\n\npublic function getPrefixes()\n{\nreturn call_user_func_array('array_merge', $this->prefixes);\n}\n\npublic function getFallbackDirs()\n{\nreturn $this->fallbackDirs;\n}\n\npublic function getClassMap()\n{\nreturn $this->classMap;\n}\n\n\n\n\npublic function addClassMap(array $classMap)\n{\nif ($this->classMap) {\n$this->classMap = array_merge($this->classMap, $classMap);\n} else {\n$this->classMap = $classMap;\n}\n}\n\n\n\n\n\n\n\n\npublic function add($prefix, $paths, $prepend = false)\n{\nif (!$prefix) {\nif ($prepend) {\n$this->fallbackDirs = array_merge(\n(array) $paths,\n$this->fallbackDirs\n);\n} else {\n$this->fallbackDirs = array_merge(\n$this->fallbackDirs,\n(array) $paths\n);\n}\n\nreturn;\n}\n\n$first = $prefix[0];\nif (!isset($this->prefixes[$first][$prefix])) {\n$this->prefixes[$first][$prefix] = (array) $paths;\n\nreturn;\n}\nif ($prepend) {\n$this->prefixes[$first][$prefix] = array_merge(\n(array) $paths,\n$this->prefixes[$first][$prefix]\n);\n} else {\n$this->prefixes[$first][$prefix] = array_merge(\n$this->prefixes[$first][$prefix],\n(array) $paths\n);\n}\n}\n\n\n\n\n\n\n\npublic function set($prefix, $paths)\n{\nif (!$prefix) {\n$this->fallbackDirs = (array) $paths;\n\nreturn;\n}\n$this->prefixes[substr($prefix, 0, 1)][$prefix] = (array) $paths;\n}\n\n\n\n\n\n\npublic function setUseIncludePath($useIncludePath)\n{\n$this->useIncludePath = $useIncludePath;\n}\n\n\n\n\n\n\n\npublic function getUseIncludePath()\n{\nreturn $this->useIncludePath;\n}\n\n\n\n\n\n\npublic function register($prepend = false)\n{\nspl_autoload_register(array($this, 'loadClass'), true, $prepend);\n}\n\n\n\n\npublic function unregister()\n{\nspl_autoload_unregister(array($this, 'loadClass'));\n}\n\n\n\n\n\n\n\npublic function loadClass($class)\n{\nif ($file = $this->findFile($class)) {\ninclude $file;\n\nreturn true;\n}\n}\n\n\n\n\n\n\n\n\npublic function findFile($class)\n{\n\n if ('\\\\' == $class[0]) {\n$class = substr($class, 1);\n}\n\nif (isset($this->classMap[$class])) {\nreturn $this->classMap[$class];\n}\n\nif (false !== $pos = strrpos($class, '\\\\')) {\n\n $classPath = strtr(substr($class, 0, $pos), '\\\\', DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR;\n$className = substr($class, $pos + 1);\n} else {\n\n $classPath = null;\n$className = $class;\n}\n\n$classPath .= strtr($className, '_', DIRECTORY_SEPARATOR) . '.php';\n\n$first = $class[0];\nif (isset($this->prefixes[$first])) {\nforeach ($this->prefixes[$first] as $prefix => $dirs) {\nif (0 === strpos($class, $prefix)) {\nforeach ($dirs as $dir) {\nif (file_exists($dir . DIRECTORY_SEPARATOR . $classPath)) {\nreturn $dir . DIRECTORY_SEPARATOR . $classPath;\n}\n}\n}\n}\n}\n\nforeach ($this->fallbackDirs as $dir) {\nif (file_exists($dir . DIRECTORY_SEPARATOR . $classPath)) {\nreturn $dir . DIRECTORY_SEPARATOR . $classPath;\n}\n}\n\nif ($this->useIncludePath && $file = stream_resolve_include_path($classPath)) {\nreturn $file;\n}\n\nreturn $this->classMap[$class] = false;\n}\n}\n<?php\n\nif (PHP_SAPI !== 'cli') {\n    echo 'Warning: Composer should be invoked via the CLI version of PHP, not the '.PHP_SAPI.' SAPI'.PHP_EOL;\n}\n\nrequire __DIR__.'/../src/bootstrap.php';\n\nuse Composer\\Console\\Application;\n\nerror_reporting(-1);\n\nif (function_exists('ini_set')) {\n    @ini_set('display_errors', 1);\n\n    $memoryInBytes = function ($value) {\n        $unit = strtolower(substr($value, -1, 1));\n        $value = (int) $value;\n        switch($unit) {\n            case 'g':\n                $value *= 1024;\n                // no break (cumulative multiplier)\n            case 'm':\n                $value *= 1024;\n                // no break (cumulative multiplier)\n            case 'k':\n                $value *= 1024;\n        }\n\n        return $value;\n    };\n\n    $memoryLimit = trim(ini_get('memory_limit'));\n    // Increase memory_limit if it is lower than 512M\n    if ($memoryLimit != -1 && $memoryInBytes($memoryLimit) < 512 * 1024 * 1024) {\n        @ini_set('memory_limit', '512M');\n    }\n    unset($memoryInBytes, $memoryLimit);\n}\n\n// run the command application\n$application = new Application();\n$application->run();\n\nCopyright (c) 2011 Nils Adermann, Jordi Boggiano\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is furnished\nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\nƼ��y����S�Z�\u001cu\"U\t�\u0002\u0000\u0000\u0000GBMB"]],"start1":0,"start2":0,"length1":0,"length2":810589}]],"length":810589}
